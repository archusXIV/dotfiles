DK(1)                                 General Commands Manual                                 DK(1)

NAME
       dk - A tiling window manager in the vein of dwm, bspwm, and xmonad.

SYNOPSIS
       dk [-vh]

       dkcmd [-vh] [-p [FILE]] [COMMAND]

DESCRIPTION
       Windows  are  managed in various layouts, and are grouped by workspaces.  Each window can be
       assigned to a single workspace and will have a small border to  indicate  the  focus  state.
       Changes to one workspace will not impact others. Workspaces can be dynamically or statically
       assigned and viewed on any monitor, by default only one workspace per monitor is created.

       Monitors can be assigned one workspace at a time, all workspaces are available from all mon‐
       itors in dynamic mode, floating windows will retain their relative location within each mon‐
       itor  area.  If  viewing an already visible workspace on another monitor, the two workspaces
       will swap monitors when dynamic, otherwise the mouse will be warped to the assigned monitor.

       In tiled layout windows are organized in a master and two stack areas, the number of masters
       and first stack windows can be adjusted from 0-n with the second stack  containing  all  re‐
       maining windows.

       In monocle layout windows are maximized and stacked on top of each other with only one visi‐
       ble at a time.

       In grid layout windows attempt to occupy equal space with all being visible.

       In spiral and dwindle layout windows occupy 1/2 the space of the previous, moving inwards to
       the center of the screen or outwards to the bottom right respectively.

       In  floating  layout  windows  are  not organized or placed in any particular way and can be
       moved or resized freely.

OPTIONS
       -h     Prints usage information to stdout and exits.

       -v     Prints version information to stdout and exits.

       -p     Pretty format JSON input from FILE or STDIN and print on STDOUT.

CUSTOMIZATION
       For basic changes dk can be customized by running commands through the dkcmd program.

       On startup dk looks for a dkrc file in:

       • $DKRC

       • $XDG_CONFIG_HOME/dk/dkrc

       • $HOME/.config/dk/dkrc

       and runs the first it can, this file must be executable.  This can  be  used  to  initialize
       settings, customization, and running programs.

       Further  configuration  such  as  adding  layouts  or  callbacks can be done by copying con‐
       fig.def.h to config.h, editing it, and recompiling.

DKCMD
       Most of your interaction with the window manager will be using dkcmd  which  writes  one  or
       more commands into the socket where it is then read and parsed by the window manager.

Syntax Outline
       The  commands  have  a  very basic syntax and parsing, the input is broken down into smaller
       pieces (tokens) which are then passed to the matching keyword function, otherwise  an  error
       is returned.

       Tokens are delimited by one or more:

       • whitespace (space or tab)

       • quotation mark (' or ")

       • equal sign (=)

       This means the following inputs are all equivalent.

              setting=value
              setting value
              setting="value"
              setting = 'value'
              setting "value"
              setting     "value"

       and result in two tokens: setting and value Quotation exists as a way to preserve whitespace
       and  avoid  interpretation  by the shell, otherwise we have no way of determining whether an
       argument is a continuation of the previous or the beginning of the next. If the value  being
       matched has quotes in it, they can be escaped or strong quoted

              title="^\"preserved quotes\"$"
              title='^"preserved quotes"$'

       For various commands dk will expect a certain data type or format to be given.

       • string: normal plain text, must be less than 256 characters.

       • boolean: true, false, 1, or 0.

       • hex: (0x/#)XXXXXXXX, used for window ids

       • integer: (+/-)1, if it is preceded by a sign it is considered relative.

       • float: (+/-)0.1, same as integer but must contain a decimal value.

       • colour: (0x/#)[AA]RRGGBB, hex value, if no alpha channel is given the colour is opaque.

COMMANDS
        dkcmd COMMAND

       ____________________________________________________________

   WM
       • exit exit dk.

       • restart re-execute dk.

   Ws and Mon
       mon and ws operate on monitors and workspaces respectively.

       • CLIENT (hex/string) The window id in hex or class string, if unspecified the active window
         is used.

       • TARGET (integer/string) Name or number of the workspace or monitor to target or strings

         • next relative forward

         • prev relative backward

         • last last viewed

         • nextne next non-empty

         • prevne previous non-empty

         ws  [SUBCOMMAND] [CLIENT] TARGET
         mon [SUBCOMMAND] [CLIENT] TARGET

   Subcommands
       view View the TARGET, default if no subcommand is given.

              ws view TARGET
              ws TARGET

       send Send CLIENT to the TARGET.

              mon send [CLIENT] TARGET

       follow Follow CLIENT to the TARGET.

              ws follow [CLIENT] TARGET

       ____________________________________________________________

   Rule
       rule operates on window rules.

       • MATCH one or more regex strings to be used when matching window properties.

       • SETTING one or more window setting to be applied when a matched window is encountered.

         rule [SUBCOMMAND] MATCH SETTING

   Subcommands
       apply  applies  RULE  to all matching windows, if RULE is * apply all rules and MATCH is ig‐
       nored.

              rule apply RULE [MATCH]

       remove removes RULE, if RULE is * remove all rules and MATCH is ignored.

              rule remove RULE [MATCH]

   Settings
       class instance title type (string) regex to match the window  class,  instance,  title,  and
       type  respectively  (may be prefixed with match_ for clarity). Regex matching is always done
       case insensitive with extended regex mode enabled.

              rule [SUBCOMMAND] class="^firefox$" instance="^navigator$" title="^mozilla firefox$" type=dialog [SETTING]
              type currently only supports dialog and splash windows, all others are treated as normal windows.

       ws (integer/string) determine what workspace the window should be on.

              rule MATCH ws=1
              rule MATCH ws=term

       mon (integer/string) determine what monitor the window should be on.

              rule MATCH mon=1
              rule MATCH mon=HDMI-A-0

       x y w width h height bw border_width (integer/string)  determine  the  window  location  and
       size.

       • x change the x coordinate, can be an integer or one of the following.

         • center left and right gravitate on the x coordinate.

       • y change the y coordinate, can be an integer or one of the following.

         • center top and bottom gravitate on the y coordinate.

       • w width change the window width.

       • h height change the window height.

       • bw border_width change the window border width.

         rule MATCH x=20 y=100 w=1280 h=720 bw=0
         rule MATCH x=center y=center w=1280 h=720 bw=0

       callback (string) determine a callback function to be invoked on window open and close.
                         These are defined in the config header and compiled into the source,
                         one example is provided.

              rule MATCH callback=albumart

       float stick (boolean) determine if the window should be floating or stick respectively.

              rule MATCH float=true stick=true

       ignore_cfg (boolean) determine if the window should ignore configure request events (size or
       location changes).

              rule MATCH ignore_cfg=true

       ignore_msg  (boolean) determine if the window should ignore client message window activation
       events (grabbing focus).

              rule MATCH ignore_msg=true

       focus (boolean) determine if the window should be focused and view it’s workspace.
                       If mon is also set it will be activated first before viewing the workspace.

              rule MATCH focus=true

       terminal (boolean) determine if the window should be considered  a  terminal  for  absorbing
       other windows and not being absorbed itself.

              rule MATCH terminal=true

       no_absorb (boolean) determine if the window should never absorb other windows.

              rule MATCH no_absorb=true

       scratch (boolean) determine if the window should be in the scratchpad.

              rule MATCH scratch=true

       ____________________________________________________________

   Set
       set operates on workspace or global configuration settings.

       • SETTING one or more settings to be changed.

       • WS the workspace which subcommand should apply to, if unspecified the current is used.
            _ is a special workspace used to define default values for new workspaces which haven’t
            been created yet.

         set [WS] SETTING
         set ws=_ [apply] SETTING

   Set Options
       numws (integer) change the number of workspaces to allocate.

              set numws=10

       name (string) change the WS name.

              set ws=1 name="term"

       static_ws (boolean) disable dynamic workspaces for multi-head systems.

              set static_ws=false

       mon (integer/string) change which monitor WS should be on (requires static_ws=true).

              set ws=1 mon=HDMI-A-0
              set ws=1 mon=1

       master stack (integer) change the number of windows to occupy the master area (tile layout).

              set [WS] stack  3
              set [WS] master +1 stack -1

       msplit ssplit (float) change the workspace master or stack split ratios respectively.

              set [WS] msplit +0.1
              set [WS] ssplit 0.55

       gap (integer) change the workspace gap width.

              set [WS] gap 10

       tile_hints (boolean) whether to respect size hints in tiled layouts.

              set tile_hints=true

       tile_tohead  (boolean)  whether  to place new windows at the head or the tail of the list in
       tiled layouts.

              set tile_tohead=true

       smart_gap (boolean) whether gaps are disabled on workspaces with only one tiled window.

              set smart_gap=true

       smart_border (boolean) whether borders are disabled on workspaces with only one  tiled  win‐
       dow.

              set smart_border=true

       focus_urgent (boolean) whether to focus windows that request it.

              set focus_urgent=true

       focus_open (boolean) whether windows are focused when opened.

              set focus_open=false

       focus_mouse (boolean) whether window focus follows the mouse.

              set focus_mouse=false

       obey_motif (boolean) whether to obey motif hints for borders.

              set obey_motif=false

       win_minxy (integer) amount of window (in pixels) to be kept on the screen when moving.

              set win_minxy=20

       win_minwh (integer) minimum window size.

              set win_minwh=50

       apply when changing the default _ workspace apply settings to existing real workspaces.

              set ws=_ apply SETTING

       layout (string) change the workspace window layout.

       • tile windows are grouped into master and stack areas.

       • rtile tile layout with master area on the right

       • mono windows arranged maximized and stacked on top of one another.

       • grid all windows try to occupy equal space.

       • spiral windows shrink by 1/2 towards the center of the screen.

       • dwindle windows shrink by 1/2 towards the bottom right of the screen.

       • tstack  windows are grouped into a master area on the bottom and one horizontal stack area
         on top.

       • none floating layout, windows can be freely moved and resized.

       • cycle switch between available layouts.

         set [WS] layout mono

       border change the window border sizes and colours.

       • w width (integer) change the overall window border width.

       • ow outer outer_width (integer) change the outer border width (greater than 0 makes  double
         borders).

       • colour  color  (string)  change  the  border (overall and outer) colour for various window
         states.

         • f focus (colour) the active window border overall colour.

         • r urgent (colour) urgent window border overall colour.

         • u unfocus (colour) normal window border overall colour.

         • of outer_focus (colour) the active window outer border colour.

         • or outer_urgent (colour) urgent window outer border colour.

         • ou outer_unfocus (colour) normal window outer border colour.

         set border w=5 ow=3 colour f='#6699cc' u='#444444' r='#ee5555' of='#222222' ou='#222222' or='#222222'

       pad change the workspace padding.

       • l left (integer) change the workspace left side padding.

       • r right (integer) change the workspace right side padding.

       • t top (integer) change the workspace top padding.

       • b bottom (integer) change the workspace bottom padding.

         set [WS] pad l=50 r=50 t=50 b=50

       mouse change the mouse binds for move and resize (global, does not take a workspace).

       • mod (string) change the modifier used in combination with move resize buttons.

         • alt mod1 Alt key (default).

         • super mod4 Win key.

         • ctrl control Ctrl key.

       • move resize (string) change the button used for move and resize respectively.

         • button1 left mouse button.

         • button2 right mouse button.

         • button3 middle mouse button.

         set mouse move=button1 resize=button2 mod=mod1

       ____________________________________________________________

   Win
       win operates on windows.

       • CLIENT (hex/string) the window id in hex or class string, if unspecified the current  win‐
         dow is used.

         win [CLIENT] ACTION

   Actions
       cycle cycle windows in place.

              win cycle

       float change the window floating state.

              win [CLIENT] float
              win [CLIENT] float=false

       full change the window fullscreen state.

              win [CLIENT] full

       fakefull  change  the  window fake fullscreen state (allow moving, resizing, and tiling when
       fullscreen).

              win [CLIENT] fakefull

       stick change the window sticky state.

              win [CLIENT] stick

       swap change the window between it’s current location and master.

              win [CLIENT] swap

       kill close the window.

              win [CLIENT] kill

       focus (integer/string) change the focused window.

       • next focus the next window.

       • prev focus the previous window.

         win CLIENT focus
         win focus next
         win focus +2

       scratch (integer/string) show or hide a scratchpad window.

       • pop show a window in the scratch.

       • push hide a window in the scratch.

         With no arguments scratch will do the following

       • If there are window(s) in the scratch it will continue to pop them out until empty.

       • If there is a window on any workspace (other than the current workspace) that has been re‐
         cently popped, it will be brought to the current workspace. If it's on the  current  work‐
         space it is instead pushed.

       • If there are no window(s) in the scratch and no windows that have been there previously it
         will push the active window into the scratch.

         win scratch
         win [CLIENT] scratch # same toggle behaviour but on the passed window
         win [CLIENT] scratch push # push the given window or the active window.

       mvstack (integer/string) move a tiled window around the stack.

       • up move the tiled window up the stack.

       • down move the tiled window down the stack.

         win CLIENT mvstack up

       resize change the window size, location, and border width.

       • x change the x coordinate, can be an integer or one of the following.

         • center left and right gravitate on the x coordinate.

       • y change the y coordinate, can be an integer or one of the following.

         • center top and bottom gravitate on the y coordinate.

       • w width change the window width.

       • h height change the window height.

       • bw border_width change the window border width.

         win [CLIENT] resize x=100 y=100 w=1280 h=720 bw=1
         win [CLIENT] resize x=center y=center w=1280 h=720 bw=1

       ____________________________________________________________

   Status
       status print status information as JSON to a file or stdout.

              status [TYPE] [FILE] [NUM]

   Settings
       type the type of status to output and when to trigger.

       • ws output full workspace info - triggers on workspace change.

       • win output current window title - triggers on window or title change.

       • layout output current layout name - triggers on layout change.

       • bar identical output to ‘ws‘ except - triggers on all changes.

       • full output full wm and client state - triggers on all changes.

         status type=ws [FILE] [NUM]

       file the location of the status file (if not passed stdout is used).

              status file=/tmp/dk.status [TYPE] [NUM]

       num the number of times to output, -1 is infinite and default if not passed.

              status [TYPE] [FILE]
              status num=1 [TYPE] [FILE]

BUGS
       Please   submit   a   bug   report   with   as  much  detail  as  possible  to  https://bit‐
       bucket.org/natemaia/dk/issues/new

AUTHORS/CONTRIBUTORS
       Nathaniel Maia <natemaia10@gmail.com>, Dmitry Belitsky <dmitry.belitsky@gmail.com>

                                         dk-2.3.r2.gf59cc3b                                   DK(1)
