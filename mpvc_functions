#!/bin/sh

usage() {
    cat >&2 << EOF
Usage: $(basename "$0") [-S "socket"] [-a "filenames"] [-o "path"] [-f "format string"]
    -p | --toggle       : Toggle playback.
    -s | --stop         : Always stop playback.
    -P | --play         : Always start playback.
    -f | --format       : Enter a formatting string.
    -a | --add          : Add files to playlist.
    -i | --playlist     : Print filenames of tracks to fit within terminal.
    -I | --fullplaylist : Print all filenames of tracks in current playlist.
    -o | --save         : Save current playlist to given path.
    -j | --track        : Go forwards/backwards through the playlist queue.
    -J | --tracknum     : Jump to playlist item number.
    -z | --shuffle      : Shuffle the current playlist.
    -l | --loop         : Loop currently playing playlist.
    -L | --loopfile     : Loop currently playing file.
    -v | --vol          : Increase/decrease volume relative to current volume.
    -V | --volume       : Set absolute volume.
    -m | --mute         : Toggle sound.
    -t | --seek         : Increases/decreases time relatively, accepts % values.
    -T | --time         : Set absolute time.
    -x | --speed        : Increase/decrease speed relative to the current speed.
    -X | --speedval     : Set absolute speed.
    -I | --image        : Enable adding of images to the queue.
    -k | --kill         : Kill the mpv process controlling the given socket.
    -K | --killall      : Kill all mpv processes indiscriminately.
    -S | --socket       : Set socket location [default: $SOCKET].
    -q | --quiet        : Surpress all text output.
    -Q | --vid=no       : Start mpv with video output disabled.
    -- |                : After adding files options after -- are passed to mpv.
    -h | --help         : Print this help.

Formatting:
    \`$(basename "$0") --format\` will interpret the following delimiters if they are found:

    %name%, %path%, %dir%, %title%, %artist%, %album%, %albumartist%, comment%,
    %genre%, %year%, %percentage%, %playlistlength%, %position%, %repeat%,
    %single, %status%, %time%, %precisetime%, %speed%, %length%, %remaining%
    %volume%, %muted%, %frame%, %width%, %height%, %ab-loop-a%, %ab-loop-b%

MPC compatibility layer:
    mpvc features a nearly complete compatibility layer for mpc commands in
    addition to GNU style arguments. http://linux.die.net/man/1/mpc

Exit codes:
    0: Program ran succesfully.
    1: Input Argument error.
    2: Socket does not exist.
    3: Socket is not currently open.
    4: Dependency error.
EOF

    [  -z "$1" ] && exit || exit "$1"
}

    # Retrieval Functions
###############################################################################

# match given filename string to appropriate output
# accepted properties: filename
cleanFilename() {
    filename="$1"

    case "$filename" in
        *.googlevideo.com/*)
            filename="mps-yt stream"
            printf '%s\n' "$filename"
            ;;
        *youtu*|watch*)
            # no other option but to use jq
            if type jq > /dev/null 2>&1; then
                # this is fucking quick
                id="${filename#*.}"
                title="$(curl -sL \
                "https://youtube.com/oembed?url=https://youtube.com/watch?v=$id" | \
                jq -r '.title')"
            else
                title="$filename"
            fi

            printf '%s\n' "$title"
            ;;
        *)
            # return filename to relative path
            # this will probably look funky if there's a '/' in the filename
            filename=$(basename "$filename")
            printf '%s\n' "$filename"
            ;;
    esac
}

# accepted properties: media-title, path
getMediaProperties() {
    property="$1"

    mediaValue=$(printf '%s\n' "{ \"command\": [\"get_property\", \
    \"${property}\" ] }" | $SOCKETCOMMAND 2> /dev/null | awk -F '"' '{print $4}')

    printf '%s\n' "$mediaValue" | escapeSedChar '&' | escapeSedChar '#'
}

# accepted properties: date, genre, title, album, artist, album_artist
getMetadata() {
    property=$1

    metadata=$(printf '%s\n' "{ \"command\": [\"get_property\", \
    \"metadata/by-key/${property}\" ] }" | $SOCKETCOMMAND 2> /dev/null | \
        tr -d "{}" | awk -F '"' '{print $4}')

    # test for no result
    case "$metadata" in
        "property not found")
            result="N/A"
            ;;
        *)
            result="$metadata"
            ;;
    esac

    # test if title has no property and return filename instead
    if [ "$property" = "title" ]; then
        case "$metadata" in
            "property not found")
                result=$(getPropertyString filename)
                ;;
            "error")
                result=$(getPropertyString filename)
                ;;
            *)
                result=$(cleanFilename "$result")
                ;;
        esac
    fi

    printf '%s' "$result" | escapeSedChar '&' | escapeSedChar '#'
}

# retrieve integer/boolean property
# accepted properties: mute, pause, loop-file, estimated-frame-number, width,
#                      height
getProperty() {
    property=$1

    result=$(printf '%s\n' "{ \"command\": [\"get_property\", \
    \"${property}\"] }" | $SOCKETCOMMAND 2> /dev/null | awk -F '[":,]' '{print $4}')

    printf '%s' "$result"
}

# accepted properties: idle-active, playlist-count, playlist-pos, playback-time,
#                      playtime-remaining, time-remaining, percent-pos,
#                      duration, volume
getPropertyString() {
    property=$1

    result=$(printf '%s\n' "{ \"command\": [\"get_property_string\", \
    \"${property}\"] }" | $SOCKETCOMMAND 2> /dev/null | awk -F '[".]' '{print $4}')

    case "$result" in
        "error")
            [ $# -ge 2 ] && printf '%s' "$2" || printf '%s' "N/A"
            return 1
            ;;
        *)
            printf '%s' "$result"
            ;;
    esac
}

# accepted properties: speed
getSpeed() {
    speed=$(printf '%s\n' "{ \"command\": [\"get_property_string\", \
    \"speed\"] }" | $SOCKETCOMMAND 2> /dev/null | awk -F '"' '{print substr ($4, 0, 4)}')

    printf '%s' "$speed"
}

# accepted properties: loop-file, loop-playlist
getLoopStatus() {
    property=$1

    case "$property" in
        loop-file)
            status=$(getProperty loop-file)
            ;;
        loop-playlist)
            status=$(printf '%s\n' "{ \"command\": [\"get_property\", \
    \"loop-playlist\"] }" | $SOCKETCOMMAND 2> /dev/null)
            case "$status" in
                *inf*) status=$(printf '%s\n' "$status" | cut -d\" -f 4)
                ;;
                *)     status=$(printf '%s\n' "$status" | awk -F '[":,]' '{print $4}')
                ;;
            esac
    esac

    case "$status" in
        true | inf) loop="yes" ;;
        false)      loop="no"  ;;
        *)          loop="N/A" ;;
    esac

    printf '%s' "$loop"
}

getMuteStatus() {
    muted="$(getProperty mute)"

    case "$muted" in
        true)  muted="yes" ;;
        false) muted="no"  ;;
        *)     muted="N/A" ;;
    esac

    printf '%s' "$muted"
}

getPauseStatus() {
    status="$(getProperty pause)"

    case "$status" in
        true)  status="paused"  ;;
        false) status="playing" ;;
        *)     status="N/A"     ;;
    esac

    printf '%s' "$status"
}

# accepted properties: $1: filename $2: full path flag to skip basename
getPlaylistFilename() {
    track="$1"
    fullpathFlag="$2"

    filename=$(printf '%s\n' "{ \"command\": [\"get_property_string\", \
    \"playlist/$track/filename\"] }" | $SOCKETCOMMAND 2> /dev/null | \
        cut -d\" -f 4)

    [  "$fullpathFlag" != "fullpath" ] && filename=$(cleanFilename "$filename")

    printf '%s\n' "$filename"
}

# print all filenames in current playlist
getPlaylist() {
    noColour="$1"

    tracks=$(getPropertyString playlist-count)
    currentTrack=$(getPropertyString playlist-pos)

    [ "$tracks" -eq 0 ] || [ "$currentTrack" = "N/A" ] && {
        printf '%s\n' "${SOCKET} is currently idle." >&2
        exit 1
    }

    calculateTerminalHeight

    while [ "$FIRST" -le "$LAST" ]; do
        filename=$(getPlaylistFilename $((FIRST - 1)))

        case "$noColour" in
            "nocolour")
                printf '%d	%s\n' "$FIRST" "${filename}"
                ;;
            *)
                if [ "$currentTrack" -eq $((FIRST - 1)) ]; then
                    printf '%d	[7m %s[0m\n' "$FIRST" "${filename}"
                else
                    printf '%d	 %s\n' "$FIRST" "${filename}"
                fi
                ;;
        esac

        FIRST=$((FIRST + 1))
    done
}

getFullPlaylist() {
    noColour="$1"

    tracks=$(getPropertyString playlist-count)
    currentTrack=$(getPropertyString playlist-pos)

    [  "$tracks" -eq 0 ] || [ "$currentTrack" = "N/A" ] && {
        printf '%s\n' "${SOCKET} is currently idle." >&2
        exit 1
    }

    FIRST=1
    LAST=$(getPropertyString playlist-count)

    while [ "$FIRST" -le "$LAST" ]; do
        filename=$(getPlaylistFilename $((FIRST - 1)))

        case "$noColour" in
            "nocolour")
                printf '%d	%s\n' "$FIRST" "${filename}"
                ;;
            *)
                if [ "$currentTrack" -eq $((FIRST - 1)) ]; then
                    printf '%d	[7m %s[0m\n' "$FIRST" "${filename}"
                else
                    printf '%d	 %s\n' "$FIRST" "${filename}"
                fi
                ;;
        esac

        FIRST=$((FIRST + 1))
    done
}

# open mpvc to retrieve all metadata from a playlist file
getFilenameMetadata() {
    intCheck "$1" || exit 1

    trackToMetadata="$1"

    filename=$(getPlaylistFilename "$trackToMetadata" fullpath)
    echo "$filename"

    # mpvc -S /tmp/tempsock -m -a "$filename" -f \
# "Artist: %artist%"
}

# saves playlist to file but with no path checking. we live dangerously
savePlaylist() {
    saveLocation="$1"

    [ -e "$saveLocation.m3u" ] && {
        printf '%s\n' "Playlist exists! Overwrite? (y for yes, anything else no)"

        oldstty=$(stty -g)
        stty raw -echo; key="$(head -c 1)"; stty "$oldstty"
        case $key in
            y) rm "$saveLocation.m3u" ;;
            *) return                 ;;
        esac
    }

    printf '%s\n' "Adding files to $saveLocation.m3u..."

    FIRST=1
    LAST=$(getPropertyString playlist-count)

    while [ "$FIRST" -le "$LAST" ]; do
        printf '%s\n' "$(getPlaylistFilename $((FIRST - 1)) fullpath)" >> "$saveLocation".m3u

        FIRST=$((FIRST + 1))
    done

    QUIETFLAG="true"
}

    # Control Functions

appendTrack() {
    filename="$*"

    # require absolute paths
    if [ -e "$filename" ]; then
        [ "$(printf "%s" "$filename" | cut -c 1)" != '/' ] && filename="$(pwd)/$filename"
    fi

    # skip over various other filetypes and images unless wanted
    # this doesn't stop mpv from resolving directories and adding them anyway
    case "$filename" in
        *.txt|*.log|*.cue)
            return
            ;;
        *.png|*.jpg|*.jpeg|*.gif|*.psd|*.pdf)
            [ "$IMAGEFLAG" != "true" ] && return
            ;;
        https*)
            ;;
    esac

    # test if socket is open to add more files too, else start mpv socket up
    if pgrep -f "mpv .*$SOCKET" > /dev/null 2>&1; then
        printf '%s\n' "{ \"command\": [\"loadfile\", \"$filename\", \
    \"append-play\" ] }" | $SOCKETCOMMAND > /dev/null 2>&1
    else
        exec mpv --really-quiet --idle=once --input-ipc-server="${SOCKET}" \
            $MPVOPTIONS "$filename" &

        # wait until mpv starts up
        while :; do
            idlestatus=$(getPropertyString idle-active)
            [ "$idlestatus" ] && break
            sleep 0.1
        done
    fi

    filename=$(cleanFilename "$filename")

    printf '%s\n' "Adding: ${filename}"
}

playNext() {
    # add track to the playlist
    appendTrack "$1"

    # find position of track to move
    trackToMove="$(getPropertyString playlist-count)"

    # find position of current track
    newTrackPosition="$(getPropertyString playlist-pos)"

    QUIETFLAG="true"

    # set position of next track
    moveTrack "$trackToMove" "$((newTrackPosition + 1))"
}

setTimeRelative() {
    time=$(getPropertyString playback-time)

    printf '%s\n' "$1" | grep "%" > /dev/null 2>&1 && {
        percentageValue=$(printf '%s\n' "$1" | rev | cut -c 2- | rev)
        printf '%s\n' "{ \"command\": [\"set_property\", \"percent-pos\", \
$percentageValue ] }" | $SOCKETCOMMAND > /dev/null
        return
    }

    sign=$(printf '%s' "$1" | cut -c 1)
    case "$sign" in
        -)
            minusFlag=true
            timeArg=$(printf '%s' "$1" | cut -c 2-)
            ;;
        +)
            timeArg=$(printf '%s' "$1" | cut -c 2-)
            ;;
        *)
            timeArg=$1
            ;;
    esac

    timeSec=$(parseTimeString "$timeArg") || exit $?

    case "$minusFlag" in
        "true") time=$((time - timeSec)) ;;
        *)      time=$((time + timeSec)) ;;
    esac

    printf '%s\n' "{ \"command\": [\"set_property\", \"playback-time\", \
    $time ] }" | $SOCKETCOMMAND > /dev/null
}

setTimeAbsolute() {
    time=$(parseTimeString "$1") || exit $?

    trackTime=$(getPropertyString duration)

    [ "$time" -ge "$trackTime" ] && {
        printf '%s\n' "Given time is greater than track length! ($(trackLength))"
        QUIETFLAG="true"
        return 1
    }

    printf '%s\n' "{ \"command\": [\"set_property\", \"playback-time\", \
    $time ] }" | $SOCKETCOMMAND > /dev/null
}

setVolumeRelative() {
    intCheck "$1" || exit 1

    # test if media has sound
    volume=$(getPropertyString volume)

    [ "$volume" = "error" ] && {
        printf '%s\n' "Currently playing media does not have sound." >&2
        exit 1
    }

    volume=$((volume + $1))

    [ $volume -lt 0 ] && {
        printf '%s\n' "Volume cannot be set lower than 0%" >&2
        exit 1
    }

    [ $volume -gt 130 ] && {
        printf '%s\n' "Volume cannot be set great than 130%" >&2
        exit 1
    }

    printf '%s\n' "{ \"command\": [\"set_property\", \"volume\", $volume ] }" | \
        $SOCKETCOMMAND > /dev/null
}

setVolumeAbsolute() {
    intCheck "$1" || exit 1

    # test if media has sound
    volume=$(getPropertyString volume)

    [ "$volume" = "error" ] && {
        printf '%s\n' "Currently playing media does not have sound." >&2
        return 1
    }

    volume=$1

    [ "$volume" -lt 0 ] && {
        printf '%s\n' "Volume cannot be set lower than 0%" >&2
        exit 1
    }

    [ "$volume" -gt 130 ] && {
        printf '%s\n' "Volume cannot be set great than 130%" >&2
        exit 1
    }

    printf '%s\n' "{ \"command\": [\"set_property\", \"volume\", $volume ] }" | \
        $SOCKETCOMMAND > /dev/null
}

setSpeedRelative() {
    validateBC
    speed=$(getSpeed)

    fltCheck "$1" || exit 1
    speed=$(printf '%s\n' "$speed+$1" | bc)

    printf '%s\n' "{ \"command\": [\"set_property_string\", \"speed\", \
    \"$speed\" ] }" | $SOCKETCOMMAND > /dev/null
}

setSpeedAbsolute() {
    validateBC
    fltCheck "$1" || exit 1
    speed=$1

    printf '%s\n' "{ \"command\": [\"set_property_string\", \"speed\", \
    \"$speed\" ] }" | $SOCKETCOMMAND > /dev/null
}

setTrackRelative() {
    intCheck "$1" || exit 1

    currentTrack=$(getPropertyString playlist-pos)
    desiredTrack=$((currentTrack + $1))
    trackCount=$(getPropertyString playlist-count)

    # if time is greater than 10 seconds, set time to 0
    [  "$desiredTrack" -lt "$currentTrack" ] && {
        seconds=$(getPropertyString playback-time)
        [ "$seconds" -ge 10 ] && {
            setTimeAbsolute 0
            return
        }
    }

    [ "$desiredTrack" -ge "$trackCount" ] && {
        repeat=$(getLoopStatus loop-playlist)
        [ "$repeat" = "yes" ] && {
            desiredTrack=0
        }
    }

    [ "$desiredTrack" -lt 0 ] && {
        repeat=$(getLoopStatus loop-file)
        if [ "$repeat" = "yes" ]; then
            setTrackAbsolute "$trackCount"
            return
        else
            desiredTrack=0
        fi
    }

    printf '%s\n' "{ \"command\": [\"set_property\", \"playlist-pos\", \
    $desiredTrack ] }" | $SOCKETCOMMAND > /dev/null

    # tiny delay so printFinalOutput can catch up
    sleep 0.5
}

setTrackAbsolute() {
    intCheck "$1" || exit 1

    currentTrack=$1
    currentTrack=$((currentTrack - 1))
    trackCount=$(getPropertyString playlist-count)

    [ "$currentTrack" -lt 0 ] || [ "$currentTrack" -ge "$trackCount" ] && {
        printf '%s\n' "Item $currentTrack is out of range of playlist." >&2
        exit 1
    }

    printf '%s\n' "{ \"command\": [\"set_property\", \
    \"playlist-pos\", $currentTrack ] }" | $SOCKETCOMMAND > /dev/null

    # tiny delay so printFinalOutput can catch up
    sleep 0.5
}

moveTrack() {
    intCheck "$1" || exit 1

    if [ -z "$2" ]; then
        trackToMove=$(getPropertyString playlist-pos)
        newTrackPosition=$1
    else
        trackToMove=$1
        trackToMove=$((trackToMove - 1))
        newTrackPosition=$2
        trackCount=$(getPropertyString playlist-count)

        [ "$trackToMove" -lt 0 ] || [ "$trackToMove" -ge "$trackCount" ] && {
            printf '%s\n' "Item $trackToMove is out of range of playlist." >&2
            exit 1
        }
    fi

    [ "$newTrackPosition" -lt 0 ] && {
        printf '%s\n' "Position $newTrackPosition is out of range of playlist." >&2
        exit 1
    }

    [ "$newTrackPosition" -eq 1 ] && newTrackPosition=0

    printf '%s\n' "{ \"command\": [\"playlist-move\", \"$trackToMove\", \
    \"$newTrackPosition\" ] }" | $SOCKETCOMMAND > /dev/null

    [ "$QUIETFLAG" != "true" ] && {
        getPlaylist
        QUIETFLAG="true"
    }
}

removeTrack() {
    trackToRemove=$1

    if [ "$trackToRemove" = "current" ]; then
        printf '%s\n' "{ \"command\": [\"playlist-remove\", \
        \"$trackToRemove\" ] }" | $SOCKETCOMMAND > /dev/null
    else
        intCheck "$1" || exit 1

        trackToRemove=$((trackToRemove - 1))
        trackCount=$(getPropertyString playlist-count)

        [ "$trackToRemove" -lt 0 ] || [ "$trackToRemove" -ge "$trackCount" ] && {
            printf '%s\n' "Item $trackToRemove is out of range of playlist." >&2
            exit 1
        }

        filename="$(getPlaylistFilename $trackToRemove)"

        printf '%s\n' "{ \"command\": [\"playlist-remove\", \
        \"$trackToRemove\" ] }" | $SOCKETCOMMAND > /dev/null
    fi

    [  "$QUIETFLAG" != "true" ] && {
        printf '%s\n' "$filename has been removed from the playlist."
        exit
    }
}

alwaysPlay() {
    currentTrack=$(getPropertyString playlist-pos)
    [ "$currentTrack" = "N/A" ] && {
        setTrackAbsolute 1
        return
    }

    printf '%s\n' "{ \"command\": [\"set_property\", \"pause\", false ] }" | \
        $SOCKETCOMMAND > /dev/null
}

alwaysPause() {
    status="true"
    printf '%s\n' "{ \"command\": [\"set_property\", \"pause\", $status ] }" | \
        $SOCKETCOMMAND > /dev/null
}

togglePause() {
    currentTrack=$(getPropertyString playlist-pos)
    [ "$currentTrack" = "N/A" ] && {
        setTrackAbsolute 1
        return
    }

    status=$(getPauseStatus)
    [  "$status" = "playing" ] && status="true" || status="false"

    printf '%s\n' "{ \"command\": [\"set_property\", \"pause\", $status ] }" | \
        $SOCKETCOMMAND > /dev/null
}

toggleMute() {
    if [  -z "$1" ]; then
        muted=$(getMuteStatus)
        [  "$muted" = "no" ] && muted="true" || muted="false"
    else
        muted=$1
    fi

    printf '%s\n' "{ \"command\": [\"set_property\", \"mute\", $muted ] }" | \
        $SOCKETCOMMAND > /dev/null
}

toggleLoopFile() {
    loopFile=$(getLoopStatus loop-file)
    [ "$loopFile" = "no" ] && loopFile="inf" || loopFile="no"

    printf '%s\n' "{ \"command\": [\"set_property_string\", \"loop-file\", \
    \"$loopFile\" ] }" | $SOCKETCOMMAND > /dev/null
}

toggleLoopPlaylist() {
    loopPlaylist=$(getLoopStatus loop-playlist)
    [ "$loopPlaylist" = "no" ] && loopPlaylist="inf" || loopPlaylist="no"

    printf '%s\n' "{ \"command\": [\"set_property_string\", \"loop-playlist\", \
    \"$loopPlaylist\" ] }" | $SOCKETCOMMAND > /dev/null
}

shufflePlaylist() {
    printf '%s\n' "{ \"command\": [\"playlist-shuffle\" ] }" | \
        $SOCKETCOMMAND > /dev/null

    [  "$QUIETFLAG" != "true" ] && {
        printf '%s\n' "Playlist shuffled."
        QUIETFLAG="true"
    }

    [ "$(getLoopStatus loop-playlist)" != "yes" ] && toggleLoopPlaylist inf
}

cropPlaylist() {
    printf '%s\n' "{ \"command\": [\"playlist-clear\" ] }" | \
        $SOCKETCOMMAND > /dev/null

    [ "$QUIETFLAG" != "true" ] && {
        getPlaylist
        QUIETFLAG="true"
    }
}

clearPlaylist() {
    QUIETFLAG="true"

    # kill any running process of mpvc add
    pgrep -f "mpvc add" > /dev/null 2>&1 && pkill -f "mpvc add"

    cropPlaylist
    removeTrack 1
    printf '%s\n' "Playlist cleared."
}

# quit mpv process on given socket
killSocket() {
    printf '%s\n' "{ \"command\": [\"quit\"] }" | $SOCKETCOMMAND > /dev/null
    exit
}

# kill all instances of mpv running under your user
killAllMpv() {
    pkill "mpv" /dev/null 2>&1
    exit
}

    # Time Functions
###############################################################################

elapsedTime() {
    time=$(getPropertyString playback-time)
    formatTime "$time"
}

preciseElapsedTime() {
    time=$(getPropertyString playback-time 0.0)
    bigTime=${time%%.*}
    tinyTime=${time#*.}
    formatTime "$bigTime" "$tinyTime"
}

trackLength() {
    duration=$(getPropertyString duration)
    formatTime "$duration"
}

playtimeRemaining() {
    playtime=$(getPropertyString playtime-remaining)
    formatTime "$playtime"
}

# format seconds into HH:MM:SS format
formatTime() {
    [  "$1" = "N/A" ] && return 1

    rawSeconds=$1
    seconds=$((rawSeconds % 60))
    minutes=$((rawSeconds / 60))
    hours=$((minutes / 60))

    [ $seconds -lt 10 ] && seconds="0$seconds"
    [ $minutes -ge 60 ] && minutes=$((minutes - hours*60))
    [ $minutes -lt 10 ] && minutes="0$minutes"
    [ $hours -lt 10 ] && hours="0$hours"

    if [ -z "$2" ]; then
        printf '%s\n' "$hours:$minutes:$seconds"
    else
        milleSeconds=$2
        printf '%s\n' "$hours:$minutes:$seconds.$milleSeconds"
    fi
}

    # Formatting and Printing Functions
###############################################################################

# formats and prints according to $FORMATSTRING
formatPrint() {
    # modified format string
    FORMATSTRING=$(printf '%s\n' "$FORMATSTRING" | sed "
    s#%status%#$(getPauseStatus)#g
    s#%year%#$(getMetadata date)#g
    s#%genre%#$(getMetadata genre)#g
    s#%title%#$(getMetadata title)#g
    s#%album%#$(getMetadata album)#g
    s#%artist%#$(getMetadata artist)#g
    s#%comment%#$(getMetadata comment)#g
    s#%albumartist%#$(getMetadata album_artist)#g
    s#%speed%#$(getSpeed)#g
    s#%time%#$(elapsedTime)#g
    s#%precisetime%#$(preciseElapsedTime)#g
    s#%volume%#$(getPropertyString volume)#g
    s#%length%#$(trackLength)#g
    s#%remaining%#$(playtimeRemaining)#g
    s#%muted%#$(getMuteStatus)#g
    s#%percentage%#$(getPropertyString percent-pos)#g
    s#%name%#$(getMediaProperties filename)#g
    s#%path%#$(getMediaProperties path)#g
    s#%dir%#$(getPropertyString working-directory)#g
    s#%repeat%#$(getLoopStatus loop-playlist)#g
    s#%single%#$(getLoopStatus loop-file)#g
    s#%playlistlength%#$(getPropertyString playlist-count)#g
    s#%position%#$(($(getPropertyString playlist-pos) + 1))#g
    s#%frame%#$(getProperty estimated-frame-number)#g
    s#%width%#$(getProperty width)#g
    s#%height%#$(getProperty height)#g
    s#%ab-loop-a%#$(getProperty ab-loop-a)#g
    s#%ab-loop-b%#$(getProperty ab-loop-b)#g
    ")

    printf '%s\n' "${FORMATSTRING}"
    exit
}

# print default status of mpv instance
printDefaultStatus() {
    artist=$(getMetadata artist)

    case "$artist" in
        "N/A")
            FORMATSTRING="\
    %title%
    [%status%] #%position%/%playlistlength% %time%/%length% (%percentage%%)
    speed: %speed%x volume: %volume%% muted: %muted% repeat: %repeat% single: %single%"
            ;;
        *)
            FORMATSTRING="\
    ${artist} - %title%
    [%status%] #%position%/%playlistlength% %time%/%length% (%percentage%%)
    speed: %speed%x volume: %volume%% muted: %muted% repeat: %repeat% single: %single%"
            ;;
    esac

    formatPrint
}

printPrettyOutput() {
    exit 0
}

# catches if mpv is idle or not
printFinalOutput() {
    case "$QUIETFLAG" in
        "true") ;;
        *)
            if [ "$(getPropertyString idle-active)" = "yes" ]; then
                printf '%s\n' "MPV instance on ${SOCKET} is currently idle." >&2
            else
                printDefaultStatus
            fi
    esac
}

    # Misc. Functions
###############################################################################

escapeSedChar() {
    awk -F "$1" '{
        for (x=1; x<NF; x++) printf "%s\\'"$1"'", $x
        printf "%s", $NF
        exit }'
}

intCheck() {
    [ "$1" -ne 0 ] 2> /dev/null
    [ "$?" -ne 2 ] || return 1
}

fltCheck() {
    intCheck "$1" && return 0

    case "$1" in
        *[0-9].[0-9]*)    return 0 ;;
        *.*.*|*[!-.0-9]*) ;;
    esac

    return 1
}

calculateTerminalHeight() {
    rows=$(($(tput lines) - 2))
    halfrows=$((rows / 2))

    [  "$tracks" -gt $rows ] && {
        [ "$currentTrack" -le $halfrows ] && {
            FIRST=1
            LAST=$rows
            return
        }

        [  $((currentTrack + halfrows)) -ge "$tracks" ] && {
            FIRST=$((tracks - rows + 1))
            LAST=$tracks
            return
        }

        [  $((currentTrack + halfrows)) -lt "$tracks" ] && {
            FIRST=$((currentTrack - halfrows + 1))
            LAST=$((currentTrack + halfrows))
            return
        }
    }

    FIRST=1
    LAST=$tracks
}

parseTimeString() {
    printf '%s' "$1" | grep -q -e "^\([0-9.]*:\)\{0,2\}[0-9.]*$" -e "^[0-9]*[sSmMhH]$" || {
        cat >&2 << EOF
Timestamp formats must match either H:M:S with hour and minute fields optional,
or a single integer number with a unit of time appended: h, m, s.
EOF
        exit 1
    }

    lastChar=$(printf '%s\n' "$1" | rev | cut -c 1)

    case "$lastChar" in
        s|S|m|M|h|H)
            timeInt=$(printf '%s' "$1" | rev | cut -c 2- | rev)

            intCheck "$timeInt" || exit 1

            case "$lastChar" in
                h|H) timeInt=$((timeInt * 60 * 60)) ;;
                m|M) timeInt=$((timeInt * 60))      ;;
            esac

            ;;
        *)
            timeInt=$(printf '%s' "$1" | awk -F ':' '{
                time=0
                for (x=1; x<=NF; x++) time=time*60+$x
                    printf "%d\n", time
                    exit
            }')

            ;;
    esac

    printf "%d" "$timeInt"
}

validateDeps() {
    type mpv > /dev/null 2>&1 || {
        printf '%s\n' "Cannot find mpv on your \$PATH." >&2
        exit 4
    }

    type nc > /dev/null 2>&1 && SOCKETCOMMAND="nc -U -N $SOCKET"
    type socat > /dev/null 2>&1 && SOCKETCOMMAND="socat - $SOCKET"

    [ "$SOCKETCOMMAND" ] || {
        printf '%s\n' "Cannot find socat or nc on your \$PATH." >&2
        exit 4
    }
}

validateBC() {
    type bc > /dev/null 2>&1 || {
        printf '%s\n' "Cannot find bc on your \$PATH."
        printf '%s\n' "Please install for speed control."
        exit 4
    }
}

validateSocket() {
    [ "$PLAYFLAG" != "true" ] && {
        # test if socket exists
        [ -S "$SOCKET" ] || {
            printf '%s\n' "$SOCKET does not exist. Use mpv --input-ipc-server to start one." >&2
            exit 2
        }

        # test if socket is open
        [ "$(getPauseStatus)" = "N/A" ] && {
            printf '%s\n' "No files added to $SOCKET."
            exit 3
        }
    }
}

getVersion() {
    mpv --version

    printf '%s\n' "MPVC Release 1.3 (c) Laurence Willetts MIT"
    exit
}
