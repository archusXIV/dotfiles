#!/bin/bash

# Author: Barret E <archus@protonmail.com>
# Youtube channel: <https://www.youtube.com/@linuxinfrench9388>
# Idea inspired by Yannick Vollenberg <https://nordri.vollenberg.ca>
# As the script name says, this will install an Achlinux desktop
# following the arch way to Keep It Simple Stupid, meaning no customization.
# Use it at your own risks....lol
# Download the script when logged in the arch live iso:
# curl -sL "https://raw.githubusercontent.com/archusXIV/dotfiles/main/scripts/install_arch/install_desktop" -O
# chmod +x install_desktop && ./install_desktop

# Colors
nc=$'\e[0;m';
g=$'\e[1;32m';
r=$'\e[0;31m';
y=$'\e[93m';

_CreateUser() {
    
    clear
    printf '%s\n'
    read -r -p "${g}"' First pick a new user name: '"${nc}" usrname
    read -r -p "${g}"' What shell '$usrname' should use? [B]ash, [Z]sh : '"${nc}" whatshell
    
    case "$whatshell" in
        b|B) shell="/bin/bash" ;;
        z|Z) shell="/bin/zsh"  ;;
        *)   shell="/bin/bash" ;;
    esac
    
    useradd -m -G audio,video,input,wheel,sys,log,rfkill,lp,adm -s "$shell" ${usrname}
    printf '%s\n' " ${g}Please set a password for $usrname.${nc}"
    sleep 1s
    passwd ${usrname}
    printf '%s\n' " ${g}Enable $usrname sudo privileges in sudoers file.${nc}"
    sleep 2s
    EDITOR=vim visudo
    groupadd ${usrname}
    
    _DesktopChoice
    
}

_systemd() {
    
    if [[ -n $(command -v bspwm) ]] \
        || [[ -n $(command -v i3) ]]; then
    
        if [[ $(dmidecode -s system-product-name) = VirtualBox ]]; then
            clear
            printf '%s\n' " ${y}Installing virtualbox-guest-utils.${nc}"
            sleep 1s
            pacman -S --needed --noconfirm virtualbox-guest-utils
            systemctl enable vboxservice.service
            printf '%s\n' " ${y}Rebooting your machine is required...${nc}"
            sleep 1s
        fi
        
    else
        clear
        printf '%s\n' " ${y}Installing LIGHTDM.${nc}"
        sleep 1s
        pacman -S --needed --noconfirm lightdm lightdm-gtk-greeter
        
        if [[ $(dmidecode -s system-product-name) = VirtualBox ]]; then
            pacman -S --needed --noconfirm virtualbox-guest-utils
            systemctl enable {lightdm,vboxservice}.service
            printf '%s\n' " ${y}Rebooting your machine is required...${nc}"
            sleep 1s
        else
            systemctl enable lightdm.service
            printf '%s\n' " ${y}Rebooting your machine is required...${nc}"
            sleep 1s
        fi
    fi
    
}

_audio() {
    
    clear
    printf '%s\n' " ${y}Installing AUDIO UTILITIES${nc}"
    sleep 1s
    pacman -S --needed --noconfirm alsa-utils alsa-firmware \
    cmus gst-libav gst-plugins-{bad,base,good,ugly} \
    mediainfo mpc mpd ncmpcpp pavucontrol pulseaudio \
    pulseaudio-alsa pulsemixer x264 x265 wavpack

}

_fonts() {
    
    clear
    printf '%s\n' " ${y}Installing FONTS${nc}"
    sleep 1s
    pacman -S --needed --noconfirm noto-fonts \
    ttf-{font-awesome,bitstream-vera,dejavu,fira-code,hack,ibm-plex,jetbrains-mono,liberation}
    
}

_xorg() {
    
    clear
    printf '%s\n' " ${y}Installing XORG${nc}"
    sleep 1s
    pacman -Sy --needed --noconfirm \
    wmctrl xcb-proto xcb-util xcb-util-{cursor,keysyms,wm} xdg-user-dirs xorg \
    xorg-{apps,server,xfontsel,xinit,xinput,xkill,xlsfonts,xrandr,xwininfo} \
    xterm  
    
}

_DownloadCloneWm() {
    
    curl -sL \
    "https://raw.githubusercontent.com/archusXIV/dotfiles/main/scripts/install_arch/install_wm" -O \
    && curl -sL "https://raw.githubusercontent.com/archusXIV/wm_config/main/README.md" -O \
    && chown ${usrname}:${usrname} clone_wm README.md \
    && mv {clone_wm,README.md} /home/${usrname} && chmod +x /home/${usrname}/clone_wm
    
}

_i3wm() {
    
    _xorg \
    && clear && printf '%s\n' " ${y}Installing I3WM.${nc}"
    sleep 1s
    pacman -S --needed --noconfirm \
    alacritty bash-preexec conky dmenu dunst feh ffmpegthumbnailer fzf geany \
    geany-plugins gnome-keyring gvfs gvfs-{afc,goa,google,gphoto2,mtp,nfs,smb} \
    htop i3{-wm,blocks,lock,status} lxappearance network-manager-applet \
    numlockx polkit-gnome powerline powerline-{common,fonts,vim} polybar \
    python-powerline ranger rofi rxvt-unicode scrot sxhkd vim-plugins w3m \
    xdg-utils xdo zathura zathura-pdf-poppler \
    zsh zsh-{autosuggestions,completions,syntax-highlighting} \
    && _fonts && _audio && _systemd && _DownloadCloneWm
    
}

_bspwm() {
    
    _xorg \
    && clear && printf '%s\n' " ${y}Installing BSPWM.${nc}"
    sleep 1s
    pacman -S --needed --noconfirm \
    alacritty bash-preexec bspwm conky dmenu dunst feh ffmpegthumbnailer fzf geany \
    geany-plugins gnome-keyring gvfs gvfs-{afc,goa,google,gphoto2,mtp,nfs,smb} \
    htop i3lock lxappearance network-manager-applet numlockx polkit-gnome powerline \
    powerline-{common,fonts,vim} polybar python-powerline ranger rofi \
    rxvt-unicode scrot sxhkd vim-plugins w3m xdg-utils xdo zathura zathura-pdf-poppler \
    zsh zsh-{autosuggestions,completions,syntax-highlighting} \
    && _fonts && _audio && _systemd && _DownloadCloneWm
    
}

_firefox() {
    if [[ $(sed -n '1p' /etc/locale.conf) = LANG="fr_FR.UTF-8" ]]; then
        pacman -S --needed --noconfirm firefox firefox-i18n-fr
    else
        pacman -S --needed --noconfirm firefox
    fi
}

_cinnamon() {
    
    _xorg \
    && clear && printf '%s\n' " ${y}Installing CINNAMON desktop.${nc}"
    sleep 1s
    pacman -S --needed --noconfirm cinnamon cinnamon-{desktop,translations} \
    gnome-{terminal,shell} gvfs gvfs-{afc,goa,google,gphoto2,mtp,nfs,smb} \
    htop metacity nemo nemo-{fileroller,image-converter,preview,terminal} \
    network-manager-applet xed xreader \
    && _firefox && _fonts && _audio && _systemd
    
}

_kde() {
    
    _xorg \
    && clear && printf '%s\n' " ${y}Installing KDE PLASMA desktop.${nc}"
    sleep 1s
    pacman -S --needed --noconfirm ark dolphin filelight flakon \
    ffmpegthumbs gvfs gvfs-{afc,goa,google,gphoto2,mtp,nfs,smb} \
    gwenview htop icoutils kate kcalc kcron kdeconnect \
    kdegraphics-thumbnailers kdenetwork-filesharing kdialog \
    kdf kimageformats konsole libappimage okular packagekit-{qt5,qt6} \
    plasma-meta print-manager svgpart sshfs \
    && _fonts && _audio && _systemd
    
}

_mate() {
    
    _xorg \
    && clear && printf '%s\n' " ${y}Installing MATE desktop.${nc}"
    sleep 1s
    pacman -S --needed --noconfirm htop mate mate-extra \
    network-manager-applet gvfs gvfs-{afc,goa,google,gphoto2,mtp,nfs,smb} \
    && _firefox && _fonts && _audio && _systemd
    
}

_xfce() {
    
    _xorg \
    && clear && printf '%s\n' " ${y}Installing XFCE4 desktop.${nc}"
    sleep 1s
    pacman -S --needed --noconfirm xfce4 xfce4-goodies \
    network-manager-applet htop gvfs gvfs-{afc,goa,google,gphoto2,mtp,nfs,smb} \
    && _firefox && _fonts && _audio && _systemd
    
}

_DesktopChoice() {
    
    clear
    printf '%s\n'
    printf '%s\n' " ${g}Desktop choice, eg: x for Xfce...${nc}"
    read -r -p "${g}"' [I]3-wm, [B]spwm, [C]innamon, [K]de Plasma, [M]ate, [X]fce: '"${nc}" choice
    case ${choice} in
        i|I) _i3wm     ;;
        b|B) _bspwm    ;;
        c|C) _cinnamon ;;
        k|K) _kde      ;;
        m|M) _mate     ;;
        x|X) _xfce     ;;
    esac
    
    exit
    
}

_Description() {
    
    clear
    setfont sun12x22
    cat << EOF
    
    █████╗ ██████╗  ██████╗██╗  ██╗██╗     ██╗███╗   ██╗██╗   ██╗██╗  ██╗
    ██╔══██╗██╔══██╗██╔════╝██║  ██║██║     ██║████╗  ██║██║   ██║╚██╗██╔╝
    ███████║██████╔╝██║     ███████║██║     ██║██╔██╗ ██║██║   ██║ ╚███╔╝ 
    ██╔══██║██╔══██╗██║     ██╔══██║██║     ██║██║╚██╗██║██║   ██║ ██╔██╗ 
    ██║  ██║██║  ██║╚██████╗██║  ██║███████╗██║██║ ╚████║╚██████╔╝██╔╝ ██╗
    ╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚═╝  ╚═╝
    
                Desktop installation for lazy dudes made easy!
    
    # French (ne jamais lancer un script sans le lire auparavant)
    ${g}Ce script va installer le bureau de votre choix parmi la liste suivante:${nc}
    
    Preconfigurés: ${y}i3wm, Bspwm${nc} (lancement de session avec startx)
    ${g}i3wm et Bspwm sont lancés avec la commande 'startx' et non lightdm.
    Pour le premier lancement, entrez vos identifiants, puis lancez le script install_wm:
    ./install_wm, au redémarrage lancez startx et veuillez lire le fichier README.md ouvert dans geany.${nc}
    
    Brut de chez brut: ${y}Cinnamon, KDE Plasma, Mate & Xfce${nc}
    
    # English (never run a script without reading it first)
    ${g}This script will install the desktop of your choice among the following list:${nc}
    
    Preconfigured: ${y}i3wm, Bspwm${nc} (startx launch the session)
    ${g}i3wm and Bspwm are launched with the 'startx' command and not lightdm. For the first launch,
    enter your credentials, then run the install_wm script: ./install_wm, on restart run startx
    and please read the README.md file opened in geany.${nc}
    
    Bareboned: ${y}Cinnamon, KDE Plasma, Mate & Xfce${nc}
    
EOF
    printf '%s\n'
    read -r -p "${g}"'    Press enter to launch desktop installation, ^C to quit: '"${nc}" inst
    case "$inst" in *) _CreateUser ;; esac
    
}

_Description "${@}"
