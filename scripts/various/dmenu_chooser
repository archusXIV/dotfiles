#!/bin/bash

rc="$HOME/.config/dmenu/dmenurc"
WM_NAME=$(wmctrl -m | awk '/Name/{print $2}')

[[ -f $rc ]] && source "$rc"

choice=$(printf "apps\\narchwiki\\nautoscript\\nconfig\\nfind\\nkeys\\npower\\nscrot\\nthemes" \
        | dmenu -f -i -b $DMENU_OPTIONS -p 'Select a script:')

[[ -z $choice ]] && exit

case "$choice" in
    apps)       dmenu_run -b $DMENU_OPTIONS
    ;;
    archwiki)   browser=${BROWSER:-firefox}
                pgrep -x dmenu && exit
                
                choice=$(echo "" | dmenu -b -i $DMENU_OPTIONS -p "Search ArchWiki:") || exit 1
                
                if [ "$choice" = ""  ]; then
                    $browser "https://wiki.archlinux.org/"
                else
                    # Detect if url
                    if [[ "$choice" =~ ^(http:\/\/|https:\/\/)?[a-zA-Z0-9]+\.[a-zA-Z]+(/)?.*$ ]]; then
                        $browser "$choice"
                    else
                        $browser "https://wiki.archlinux.org/index.php?search=$choice"
                    fi
                fi
    ;;
    autoscript) [[ -z ${SCRIPTDIR+x} ]] && exit 1

                _autoscript() {

                    local script_file

                    script_file="$SCRIPTDIR/$1"

                    if [[ -f $script_file ]]; then
                        $EDITOR "$script_file" &
                    else
                        echo "#!/bin/bash" > "$script_file"
                        chmod +x "$script_file"
                        $EDITOR "$script_file" &
                    fi
                }

                selected=$(ls "$SCRIPTDIR" | dmenu -b -i -l 20 $DMENU_OPTIONS -p "edit/create a script ")
                [[ -z $selected ]] && exit

                _autoscript "$selected"
    ;;
    config  )   confDir="$HOME/.config/"
                
                dirOptions=$(cd ${confDir} && ls -d */ | cut -d " " -f 1)
                dirChoice=$(echo "${dirOptions[@]}" | dmenu -b -i $DMENU_OPTIONS -p 'Config directories: ')
                fileOptions=$(cd ${confDir}${dirChoice} && ls -Ap | cut -d " " -f 1 | grep -v / )
                fileChoice=$(echo "${fileOptions[@]}" | dmenu -b -i -l 20 $DMENU_OPTIONS -p 'Edit this file: ')
                    
                if [ -z "$dirChoice" ]; then
                    exit 0
                else
                    [ -z "$fileChoice" ] && exit 0 \
                    || exec geany ${confDir}${dirChoice}${fileChoice}
                fi
    ;;
    find    )   find ~ | sed 's/ /\\ /g' | sort -f \
                | dmenu -b -i -l 20 $DMENU_OPTIONS -p 'finder: '| xargs xdg-open
    ;;
    keys    )   WM=$(wmctrl -m | awk '/Name/{print $2}')

                awk '/^[a-zA-Z]/ \
                && last {print $0,"\t",last} \
                {last=""} /^#/{last=$0}' \
                ~/.config/sxhkd/"$WM"_sxhkdrc_memo \
                | column -t -s $'\t' \
                | dmenu -b -i -l 20 $DMENU_OPTIONS -p "$WM keybindings memo: "
                exit 0
    ;;
    power   )   _main() {
                    # Possible actions
                    actions=('Lockscreen ' 'WM restart ' 'Exit ' 'Reboot ' 'Power off ')

                    choice="$(_list_actions)"

                    # Run the selected command.
                    case "$choice" in
                        E*) Xexit            ;;
                        L*) i3lock -c 1e1f29 ;;
                        P*) _poweroff        ;;
                        R*) _reboot          ;;
                        W*) restart_wm       ;;
                    esac
                }

                _check_systemd() {
                    [[ -d /run/systemd/system ]] \
                        && systemctl "$1" \
                        || sudo "$1"
                }

                _reboot() { _check_systemd 'reboot'; }

                _poweroff() { _check_systemd 'poweroff'; }

                _dynamic_menu() {
                    [[ -n $(command -v dmenu) ]] \
                        && dmenu -b -i $DMENU_OPTIONS -p 'Power options' \
                        || echo "dmenu command not found." && return 1
                }

                # List actions to choose from.  Output array items on a new line.
                _list_actions() {
                    printf '%s\n' "${actions[@]}" | _dynamic_menu
                }

                _main "${@}"
    ;;
    scrot   )   scrot_path="$HOME/Documents/"
                viewer="feh" # Can edit images too.

                choice=$(printf "quick_fullscreen\\ndelayed_fullscreen\\nselection\\nfocused_window" \
                    | dmenu -b -i $DMENU_OPTIONS -p "Select a capture type:")

                cd "$scrot_path" || exit 1

                case "$choice" in
                    quick_fullscreen)   scrot '%d-%m-%Y-@%H-%M-%S-full.png' \
                                        -e "$viewer \$f" && notify-send 'Fullscreen taken and saved'
                    ;;
                    delayed_fullscreen) scrot -d 15 '%d-%m-%Y-@%H-%M-%S-full.png' \
                                        -e "$viewer \$f" && notify-send 'Fullscreen taken and saved'
                    ;;
                    selection)          scrot -s '%d-%m-%Y-@%H-%M-%S-selection.png' \
                                        -e "$viewer \$f" && notify-send 'Scrot selection saved'
                    ;;
                    focused_window)     scrot -u -b '%d-%m-%Y-@%H-%M-%S-focused.png' \
                                        -e "$viewer \$f" && notify-send 'Focused window captured'
                    ;;
                    *)                  notify-send 'No screenshot taken!'
                    ;;
                esac
    ;;	
    themes)     xres_file="$RESOURCES_FILE"

                [[ ! -f "$xres_file" ]] && echo "$xres_file: no such file or directory" && exit 1

                selected="$(ls "$HOME"/.config/xfiles/themes \
                | dmenu -b -i -l 20 $DMENU_OPTIONS \
                -p "The actual theme is $(grep themes "$xres_file" | sed 's,.*/,,;s/"//')")"

                [[ ! -f "$HOME"/.config/xfiles/themes/$selected ]] && exit 1

                sed -i --follow-symlinks \
                "/\#include \"\.config\/xfiles\/themes\//c\\#include \"\.config\/xfiles\/themes\/$selected\"" "$xres_file"

                sleep 1s

                # Function below calls other scripts.
                _reload() {
                 xrdb -load "$xres_file" \
                && Terminal_theme_changer \
                && restart_wm \
                && notify-send 'theme changed'
                }

                if [[ -n $(pidof bspwm) ]] \
	                || [[ -n $(pidof i3) ]]; then
                        _reload
                else
                        exit 1
                fi
    ;;
esac
