#!/usr/bin/env bash

# Author: Barret E 2025 <archus@protonmail.com>
# Script name: ssr_hidden v1.0.1
# License: GPLv2
#
# simple script to run simplescreenrecorder in hidden mode
# for the entered time & @screen. (see _usage function)
# input-profiles directory contains {all,center,left,right}.conf files.

_Has() { command -v "$1" >/dev/null; }

for dep in pulseaudio simplescreenrecorder; do
    _Has "${dep}" || {
        printf '%s\n' " $dep isn't installed, exiting."
        exit 127
    }
done

ssr_fifo="$XDG_RUNTIME_DIR/ssr.fifo"
configs_path="$XDG_CONFIG_HOME/simplescreenrecorder/input-profiles"

_Usage() {
    printf '%s\n' \
    " Usage:   ${0##*/} -v <volume> -d <duration> -p <profile>" \
    " -v Set the microphone volume (default:80)" \
    " -d Set the video duration" \
    " -p Set the SimpleScreenRecorder profile to use (omit .conf)" \
    "                   duration = hh:mm:ss" \
    " Example: ${0##*/} -v 80 -d 00:15:30 -p profile_name" \
    " or:         ${0##*/} -v 80 -d 15:30 -p profile_name"
    printf '\n%s\n' " Profile(s) should be in $configs_path"
    [[ -p "$ssr_fifo" ]] && rm "$ssr_fifo"
    exit 1
}

# getting user input according to _Usage function.
while getopts "d:p:v:" opt; do
    case "${opt}" in
        d) duration="${OPTARG}" ;;
        p)
            profile="${OPTARG}.conf"
            if [[ -z $(find "$configs_path" -name "$profile") ]]; then
                printf '\n%s\n' " profile $profile does not exist!"
                _Usage
            fi
        ;;
        v) volume="${OPTARG}%" ;;
        *) _Usage ;;
    esac
done

[[ -z $duration && -z $profile ]] && {
    printf '\n%s\n' " Missing arguments..."
    _Usage
}

volume=${volume:-80}

_BarActions() {
    case "$1" in
        on)
            polybar-msg action "#mic-ipc.hook.1"
            polybar-msg action "#volume-ipc.hook.0"
        ;;
        off)
            polybar-msg action "#mic-ipc.hook.0"
            polybar-msg action "#volume-ipc.hook.1"
        ;;
    esac

} >/dev/null 2>&1

_GetInputMute() { pactl get-source-mute @DEFAULT_SOURCE@; }
_SetInputMute() { pactl set-source-mute @DEFAULT_SOURCE@ "$1"; }
_SetOutputMute() { pactl set-sink-mute @DEFAULT_SINK@ "$1"; }
_SetInputVolume() { pactl set-source-volume @DEFAULT_SOURCE@ "$1"; }
_SetOutputVolume() { pactl set-sink-volume @DEFAULT_SINK@ "$1"; }
# Getting the current volume level so we can restore it when stopping the recording
read -r currentvolume < <(
        pactl get-sink-volume @DEFAULT_SINK@ \
        | awk '{if(NR!=2) {print $5}}'
    )

_SetVolume() {
    case "$1" in
        on)
            _GetInputMute | grep -q 'yes' && _SetInputMute false
            _SetInputVolume "$volume"
            _SetOutputVolume 0%
            _SetOutputMute true
            gsettings set org.gnome.desktop.sound event-sounds false
            _Has polybar && _BarActions on
        ;;
        off)
            _SetInputVolume 0%
            _SetInputMute true
            _SetOutputMute false
            _SetOutputVolume "${currentvolume}"
            _Has polybar && _BarActions off
            gsettings set org.gnome.desktop.sound event-sounds true
        ;;
    esac
}

_Close() {
    unset IFS
    rm "$ssr_fifo"
    _SetVolume off
    reset
} >/dev/null 2>&1

trap _Close SIGINT SIGTERM

_TimeConversion() {
    IFS=":";
    if [[ $1  =~ ^[0-9]{2}:[0-9]{2}$ ]]; then
        read -r minutes seconds <<< "$1"
        totalSeconds=$((minutes * 60 + seconds))
    elif [[ $1  =~ ^[0-9]{2}:[0-9]{2}:[0-9]{2}$ ]]; then
        read -r hours minutes seconds <<< "$1"
        totalSeconds=$(((hours * 3600) + (minutes * 60 + seconds)))
    else
        printf '\n%s\n' " Wrong duration syntax..."
        _Close; _Usage
    fi
    unset IFS
}

_TimeConversion "$duration"

if [[ -p "$ssr_fifo" ]]; then
    rm "$ssr_fifo" || exit 1
    mkfifo "$ssr_fifo"
else
    mkfifo "$ssr_fifo"
fi

[[ -n $volume ]] && _SetVolume on
# ssr commands
simplescreenrecorder \
    --start-hidden \
    --settingsfile="$configs_path/$profile" < "$ssr_fifo" &

exec 4> "$ssr_fifo"; sleep 0.5
echo "record-start" >&4; sleep "$totalSeconds"
echo "record-save" >&4; sleep 1
echo "quit" >&4; exec 4>&-

_Close; exit 0