#!/bin/bash

##    Author: Barret E (2020-23) <archus@protonmail.com>
##    https://github.com/archusXIV/dotfiles
##    Dependencies: ffmpeg, jq, mpv, youtube-dl, yt-dlp.
##    Optionals: ueberzug, ranger, vim (editor), w3m, wmctrl
##
##    Youtube-dl is for now kind of unmaintained so install and make a symlink with
##    https://github.com/yt-dlp/yt-dlp/releases
##    sudo pacman -S yt-dlp youtube-dl
##    ln -s /usr/bin/yt-dlp ~/.local/bin/youtube-dl (if ~/.local/bin is in your $PATH)
##
##    This script rips video urls from Youtube and so on.
##    In our case we use ".m3u" files to store urls in and then be able
##    to watch from the site itself or download videos or just the audio.
##    We can save, remove or edit playlists, mpmrc
##    It is recommanded to disable mpv cache for better results on direct streaming,
##    or find a better cache parameter.

# shellcheck disable=SC1091,SC2013,SC2015,SC2030,SC2031,SC2034,SC2044,SC2076
# shellcheck disable=SC2086,SC2119,SC2120,SC2143,SC2153,SC2154,SC2164,SC2184,SC2207

VERSION="v.1.2-8"

[[ ! -f ~/.config/mpm/mpmrc ]] && {
    mkdir -p ~/.config/mpm
    cp /usr/local/share/doc/mpm/mpmrc ~/.config/mpm/mpmrc
}

# shellcheck source=/dev/null
## summon our personal settings
source ~/.config/mpm/mpmrc

trap "_CleanTmpDir; exit" SIGTERM EXIT

## prompts blinking
b=$'\e[5m';     # blinking
nb=$'\e[25m';   # stop blinking

supportedsites="https://github.com/ytdl-org/youtube-dl/blob/master/docs/supportedsites.md"
QUEUE="$playlists_dir/default.m3u"

# !!!!!!!!!!!!!!!! creates a blank line !!!!!!!!!!!!!!!!!!!
# so do not delete these characters "__" in the code below.
__() { printf '\n'; }

## This function is called multiple times across this program,
## but let's ensure temporary files are removed before we exit out.
_CheckDependencies() {
    ## Checking dependencies: softwares, directories and files.
    declare -a deps=( "ffmpeg" "jq" "mpv" "vim" "youtube-dl" "yt-dlp" \
                    "ueberzug" "wmctrl" "w3m" )

    for dep in "${deps[@]:0:6}"; do
        [[ -z $(command -v "$dep") ]] && {
            printf '%s\n' " ${critical}$dep isn 't installed, bye..."
            exit 127
        }
    done

    for optional in "${deps[@]:6:9}"; do
        [[ -z $(command -v "$optional") ]] && {
            printf '%s\n' " ${info}For better experience consider installing $optional.${nc}"
            sleep 2s
        }
    done

    [[ -z $MPMEDITOR ]] && {
        printf '%s\n' " ${critical}The config EDITOR is not set...exiting!${nc}"
        notify-send -t 0 -u critical "The config EDITOR is not set...exiting!"
        exit 1
    }

    [[ -z $(command -v "$FILEMANAGER") ]] && {
        printf '%s\n' " ${critical}Consider installing a terminal file manager.${nc}"
        sleep 3s
    }

    if [[ ! -d $main_dir ]]; then
        mkdir --parents \
        {"$audios_dir","$playlists_dir","$titles_dir","$tmp_dir","$videos_dir"}
    else
        [[ ! -d $audios_dir ]] && mkdir -p "$audios_dir"
        [[ ! -d $playlists_dir ]] && mkdir -p "$playlists_dir"
        [[ ! -d $titles_dir ]] && mkdir -p "$titles_dir"
        [[ ! -d $tmp_dir ]] && mkdir -p "$tmp_dir"
        [[ ! -d $videos_dir ]] && mkdir -p "$videos_dir"
    fi

    [[ ! -f $QUEUE ]] && echo "#EXTM3U" > "$QUEUE"

    (($(_GetLinesList -q) >= 1)) && touch "$tmp_dir"/1

    _Menu

}

_ListsCount() {
    local UPD
    UPD=$(curl -sL "https://raw.githubusercontent.com/archusXIV/mpv-playlists-manager/main/version")
    __
    if [[ $UPD != $VERSION ]]; then
        printf '%s\n' " ${critical}${b}New version available${nb}${nc}"
        __
    fi

    echo " ${info}Collection:"  \
    "  $(find "$playlists_dir" -not -name "default.m3u" \
    -iname "*.m3u" -printf '.' | wc -c) playist(s)${nc}"

    if [[ -f $tmp_dir/1 ]]; then
        __
        echo " ${info}Default list: ${b}$(_GetLinesList -q)${nb} url(s)${nc}"
    elif (($(_GetLinesList -q) > 0)); then
        __
        echo " ${info}Default list: $(_GetLinesList -q) url(s)${nc}"
    fi

    [[ -f $AUDIO_INFO ]] && (($(_GetLinesList -a) > 0)) && \
        echo " ${info}Audio list:   $(_GetLinesList -a) url(s)${nc}"
    [[ -f $VIDEO_INFO ]] && (($(_GetLinesList -v) > 0)) && \
        echo -e " ${info}Video list:   $(_GetLinesList -v) url(s)${nc}\n"

}

_ResizeWindow() { wmctrl -r :ACTIVE: -e 5,-1,-1,1210,735; }

_Menu() {
    # First copy url then select option 1 or 2,
    # the link will be saved in an m3u file.
    while [[ -e $QUEUE ]]; do
        _ResizeWindow
        clear
        _ListsCount
        __
        echo -e "                                         ${mtitle}::MPV-PLAYLISTS-MANAGER OPTIONS::"
        echo -e "                                           $VERSION ${info}For usage: mpm --help${nc}"
        echo -e "                             ${critical}For a better display consider a terminal size of 1210x735${nc}"
        echo -e "                ┌──────────────────────────────────────────────────────────────────────────────────────┐"
        echo -e "                │   1) Create/Add video playlist   6) View default playlist   │  ${info}Tasks for option 4):${nc}  │"
        [[ $direct_download = yes ]] && echo -e "                │   2) Create/Add audio playlist   7) Clear all tmp lists     │  direct download: $direct_download  │"
        [[ $direct_download = no ]] && echo -e "                │   2) Create/Add audio playlist   7) Clear all tmp lists     │  direct download:  $direct_download  │"
        [[ $automatic_audio_conversion = yes ]] && echo -e "                │   3) Save tmp/Del collection     8) Edit a playlist         │  conversion auto: $automatic_audio_conversion  │"
        [[ $automatic_audio_conversion = no ]] && echo -e "                │   3) Save tmp/Del collection     8) Edit a playlist         │  conversion auto:  $automatic_audio_conversion  │"
        if [[ -z $default_conversion_format ]]; then echo -e "                │   ${info}4)${nc} Play/Download a playlist    9) Edit mpm config (mpmrc) │  audio format:  unset  │"; \
        elif [[ $default_conversion_format != flac ]]; then echo -e "                │   ${info}4)${nc} Play/Download a playlist    9) Edit mpm config (mpmrc) │  audio format:    $default_conversion_format  │"; \
        elif [[ $default_conversion_format = flac ]]; then echo -e "                │   ${info}4)${nc} Play/Download a playlist    9) Edit mpm config (mpmrc) │  audio format:   $default_conversion_format  │"; fi
        [[ $quit_after_task = yes ]] && echo -e "                │   5) Load local dir/files        X) Exit                    │  quit after task: $quit_after_task  │"
        [[ $quit_after_task = no ]] && echo -e "                │   5) Load local dir/files        X) Exit                    │  quit after task:  $quit_after_task  │"
        echo -e "                └──────────────────────────────────────────────────────────────────────────────────────┘"
        [[ -f $tmp_dir/1 ]] \
            && echo -e "                                                   ${info}Select an item${nc}" \
            || echo -e "                                                   ${info}${b}Select an item${nc}${nb}"
        __
        read -rsn 1 action
        case "$action" in
            1)  _CopyVideo
                __ ;;
            2)  _CopyAudio
                __ ;;
            3)  _SaveRemove
                __ ;;
            4)  _LoadPlaylist
                __ ;;
            5)  _LoadLocal
                __ ;;
            6)  _ViewUrlInfo -q
                __ ;;
            7)  _DeleteUrl
                __ ;;
            8)  _EditPlaylist
                __ ;;
            9)  _EditMpmConf
                __ ;;
            x|X)  exit  ;;
        esac
    done

}

YTOP="$tmp_dir/youtube-dl_output"
AUDIO_INFO="$tmp_dir/AudioUrls.m3u"
AUDIO_TITLE="$tmp_dir/AudioTitles"
VIDEO_INFO="$tmp_dir/VideoUrls.m3u"
VIDEO_TITLE="$tmp_dir/VideoTitles"

_GetAudio() {

    local counter M3UFILE TITLES

    case "$1" in
        -a)
            [[ $(_GetLinesList -a) -eq 0 ]] && {
                echo " ${critical}No links in the list${nc}"
                sleep 2
                _CopyAudio
            }
            cd "$audios_dir" || exit 1
            M3UFILE="$AUDIO_INFO"
            TITLES="$AUDIO_TITLE"
            cp -f "$AUDIO_INFO" "$AUDIO_INFO"_origin 2>/dev/null
            cp -f "$AUDIO_TITLE" "$AUDIO_TITLE"_origin 2>/dev/null
        ;;
        -l)
            cd "$playlists_dir" || exit 1
            M3UFILE="$playlists_dir"/"$list"
            TITLES="$titles_dir"/"$list".titles
            cp -f "$list" "$list"_origin 2>/dev/null
            mkdir -p "$audios_dir"/"${list%.*}"
        ;;
        -q)
            if [[ ! -f "$tmp_dir"/DefaultTitles ]]; then
                echo " ${info}Getting titles...${nc}"
                _GetMediaTitle -q > "$tmp_dir"/DefaultTitles
                clear
            fi
            cd "$audios_dir" || exit 1
            M3UFILE="$QUEUE"
            TITLES="$tmp_dir"/DefaultTitles
            cp -f "$QUEUE" "$QUEUE"_origin 2>/dev/null
            cp -f "$tmp_dir"/DefaultTitles "$tmp_dir"/DefaultTitles_origin
        ;;
    esac

    clear
    counter=$(grep -c '^https' "$M3UFILE")

    __DownloadMessages() (
        [[ $M3UFILE = "$AUDIO_INFO" ]] && {
            printf '%s\n' " ${info}$counter audio file(s) left to download." \
            " Please be patient while downloading:  $(_GetLinkTitle -a).webm${nc}"
        }
        [[ $M3UFILE = "$playlists_dir"/"$list" ]] && {
            printf '%s\n' " ${info}$counter audio file(s) left to download." \
            " Please be patient while downloading:  $(_GetLinkTitle -l).webm${nc}"
        }
        [[ $M3UFILE = "$QUEUE" ]] && {
            printf '%s\n' " ${info}$counter audio file(s) left to download." \
            " Please be patient while downloading:  $(_GetLinkTitle -q).webm${nc}"
        }
    )

    if [[ -d "$audios_dir"/"${list%.*}" ]]; then
        cd "$audios_dir"/"${list%.*}"
    else
        cd "$audios_dir" || exit 1
    fi

    for audiodownloadurl in $(grep '^https' "$M3UFILE"); do

        if [[ $(youtube-dl -F --no-warnings "$audiodownloadurl" \
            | sed -n '/audio only/p' | grep -w '251') ]]; then
            __
            __DownloadMessages
            youtube-dl \
            -o "$(youtube-dl --skip-download --get-title "$audiodownloadurl")".webm \
            -f 251 --no-warnings --progress "$audiodownloadurl"
        else
            youtube-dl -F --no-warnings "$audiodownloadurl" \
            | sed -n '/audio only/p'
            __
            echo " ${info}Choose a format code: ${nc}"
            read -r code
            clear
            __
            __DownloadMessages
            youtube-dl -f "$code" \
            --no-warnings --progress "$audiodownloadurl"
        fi

        if [[ $M3UFILE = "$AUDIO_INFO" ]]; then
            sed -i '1d' {"$M3UFILE","$TITLES"}
        else
            sed -i '2d' "$M3UFILE"
            sed -i '1d' "$TITLES"
        fi

        ((counter--))
        clear

    done

    echo -e " ${info}Done\n${nc}"

    if [[ -n $(find . -iname "*.webm") ]]; then
        echo " ${critical}ADVISORY: if you choose conversion, all downloaded files (.webm)"
        echo -e " will be converted in the chosen format.${nc}\n"
        find . -iname "*.webm" | sort -d | sed 's,.*/,,'

        if [[ $automatic_audio_conversion = yes ]]; then
            __
            printf '%s\n' " ${task}Automatic audio conversion enabled.${nc}"
            sleep 2
            [[ $M3UFILE = "$AUDIO_INFO" ]] || [[ $M3UFILE = "$QUEUE" ]] \
            && _ConvertAudio && _GetCompleted -a
            [[ $M3UFILE = "$playlists_dir"/"$list" ]] && _ConvertAudio && _DownloadCompleted
        else
            __
            _Prompt " ${info}Do you wish to convert them?: ${nc}" || {
                [[ $M3UFILE = "$AUDIO_INFO" ]] || [[ $M3UFILE = "$QUEUE" ]] \
                && _GetCompleted -a
                [[ $M3UFILE = "$playlists_dir"/"$list" ]] && _DownloadCompleted
            }
            [[ $M3UFILE = "$AUDIO_INFO" ]] || [[ $M3UFILE = "$QUEUE" ]] \
            && _ConvertAudio && _GetCompleted -a
            [[ $M3UFILE = "$playlists_dir"/"$list" ]] && _ConvertAudio && _DownloadCompleted
        fi

    else
        [[ $M3UFILE = "$AUDIO_INFO" ]] || [[ $M3UFILE = "$QUEUE" ]] \
        && _GetCompleted -a
        [[ $M3UFILE = "$playlists_dir"/"$list" ]] && _DownloadCompleted
    fi

}

_ViewUrlInfo() {
    # Normaly in Bash nested functions use parentheses instead of curly braces,
    # but here it won't work because of the case statment right parenthese...
    # They will close the block before it finishes.

    prompt=( "[M]aim menu" "[B]ack to audio options" "[B]ack to video options" \
            "[D]ownload" "[P]lay" "[S]ave as" "[R]emove" "[V]iew title(s):" )

    __audio() {
        if [[ -f $AUDIO_INFO ]]; then
            clear
            __
            cat -n "$AUDIO_INFO"
            __
            cat -n "$AUDIO_TITLE"
            __
            unset {prompt[2],prompt[7]}
            __
            echo "${info}" "${prompt[*]}" "${nc}"
            read -rsn 1 opt
            case "$opt" in
                b|B) __; _CopyAudio ;;
                m|M) _Menu ;;
                d|D) _GetAudio -a ;;
                p|P) _LoadAudio -a ;;
                r|R) _Remove -a ;;
                s|S) _Save -a ;;
            esac
        else
            echo " ${critical}No links in the list${nc}"
            sleep 2 && _CopyAudio
        fi
    }

    __video() {
        if [[ -f $VIDEO_INFO ]]; then
            clear
            __
            cat -n "$VIDEO_INFO"
            __
            cat -n "$VIDEO_TITLE"
            __
            unset {prompt[1],prompt[7]}
            __
            echo "${info}" "${prompt[*]}" "${nc}"
            read -rsn 1 opt
            case "$opt" in
                b|B) __; _CopyVideo ;;
                m|M) _Menu ;;
                d|D) _GetVideo -v ;;
                p|P) _LoadVideo -v ;;
                r|R) _Remove -v ;;
                s|S) _Save -v ;;
            esac
        else
            echo " ${critical}No links in the list${nc}"
            sleep 2 && _CopyVideo
        fi
    }

    __queue() {
        if (($(_GetLinesList -q) > 0)); then
            [[ -f $tmp_dir/1 ]] && rm "$tmp_dir"/1
            clear
            __
            echo " ${info}order |  default playlist link(s)${nc}"
            echo -e " ${info}______________________________________________________${nc}\n"
            sed '1d' "$QUEUE" | cat -n
            __
            while [[ -f $QUEUE ]]; do
                unset {prompt[1],prompt[2]}
                echo "${info}" "${prompt[*]}" "${nc}"
                read -rsn 1 opt
                case "$opt" in
                    m|M)
                        _Menu
                    ;;
                    d|D)
                        __
                        read -rsn 1 -p "${info}"' Download [A]udio, [V]ideo:'"${nc}" get
                        case "$get" in
                            a|A) __; _GetAudio -q ;;
                            v|V) __; _GetVideo -q ;;
                        esac
                    ;;
                    p|P)
                        __
                        read -rsn1 -p "${info}"' Play [A]udio, [V]ideo?: '"${nc}" play
                        case "$play" in
                            a|A) _LoadAudio -q ;;
                            v|V) _LoadVideo -q ;;
                        esac
                    ;;
                    r|R) _Remove -q ;;
                    s|S)
                        if [[ -f "$tmp_dir"/DefaultTitles ]]; then
                            _Save -q
                        else
                            echo " ${task}${b}Updating playlist titles...${nb}${nc}"
                            _GetMediaTitle -q \
                            | tee -a "$tmp_dir"/DefaultTitles \
                            | cat -n >/dev/null 2>&1
                            _Save -q
                        fi
                    ;;
                    v|V)
                        if [[ -f $tmp_dir/DefaultTitles ]]; then
                            clear
                            __
                            cat -n "$tmp_dir"/DefaultTitles
                            __
                        else
                            clear
                            __
                            echo -e " ${task}${b}Getting titles...${nb}${nc}\n"
                            _GetMediaTitle -q > "$tmp_dir"/DefaultTitles
                            clear
                            __
                            cat -n "$tmp_dir"/DefaultTitles
                            __
                        fi
                    ;;
                esac
            done
        else
            echo " ${critical}There is nothing to do, Default playlist is empty...${nc}"
            sleep 3s
        fi
    }

    case "$1" in
        -a) __audio ;;
        -v) __video ;;
        -q) __queue ;;
    esac
}

_RemoveCrap() {
    # After some tests it appears that a single link copied from a youtube playlist
    # causes the download of the entire playlist.
    # So with sed & perl we cleanup the link to get the direct link to the desir video.
    # Note that this behavior does not appear during a simple viewing/listening.

    LISTS=( "$AUDIO_INFO" "$AUDIO_TITLE" \
            "$VIDEO_INFO" "$VIDEO_TITLE" \
            "$QUEUE" "$tmp_dir"/DefaultTitles )

    for file in "${LISTS[@]}"; do
        # removing unwanted parts of links, blank lines & duplicates
        sed -i 's/&list.*//;/^\s*$/d' "$file"
        perl -i -ne 'print if ! $a{$_}++' "$file"
    done 2>/dev/null

}

_DeleteUrl() {

    if (( $(_GetLinesList -q) == 0 )); then
        if [[ -n $(find "$tmp_dir" -name "*.m3u") ]]; then
            _CleanTmpDir
            echo " ${critical}All tmp lists removed.${nc}"
            sleep 3
        else
            echo " ${critical}There is nothing to do, no existing tmp lists...${nc}"
            sleep 3
            _Menu
        fi
    else
        __
        sed -i '/^https/d' "$QUEUE"
        _CleanTmpDir
        echo " ${critical}All lists cleared...${nc}"
        sleep 3
        _Menu
    fi

}

_CopyAudio() {

    [[ -f $tmp_dir/1 ]] && rm "$tmp_dir"/1

    while (( $(grep "" -c "$QUEUE") > 0 )); do
        __CopyAudioLinks() {
            __
            echo -e " Paste an url to fill the ${info}audio${nc} playlist:\n"
            read -r audiourl

            if [[ $audiourl =~ 'playlist?list=' ]]; then
                __
                AudioPlaylistTitle=$(youtube-dl -J --flat-playlist "$audiourl" | jq -r .title)
                printf '%s\n' " ${info}Getting titles & links from playlist: $AudioPlaylistTitle..." \
                "${b} Please be patient.${nb}${nc}"
                youtube-dl --get-title --no-warnings "$audiourl" >> "$AUDIO_TITLE"
                _GetYoutubePlaylistUrls -a
                _RemoveCrap
            else
                echo "$audiourl" >> "$AUDIO_INFO"
                __
                echo " ${info}Testing url...${nc}"
                _RemoveCrap
                audiourl=$(sed -n '$p' "$AUDIO_INFO")
                youtube-dl -F --no-warnings "$audiourl" > "$YTOP"
                if [[ $? -eq 1 ]]; then
                    __
                    echo -e " ${critical}${b}No format code found!${nb}\n$audiourl will be removed."
                    echo " ${info}Please visit: $supportedsites${nc}"
                    sed -i '$d' "$AUDIO_INFO"
                    _RemoveCrap
                    sleep 7
                    [[ $(_GetLinesList -a) -eq 0 ]] && _Menu
                else
                    sed -n '$p' "$AUDIO_INFO" >> "$QUEUE"
                    echo -e " ${info}Getting audio title...${nc}\n"
                    youtube-dl --get-title --no-warnings \
                    "$audiourl" >> "$AUDIO_TITLE"
                    _RemoveCrap
                fi
            fi
        }

        while (( $(grep "" -c "$QUEUE") > 0 )); do
            _ResizeWindow
            clear
            __
            [[ -f $AUDIO_INFO ]] && \
            echo " ${info}Audio list:   $(_GetLinesList -a) url(s)${nc}"
            __
            echo -e "                                                    ${mtitle}::audio options::${nc}"
            echo -e "                              ┌─────────────────────────────────────────────────────────────┐"
            echo -e "                              │     1) Add audio links            4) Play current list      │"
            echo -e "                              │     2) Download current list      5) View current list      │"
            echo -e "                              │     3) Save playlist as           6) Back to main menu      │"
            echo -e "                              └─────────────────────────────────────────────────────────────┘"
            echo -e "                                                     ${info}${b}Select an item${nb}${nc}"
            __
            read -rsn 1 options
            case "$options" in
                1)  __CopyAudioLinks
                    __ ;;
                2)  _GetAudio -a
                    __ ;;
                3)  _Save -a
                    __ ;;
                4)  _LoadAudio -a
                    __ ;;
                5)  _ViewUrlInfo -a
                    __ ;;
                6)  _Menu
                    __ ;;
            esac
        done


    done
}

_CopyVideo() {

    [[ -f $tmp_dir/1 ]] && rm "$tmp_dir"/1

    while (( $(grep "" -c "$QUEUE") > 0 )); do
        __CopyVideoLinks() {
            __
            echo -e " Paste an url to fill the ${info}video${nc} playlist:\n"
            read -r videourl

            if [[ $videourl =~ 'playlist?list=' ]]; then
                __
                VideoPlaylistTitle=$(youtube-dl -J --flat-playlist "$videourl" | jq -r .title)
                printf '%s\n' " ${info}Getting titles & links from playlist: $VideoPlaylistTitle..." \
                "${b} Please be patient.${nb}${nc}"
                youtube-dl --get-title --no-warnings "$videourl" >> "$VIDEO_TITLE"
                _GetYoutubePlaylistUrls -v
                _RemoveCrap
            else
                echo "$videourl" >> "$VIDEO_INFO"
                __
                echo " ${info}Testing url...${nc}"
                _RemoveCrap
                videourl=$(sed -n '$p' "$VIDEO_INFO")
                youtube-dl -F --no-warnings "$videourl" > "$YTOP"
                if [[ $? -eq 1 ]]; then
                    __
                    echo -e " ${critical}${b}No format code found!${nb}\n$videourl will be removed."
                    echo " ${info}Please visit: $supportedsites${nc}"
                    sed -i '$d' "$VIDEO_INFO"
                    _RemoveCrap
                    sleep 7
                    [[ $(_GetLinesList -v) -eq 0 ]] && _Menu
                else
                    sed -n '$p' "$VIDEO_INFO" >> "$QUEUE"
                    echo -e " ${info}Getting video title...${nc}\n"
                    youtube-dl --get-title --no-warnings \
                    "$videourl" >> "$VIDEO_TITLE"
                    _RemoveCrap
                fi
            fi
        }

        while (( $(grep "" -c "$QUEUE") > 0 )); do
            _ResizeWindow
            clear
            __
            [[ -f $VIDEO_INFO ]] && \
            echo -e " ${info}Video list:   $(_GetLinesList -v) url(s)${nc}\n"
            __
            echo -e "                                                    ${mtitle}::video options::${nc}"
            echo -e "                              ┌─────────────────────────────────────────────────────────────┐"
            echo -e "                              │     1) Add video links            4) Play current list      │"
            echo -e "                              │     2) Download current list      5) View current list      │"
            echo -e "                              │     3) Save playlist as           6) Back to main menu      │"
            echo -e "                              └─────────────────────────────────────────────────────────────┘"
            echo -e "                                                     ${info}${b}Select an item${nb}${nc}"
            __
            read -rsn 1 options
            case "$options" in
                1)  __CopyVideoLinks
                    __ ;;
                2)  _GetVideo -v
                    break ;;
                3)  _Save -v
                    __ ;;
                4)  _LoadVideo -v
                    __ ;;
                5)  _ViewUrlInfo -v
                    __ ;;
                6)  _Menu
                    __ ;;
            esac
        done

    done
}

# stolen from budRich
_Prompt() {
    local screenprompt key default opts status

    default=y
    opts=yn

    [[ $1 =~ -([${opts}]) ]] \
        && default="${BASH_REMATCH[1]}" && shift

    screenprompt="$* [${default^^}/${opts/$default/}]:"

    if [[ -t 2 ]]; then
        >&2 echo "$screenprompt"

        while :; do
            read -rsn 1

            key="${REPLY:-$default}"
            [[ $key =~ [${opts}] ]] || continue
            break
        done
    else
        key="$default"
    fi

    [[ ${key,,} = n ]] && status=1

    return "${status:-0}"
}

# these are temporary files used in _Choose{Download{Audio,Video},FromPlay}
CHOOSE1="$playlists_dir/ChooseFrom1.m3u"
CHOOSE2="$playlists_dir/ChooseFrom2.m3u"

_DownloadCompleted() {
    cd "$playlists_dir" || exit 1

    if [[ -n $(find "$main_dir" -name "*.part") ]]; then
        mv {"$AUDIO_INFO"_origin,"$VIDEO_INFO"_origin} "$playlists_dir" 2>/dev/null
        printf '%s\n' " ${critical}Temporary playlists have been moved in $playlists_dir." \
        " Incomplete files in audio/video dir:\n${nc}"; __
        find . -name "*.part" | sort -d | sed 's,.*/,,' | cat -n
        __
        printf '%s\n' " ${info}Keep them in if you want to resume downloads," \
        " by using '.m3u_origin' files in section: 4) Load a playlist," \
        " in this session or later.${nc}"
        sleep 15
        _Menu
    else
        FILES=( "$list" "$list"_origin \
            "$titles_dir"/"$list".titles "$CHOOSE1" "$CHOOSE2" )

        if [[ -f $list ]] && [[ $(grep -v -c '#EXTM3U' "$list") -gt 0 ]] ; then

            if [[ $keep_none_empty_playlist = yes ]]; then
                unset {FILES[0],FILES[2]}
                rm -f "${FILES[@]}" 2>/dev/null
            else
                _Prompt \
                " ${info}Downloads completed but $list is not empty, do you want to KEEP it?: ${nc}" || {
                    rm -f "${FILES[@]}" 2>/dev/null
                }
                unset {FILES[0],FILES[2]}
                rm -f "${FILES[@]}" 2>/dev/null
            fi

        else
            echo " ${info}Downloads completed, ${critical}$list is empty... $list removed.${nc}"
            sleep 5s
            rm -f "${FILES[@]}" 2>/dev/null
        fi
        [[ $quit_after_task = yes ]] && exit || _Menu
    fi
}

_GetMediaTitle() {

    case "$1" in
        -a) LIST="$AUDIO_INFO" ;;
        -l) LIST="$playlists_dir"/"$list" ;;
        -q) LIST="$QUEUE" ;;
        -v) LIST="$VIDEO_INFO" ;;
    esac

    mapfile -t title < <(grep '^https' "$LIST")

    for line in "${title[@]}"; do
        youtube-dl \
        --skip-download \
        --get-title \
        --no-warnings "$line" 2>/dev/null
    done

}

_GetLinesList() {
    case "$1" in
        -a) FILE="$AUDIO_INFO" ;;
        -l) FILE="$playlists_dir"/"$list" ;;
        -q) FILE="$QUEUE" ;;
        -v) FILE="$VIDEO_INFO" ;;
    esac
    grep -c '^https' "$FILE" 2>/dev/null
}

FFOP="$tmp_dir/ffmpeg_output"

_ConvertAudio() {

    if [[ -d "$audios_dir"/"${list%.*}" ]]; then
        cd "$audios_dir"/"${list%.*}"
    else
        cd "$audios_dir" || exit 1
    fi

    if [[ -n $default_conversion_format ]]; then
        __
        printf '%s\n' \
        " ${task}Default format set to $default_conversion_format.${nc}"
        __
        printf '%s\n' \
        " ${info}Converting files in ${task}$default_conversion_format${b}...${nb}${nc}"
        _"$default_conversion_format"
    else
        # functions _mp3 _flac _wav & _ogg are in ~/.config/mpm/mpmrc
        __
        printf '%s\n' " ${task}Default format disabled.${nc}"
        __
        read -rn1 -p \
        "${info}"' Select an output format [1 = mp3] [2 = flac] [3 = wav] [4 = ogg]: '"${nc}" conv
        __
        case "$conv" in
            1)
                echo " ${info}Converting files in ${task}mp3${b}...${nb}${nc}"
                _mp3
            ;;
            2)
                echo " ${info}Converting files in ${task}flac${b}...${nb}${nc}"
                _flac
            ;;
            3)
                echo " ${info}Converting files in ${task}wav${b}...${nb}${nc}"
                _wav
            ;;
            4)
                echo " ${info}Converting files in ${task}ogg${b}...${nb}${nc}"
                _ogg
            ;;
            *)
                echo " ${critical}UNKNOWN FORMAT !!! Try again.${nc}"
                sleep 3s
                clear
                _Menu
            ;;
        esac
    fi

    rm ./*.webm
    echo " ${info}Conversion done.${nc}"
    sleep 2

}

_GetLinkTitle() {
    case "$1" in
        -a) sed -n '1p' "$AUDIO_TITLE" ;;
        -l) sed -n '1p' "$titles_dir"/"$list".titles ;;
        -q) sed -n '1p' "$tmp_dir"/DefaultTitles ;;
        -v) sed -n '1p' "$VIDEO_TITLE" ;;
    esac
}

# _RemoveSpecials() { sed -i 's/[[:punct:]]/_/g;s/[[:space:]]/_/g' "$1"; }

_DownloadVideo() {
    cd "$playlists_dir" || exit 1

    local counter
    counter=$(grep -v -c '#EXTM3U' "$list")

    clear
    cp -f "$list" "$list"_origin 2>/dev/null
    mkdir -p "$videos_dir"/"${list%.*}"

    __DirectVideoDownload() (
        __
        printf '%s\n' " ${task}Direct download enabled.${nc}"
        __
        mapfile -t DIRECT < <(grep -v '#EXTM3U' "$list")

        for line in "${DIRECT[@]}"; do
            cd "$videos_dir"/"${list%.*}" || exit 1
            printf '%s\n' " ${info}Downloading $counter file(s)." \
            " Downloading: $(_GetLinkTitle -l)${nc}"
            [[ $line =~ 'youtube.com' ]] && {
                youtube-dl \
                -o "$(_GetLinkTitle -l)".mp4 \
                --no-warnings --merge-output-format mp4 "$line"
            } || youtube-dl \
                -o "$(_GetLinkTitle -l)".mp4 \
                --no-warnings "$line"
            ((counter--))
            sed -i '2d' "$playlists_dir"/"$list"
            sed -i '1d' "$titles_dir"/"$list".titles
            clear
        done
    )

    if [[ $direct_download = yes ]]; then
        __DirectVideoDownload
    else
        __
        echo " ${info}Tip: direct download will always pick the best format,"
        echo -e " on Youtube webm may be the best one but we'll merge files in mp4.\n"
        echo -e " Choose [S]pecific codes or [D]irect download?:\n${nc}"
        sleep 0.5 && read -rsn 1 choice
    fi

    case "$choice" in
        d|D) __DirectVideoDownload ;;
        s|S)
            for downvideourl in $(grep -v '#EXTM3U' "$list"); do
                clear
                cd "$videos_dir"/"${list%.*}" || exit 1
                __
                echo " ${info}Codes for: $(_GetLinkTitle -l)${nc}"
                youtube-dl -F --no-warnings "$downvideourl"
                __
                printf '%s\n' " ${info}Choose a format code." \
                " eg: 137+251 for merging, hls-1080p, 22 for single:${nc}"
                read -r code
                sleep 0.5
                clear

                if [[ "$code" =~ '+' ]]; then
                    printf '%s\n' " ${info}Downloading $counter file(s).${nc}"
                    youtube-dl \
                    -o "$(_GetLinkTitle -l)".mp4 \
                    -f "$code" --no-warnings \
                    --merge-output-format mp4 --progress "$downvideourl"
                else
                    printf '%s\n' " ${info}Downloading $counter file(s).${nc}"
                    youtube-dl \
                    -o "$(_GetLinkTitle -l)".mp4 \
                    -f "$code" --no-warnings \
                    --progress "$downvideourl"
                fi

                sed -i '2d' "$playlists_dir"/"$list"
                sed -i '1d' "$titles_dir"/"$list".titles
                ((counter--))
                clear

            done

        ;;
    esac

    echo " ${info}All done${nc}"
    sleep 2
    _DownloadCompleted

}

_EditPlaylist() {
    while true; do
        clear
        cd "$playlists_dir" || exit 1
        __
        PS3=""$'\n'"${info}Choose a playlist to edit:${nc} "

        select playlist in $(find . -name "*.m3u" -o -name "*.m3u_origin" \
            | sort -d | sed 's,.*/,,'); do
                __
                $MPMEDITOR "$playlist"
                echo -e " ${info}$playlist saved${nc}\n"
                read -rsn 1 -p "${info}"' [C]ontinue editing, [B]ack to menu or [Q]uit.'"${nc}" edit
                case "$edit" in
                    c|C) break ;;
                    b|B) _Menu ;;
                    q|Q) clear && exit ;;
                esac
        done

    done
}

_EditMpmConf() {

    : "${XDG_CONFIG_HOME:-$HOME/.config}"

    $MPMEDITOR "$XDG_CONFIG_HOME/mpm/mpmrc"
    printf '%s\n' " ${info}mpm config saved! New changes active.${nc}"
    source "$XDG_CONFIG_HOME"/mpm/mpmrc
    sleep 3
    clear
    _Menu

}

_GetYoutubePlaylistUrls() {
    __
    case "$1" in
        -a) URLS_INFO="$AUDIO_INFO"
            url="$audiourl"
        ;;
        -v) URLS_INFO="$VIDEO_INFO"
            url="$videourl"
        ;;
    esac

    youtube-dl --no-warnings -j "$url" \
    | jq '(.webpage_url)' | sed 's/"//g' \
    | tee -a "$QUEUE" >> "$URLS_INFO"
    sed -i '/playlist/d' {"$QUEUE","$URLS_INFO"}

}

_GetCompleted() {

    cd "$main_dir" || exit 1

    if [[ -n $(find . -name "*.part") ]]; then
        mv {"$AUDIO_INFO"_origin,"$VIDEO_INFO"_origin} "$playlists_dir" 2>/dev/null
        echo " ${critical}Temporary playlists have been moved in $playlists_dir."
        echo -e " Incomplete files in audio/video directories:\n${nc}"
        find . -name "*.part" | sort -d | sed 's,.*/,,' | cat -n
        __
        echo " ${info}Keep them in if you want to resume downloads,"
        echo " by using '.m3u_origin' files in section: 4) Load a playlist,"
        echo " in this session or later.${nc}"
        sleep 15
        _Menu
    else
        case "$1" in
            -a)
                _Prompt -n \
                " ${info}Audio downloads completed, KEEP playlist?: ${nc}" && {
                    echo " ${critical}Don't forget to save it as for future download.${nc}"
                    sleep 3
                    [[ -f "$QUEUE"_origin ]] && {
                        mv -f "$QUEUE"_origin "$QUEUE"
                        rm -f "$tmp_dir"/DefaultTitles_origin "$tmp_dir"/DefaultTitles
                    }
                    cp -f "$AUDIO_INFO"_origin "$AUDIO_INFO"
                    cp -f "$AUDIO_TITLE"_origin "$AUDIO_TITLE"
                    _Menu
                }
                if [[ -f "$QUEUE"_origin ]]; then
                    _Remove -q
                else
                    _Remove -a
                fi
            ;;
            -v)
                _Prompt -n \
                " ${info}Video downloads completed, KEEP playlist?: ${nc}" && {
                    echo " ${critical}Don't forget to save it as for future download.${nc}"
                    sleep 3
                    [[ -f "$QUEUE"_origin ]] && {
                        mv -f "$QUEUE"_origin "$QUEUE"
                        rm -f "$tmp_dir"/DefaultTitles_origin "$tmp_dir"/DefaultTitles
                    }
                    cp -f "$VIDEO_INFO"_origin "$VIDEO_INFO"
                    cp -f "$VIDEO_TITLE"_origin "$VIDEO_TITLE"
                    _Menu
                }
                if [[ -f "$QUEUE"_origin ]]; then
                    _Remove -q
                else
                    _Remove -v
                fi
            ;;
        esac
    fi

}

_GetVideo() {

    local counter M3UFILE TITLES

    case "$1" in
        -q)
            __
            if [[ ! -f "$tmp_dir"/DefaultTitles ]]; then
                echo " ${info}Getting titles...${nc}"
                _GetMediaTitle -q > "$tmp_dir"/DefaultTitles
                clear
            fi
            M3UFILE="$QUEUE"
            TITLES="$tmp_dir"/DefaultTitles
            cp -f "$M3UFILE" "$M3UFILE"_origin 2>/dev/null
            cp -f "$TITLES" "$TITLES"_origin
        ;;
        -v)
            __
            [[ $(_GetLinesList -v) -eq 0 ]] && {
                echo " ${critical}No links in the list${nc}"
                sleep 2
                _CopyVideo
            }
            M3UFILE="$VIDEO_INFO"
            TITLES="$VIDEO_TITLE"
            cp -f "$M3UFILE" "$M3UFILE"_origin 2>/dev/null
            cp -f "$TITLES" "$TITLES"_origin
        ;;
    esac

    clear
    counter=$(grep -c '^https' "$M3UFILE")

    __ChooseFormatMessages() (
        [[ $M3UFILE = "$QUEUE" ]] && {
            printf '%s\n' " ${info}Choose a format code for $(_GetLinkTitle -q)." \
            " eg: 137+251 (video+audio), hls-1080p, 22 for single:${nc}"
        }
        [[ $M3UFILE = "$VIDEO_INFO" ]] && {
            printf '%s\n' " ${info}Choose a format code for $(_GetLinkTitle -v)." \
            " eg: 137+251 (video+audio), hls-1080p, 22 for single:${nc}"
        }
    )

    __DownloadMessages() (
        [[ $TITLES = "$tmp_dir"/DefaultTitles ]] && {
            printf '%s\n' " ${info}$counter video file(s) left to download." \
            " Please be patient while downloading:  $(_GetLinkTitle -q).webm${nc}"
        }
        [[ $TITLES = "$VIDEO_TITLE" ]] && {
            printf '%s\n' " ${info}$counter video file(s) left to download." \
            " Please be patient while downloading:  $(_GetLinkTitle -v).webm${nc}"
        }
    )

    cd "$videos_dir" || exit 1

    for getvideourl in $(grep '^https' "$M3UFILE"); do
        __
        youtube-dl -F --no-warnings "$getvideourl"
        __
        __ChooseFormatMessages
        read -r code
        clear
        __
        if [[ "$code" =~ '+' ]]; then
            __DownloadMessages
            youtube-dl -f "$code" \
            --no-warnings \
            --merge-output-format mp4 \
            --progress "$getvideourl"
        else
            __DownloadMessages
            youtube-dl -f "$code" --no-warnings --progress "$getvideourl"
        fi

        if [[ $M3UFILE = "$VIDEO_INFO" ]]; then
            sed -i '1d' {"$M3UFILE","$TITLES"}
            ((counter--))
            clear
        else
            sed -i '2d' "$M3UFILE"
            sed -i '1d' "$TITLES"
            ((counter--))
            clear
        fi

    done

    echo -e " ${info}Done.\n${nc}"
    sleep 2
    _GetCompleted -v

}

_LoadAudio() {
    # change mpv settings in ~/.config/mpmrc
    local M3UFILE

    __AdviceAudio() (
        clear
        __; rm -f "$tmp_dir"/download 2>/dev/null
        echo "${critical}Tip: You may want to put this in your mpv.conf:"
        printf '%s\n' "term-playing-msg='Tiltle: \${media-title}'"
        echo "Otherwise press I in mpv for more infos.${nc}"
        __
    )

    # change mpv settings in ~/.config/mpm/mpmrc
    case "$1" in
        -a)
            if [[ -f $AUDIO_INFO ]]; then
                M3UFILE="$AUDIO_INFO"
                __AdviceAudio
                _MpvAudioOptions
                _Prompt " ${info}Temporary audio list still exist, KEEP it?: ${nc}" || {
                    rm {"$AUDIO_INFO","$AUDIO_TITLE"}
                }
                _Menu
            else
                echo " ${critical}No links in the list${nc}"
                sleep 2 && _CopyAudio
            fi
        ;;
        -c)
            M3UFILE="$CHOOSE1"
            __AdviceAudio
            _MpvAudioOptions
            rm "$CHOOSE1"
            [[ $quit_after_task = yes ]] && exit || _Menu
        ;;
        -l)
            M3UFILE="$list"
            __AdviceAudio
            _MpvAudioOptions
            [[ $quit_after_task = yes ]] && exit || _Menu
        ;;
        -q)
            M3UFILE="$QUEUE"
            __AdviceAudio
            _MpvAudioOptions
            _Menu
        ;;
    esac

}

_LoadVideo() {

    local M3UFILE

    case "$1" in
        -c) M3UFILE="$CHOOSE1" ;;
        -l) M3UFILE="$list" ;;
        -q) M3UFILE="$QUEUE" ;;
        -v)
            if [[ -f $VIDEO_INFO ]]; then
                M3UFILE="$VIDEO_INFO"
            else
                echo " ${critical}No links in the list${nc}"
                sleep 2 && _CopyVideo
            fi
        ;;
    esac

    clear
    __
    echo "${critical}Tip: You may want to put this in your mpv.conf:"
    printf '%s\n' "term-playing-msg='Tiltle: \${media-title}'"
    echo -e "Otherwise press I in mpv for more infos.${nc}\n"
    __
    # change mpv settings in ~/.config/mpm/mpmrc
    _MpvVideoOptions

    if [[ -f "$VIDEO_INFO" ]]; then
        clear
        __
        echo " ${critical}Did you launched video(s) from the default list?"
        echo " or from option 4) Load a playlist?"
        echo " If so, type ${b}${task}Y${nb} ${critical}to preserve temporary video list${nc}"
        __

        declare -a TMP=( "$VIDEO_INFO" "$VIDEO_TITLE" "$FFOP" "$YTOP" "$CHOOSE1" )

        _Prompt " ${info}Temporary video list still exist, KEEP it?:${nc}" || {
            rm -f "${TMP[@]}" 2>/dev/null
            echo " ${critical}Temporary video list removed...${nc}"
            sleep 3
        }
        __
    elif [[ -f $CHOOSE1 ]]; then
        rm -f "$CHOOSE1" "$list"_origin 2>/dev/null
        [[ $quit_after_task = yes ]] && exit || _Menu
    else
        rm -f "${TMP[@]}" 2>/dev/null
        [[ $quit_after_task = yes ]] && exit || _Menu
    fi
    _Menu
}

_TitlesListCompare() {

    # first test if $list.titles exist.
    if [[ -f $titles_dir/$list.titles ]]; then
        if (( $(grep "" -c "$titles_dir/$list.titles") \
            != $(_GetLinesList -l) )); then
            __
            echo -e " ${task}${b}Updating titles...please wait.${nb}${nc}\n"
            _GetMediaTitle -l > "$titles_dir"/"$list".titles
        fi
        __
        echo -e " ${info}Titles for $list.${nc}\n"
        cat -n "$titles_dir"/"$list".titles
        __
    else
        echo -e " ${task}${b}Getting titles...please wait.${nb}${nc}\n"
        _GetMediaTitle -l > "$titles_dir"/"$list".titles
        cat -n "$titles_dir"/"$list".titles
        __
    fi

}

_ChooseFromPlay() {
    cd "$playlists_dir" || exit 1

    clear
    _TitlesListCompare

    [[ -f $CHOOSE1 ]] && rm "$CHOOSE1"

    read -rsn 1 -p "${info}"" [B]ack to menu, Play all items as [A]udio, [V]ideo or ${b}[S]elect:${nb} ""${nc}" choice
    case "$choice" in
        a|A) _LoadAudio -l ;;
        b|B) _Menu ;;
        v|V) _LoadVideo -l ;;
        s|S)
            __
            IFS=","; read -ra array -p "${info}"" Enter links numbers separeted by comma, eg: 3,1,5: ""${nc}"

            for i in "${array[@]}"; do
                ((i++))
                sed -n "${i}p" "$list" >> "$CHOOSE1"
            done

            # if we don't unset IFS all other functions will be messed up!
            unset IFS
            __
            read -rsn 1 -p "${info}"' load [A]udio, [V]ideo: '"${nc}" load
            case "$load" in
                a|A)
                    _LoadAudio -c
                ;;
                v|V)
                    clear
                    _LoadVideo -c
                ;;
            esac
            _Menu
        ;;
    esac
    _Menu
}

_ChooseDownloadAudio() {
    cd "$playlists_dir" || exit 1
    clear
    _TitlesListCompare

    cp -f "$list" "$list"_origin 2>/dev/null

    IFS=","; read -ra array \
    -p " Enter links numbers separeted by comma, eg: 3,1,5: "
    clear
    cd "$audios_dir" || exit 1

    local counter="${#array[*]}"

    __IfNoBestWebm() (
        youtube-dl -F --no-warnings "$url"
        echo " ${info}Choose a format code: ${nc}"
        read -r code
        clear
        __
        printf '%s\n' " ${info}Total downloads: $counter${nc}"
        sleep 0.5
        youtube-dl -f "$code" --no-warnings --progress "$url"
    )

    for i in "${array[@]}"; do
        ((i++))
        url=$(sed -n "${i}p" "$playlists_dir"/"$list")
        echo "$url" >> "$CHOOSE1"
        if [[ $direct_download = yes ]] && \
            [[ $(youtube-dl -F --no-warnings "$url" | grep -w '251') ]]; then
            printf '%s\n' " ${task}Direct download enabled.${nc}"
            __
            printf '%s\n' " ${info}Downloading $counter file(s).${nc}"
            youtube-dl -o "$(youtube-dl --skip-download --get-title "$url")".webm \
            -f 251 --no-warnings --progress "$url"
        elif [[ $direct_download = no ]] && [[ $url =~ 'youtube.com' ]]; then
            __
            printf '%s\n' " ${task}Direct download disabled.${nc}"
            __
            youtube-dl -F --no-warnings "$url" | sed -n '
            1,5d;6,7p;/audio only/p' | sed '/^sb2/d' 2>/dev/null
            __
            echo " ${info}Choose a format code: ${nc}"
            read -r code
            clear
            __
            printf '%s\n' " ${info}Total downloads: $counter${nc}"
            youtube-dl -f "$code" --no-warnings --progress "$url"
        else
            __IfNoBestWebm
        fi
        ((counter--))
        clear
    done

    cd "$playlists_dir" || exit 1
    # let's remove downloaded links from the original file
    # and sending the other ones in a second temporary file...
    for line in $(grep '^https' "$CHOOSE1"); do
        grep -v "${line}" "$list" >> "$CHOOSE2"
    done

    # ...that we now rename with the original file name.
    mv -f "$CHOOSE2" "$list"
    rm "$CHOOSE1"

    # if we don't unset IFS other functions will be messed up!
    unset IFS

    clear

    echo -e " ${info}Done${nc}\n"
    echo -e " ${task}Updating titles...${b}please wait.${nb}${nc}\n"
    _GetMediaTitle -l > "$titles_dir"/"$list".titles
    clear

    cd "$audios_dir" || exit 1

    if [[ -n $(find . -iname "*.webm") ]]; then
        echo " ${critical}ADVISORY: if you choose conversion, all downloaded files"
        echo -e " will be converted in the chosen format.${nc}\n"
        find . -iname "*.webm" | sed 's,.*/,,'

        if [[ $automatic_audio_conversion = yes ]]; then
            __
            printf '%s\n' " ${task}Automatic audio conversion enabled.${nc}"
            sleep 2
            _ConvertAudio && _DownloadCompleted
        else
            __
            _Prompt " ${info}Do you wish to convert them?: ${nc}" || {
                _DownloadCompleted
            }
            _ConvertAudio && _DownloadCompleted
        fi

    else
        _DownloadCompleted
    fi

}

_ChooseDownloadVideo() {
    cd "$playlists_dir" || exit 1

    clear
    _TitlesListCompare

    cp -f "$list" "$list"_origin 2>/dev/null

    __ChooseDirectVideoDownload() (
        for i in "${array[@]}"; do
            ((i++))
            url=$(sed -n "${i}p" "$playlists_dir"/"$list")
            echo "$url" >> "$CHOOSE1"
        done

        clear

        mapfile -t DIRECT < <(grep '^https' "$CHOOSE1")

        for line in "${DIRECT[@]}"; do
            if [[ $direct_download = yes ]]; then
                printf '%s\n' " ${task}Direct download enabled.${nc}"
            else
                printf '%s\n' " ${task}Download method = direct.${nc}"
            fi
            __
            printf '%s\n' " ${info}Downloading $counter file(s).${nc}"
            if [[ $line =~ 'youtube.com' ]]; then
                youtube-dl \
                --no-warnings \
                --merge-output-format mp4 \
                --progress "$line"
                clear
            else
                youtube-dl --no-warnings --progress "$line"
                clear
            fi
            ((counter--))
        done

        echo " ${info}All done${nc}"
        sleep 2
    )

    IFS=","; read -ra array \
    -p " Enter links numbers separeted by comma, eg: 3,1,5: "

    clear
    cd "$videos_dir" || exit 1

    local counter="${#array[*]}"

    if [[ $direct_download = yes ]]; then
        __ChooseDirectVideoDownload
    else
        __
        printf '%s\n' " ${info}Tip: direct download will always pick the best format," \
        " on Youtube webm may be the best one but we'll merge files in mp4." \
        " Choose [S]pecific codes or [D]irect download?:\n${nc}"
        sleep 0.5 && read -rsn 1 choice
    fi

    case "$choice" in
        d|D)
            __ChooseDirectVideoDownload
        ;;
        s|S)
            for i in "${array[@]}"; do
                ((i++))
                url=$(sed -n "${i}p" "$playlists_dir"/"$list")
                echo "$url" >> "$CHOOSE1"

                if [[ $url =~ 'youtube.com' ]]; then
                    __
                    youtube-dl -F --no-warnings "$url" \
                    | sed '1,5d;/^[sb]/d;/^\s*$/d;s/-//g;/^\s*$/d'
                else
                    youtube-dl -F --no-warnings "$url"
                fi
                __
                printf '%s\n' " ${info}Choose a format code." \
                " eg: 137+251 for merging, hls-1080p, 22 for single:${nc}"
                read -r code
                sleep 0.5
                clear
                printf '%s\n' " ${info}Total downloads: $counter${nc}"
                if [[ $code =~ '+' ]]; then
                    youtube-dl -f "$code" \
                    --no-warnings \
                    --merge-output-format mp4 \
                    --progress "$url"
                else
                    youtube-dl -f "$code" \
                    --no-warnings --progress "$url"
                fi
                ((counter--))
                clear
            done
            echo " ${info}All done${nc}"
            sleep 2
        ;;
    esac

    cd "$playlists_dir" || exit 1
    # let's remove downloaded links from the original file
    # and sending the other ones in a second temporary file...
    for line in $(grep '^https' "$CHOOSE1"); do
        grep -v "${line}" "$list" >> "$CHOOSE2"
    done

    # ...that we now rename with the original file name.
    mv -f "$CHOOSE2" "$list"
    rm "$CHOOSE1"

    # if we don't unset IFS other functions will be messed up!
    unset IFS

    echo -e " ${task}Updating titles...${b}please wait.${nb}${nc}\n"
    _GetMediaTitle -l > "$titles_dir"/"$list".titles
    clear
    _DownloadCompleted

}

_LoadPlaylistMenu() {

    while true; do

        _ResizeWindow
        clear
        __
        [[ $direct_download = yes ]] && printf '%s\n' " ${task}Direct download enabled.${nc}"
        __
        echo " ${info}$list: $(grep -v -c '#EXTM3U' "$list") url(s).${nc}"
        __
        echo -e "                                                 ${mtitle}::Download options::${nc}"
        echo -e "                                 ┌───────────────────────────────────────────────────┐"
        echo -e "                                 │     1) Choose playlist links & download ${info}audio${nc}     │"
        echo -e "                                 │     2) Choose playlist links & download ${info}video${nc}     │"
        echo -e "                                 │     3) Download whole playlist as ${info}audio${nc} files     │"
        echo -e "                                 │     4) Download whole playlist as ${info}video${nc} files     │"
        echo -e "                                 │     5) Back to main menu                          │"
        echo -e "                                 └───────────────────────────────────────────────────┘"
        echo -e "                                                   ${info}${b}Select an item${nb}${nc}"
        __
        read -rsn 1 options
        case "$options" in
            1) _ChooseDownloadAudio ;;
            2) _ChooseDownloadVideo ;;
            3) _GetAudio -l ;;
            4) _DownloadVideo ;;
            5) _Menu ;;
        esac
    done

}

_LoadPlaylist() {
    cd "$playlists_dir" || exit 1

    if [[ -z $(find . -type f -not -name "default.m3u" -iname "*.m3u") ]]; then
        printf '%s\n' " ${critical}No playlist found!${nc}" \
        " ${task}First make a temporary list using options 1 or 2," \
        " save it as wathever you like, then come back to play/download it.${nc}"
        sleep 10 && _Menu
    fi

    clear
    touch 1_Back_to_menu
    __

    PS3=""$'\n'"${info}Select a playlist to load or hit 1) for main menu:${nc} "
    select list in $(find . -type f  -not -name "default.m3u" \
    | sort -d | sed 's,.*/,,'); do

        [[ $list = 1_Back_to_menu ]] && rm 1_Back_to_menu && break

        if [[ $(_GetLinesList -l) -eq 0 ]]; then
            echo " ${critical}No links found in $list (empty or does not contains #EXTM3U header)."
            echo " You can edit and fix it in option 8) Edit a playlist.${nc}"
            sleep 8
            break
        fi

        rm 1_Back_to_menu
        clear
        __
        printf '%s\n' " ${info}Choose an option for${nc} $list:"
        __
        read -rn1 -p "${info}"' [D]ownload, [P]lay, [V]iew titles: '"${nc}" submenu
        __
        case "$submenu" in
            d|D) _LoadPlaylistMenu ;;
            p|P) _ChooseFromPlay ;;
            v|V)
                clear
                _TitlesListCompare
                read -rn1 -p "${info}"' [B]ack to menu, [D]ownload, [P]lay: '"${nc}" loadplaylist
                __
                case "$loadplaylist" in
                    b|B) _Menu ;;
                    d|D) _LoadPlaylistMenu ;;
                    p|P) _ChooseFromPlay ;;
                    *)
                        __
                        printf '%s\n' " ${critical}Wrong option...${nc}"
                        sleep 2
                        _Menu
                    ;;
                esac
            ;;
            *)
                __
                printf '%s\n' " ${critical}Wrong option...${nc}"
                sleep 2
                _Menu
            ;;
        esac

    done
}

_LoadLocal() {

    local AUDIOS VIDEOS zic vid
    # getting the right paths for french env too...
    # we use -maxdepth 2 in case our directories are in subdirectories.
    AUDIOS=$(find "$HOME" -maxdepth 2 -type d -name "Music" -o -name "Musique")
    VIDEOS=$(find "$HOME" -maxdepth 2 -type d -name "Videos" -o -name "Vidéos")
    zic=$(echo "$AUDIOS" | awk -F"/" '{print $NF}')
    vid=$(echo "$VIDEOS" | awk -F"/" '{print $NF}')

    # create a symlink of $audios_dir/$videos_dir
    # in ~/Music & ~/Videos for user convenience
    if find "$audios_dir" "$videos_dir" -type d -empty >/dev/null; then
        touch {"$audios_dir"/._,"$videos_dir"/._}
        ! [[ -L "$AUDIOS"/mpm_audios ]] \
        && ln -s "$audios_dir" "$AUDIOS"/mpm_audios
        ! [[ -L "$VIDEOS"/mpm_videos ]] \
        && ln -s "$videos_dir" "$VIDEOS"/mpm_videos
    fi

    # the select loop won't display the correct directories names
    # if white spaces exist, so we are forced to use this "dirthack"
    _ReplaceSpacesDirs() (
        find "$AUDIOS" "$VIDEOS" -maxdepth 1 \
        -type d -name "* *" -exec \
        bash -c '
            for f in "$@"; do
                n="${f##*/}"
                mv -nv "$f" "${f%/*}/${n// /_}"
            done >/dev/null 2>&1
        ' dummy {} +
    )

    read -rsn 1 -p "${info}"' Play: [1] Audio dir, [2] Audio files, [3] Video dir or [4] Video files?: '"${nc}" choice
    case "$choice" in
        1)
            _ReplaceSpacesDirs
            clear
            __
            echo -e " ${info}Directories in $AUDIOS: ${nc}\n"
            PS3=""$'\n'"${info}Your selection number: ${nc}"
            select dir in $(find -L "$AUDIOS" -maxdepth 1 -type d -not -name \
                "$zic" | sort | sed 's,.*/,,'); do
                if [[ $(find "$AUDIOS"/"$dir" -type d -empty) ]]; then
                    __
                    echo " ${critical}$dir is empty. Wait and try again...${nc}"
                    sleep 4
                    break
                else
                    # checking for content in linked directories.
                    if [[ -z $(command ls "$AUDIOS"/"$dir") ]]; then
                        __
                        echo " ${critical}This symlink points to an empty directory!"
                        echo " Wait and try again...${nc}"
                        sleep 4
                        break
                    fi
                    clear
                    mpv --no-video "$AUDIOS"/"$dir"/*
                    break
                fi
            done
        ;;
        2)
            "$FILEMANAGER" "$AUDIOS"; _Menu
        ;;
        3)
            _ReplaceSpacesDirs
            clear
            __
            echo -e " ${info}Directories in $VIDEOS: ${nc}\n"
            PS3=""$'\n'"${info}Your selection number: ${nc}"
            select dir in $(find -L "$VIDEOS" -maxdepth 1 -not -name \
                "$vid" | sort | sed 's,.*/,,'); do
                if [[ $(find "$VIDEOS"/"$dir" -type d -empty) ]]; then
                    __
                    echo " ${critical}$dir is empty. Wait and try again...${nc}"
                    sleep 4
                    break
                else
                    if [[ -z $(command ls "$VIDEOS"/"$dir") ]]; then
                        __
                        echo " ${critical}This symlink points to an empty directory!"
                        echo " Wait and try again...${nc}"
                        sleep 4
                        break
                    fi
                    clear
                    mpv "$VIDEOS"/"$dir"/*
                    break
                fi
            done
        ;;
        4)
            "$FILEMANAGER" "$VIDEOS"; _Menu
        ;;

    esac

}

_Save() {

    cd "$playlists_dir" || exit 1
    # no need to add extension when renaming
    list="$list.m3u"

    __ReplaceSpaces() (
        find "$playlists_dir" "$titles_dir" -maxdepth 1 \
        -type f -name "* *" -exec \
        bash -c '
            for f in "$@"; do
                n="${f##*/}"
                mv -nv "$f" "${f%/*}/${n// /_}"
            done >/dev/null 2>&1
        ' dummy {} +
    )

    __NestedSave() (
        cp -f "$CURRENT_LIST" "$list"
        cp -f "$CURRENT_TITLE" "$titles_dir"/"$list".titles

        sed -i '1s/^/#EXTM3U\n/' "$list"
        sed -i '/^https/d' "$CURRENT_LIST"

        (( $(grep -c -w '#EXTM3U' "$list") > 1 )) \
            && sed -i '1d' "$list"

        echo " ${info}$list saved.${nc}"
        sleep 2s
    )

    __NestedSaveCheck() (
        clear
        __
        echo -e " ${info}Available playlists:\n${nc}"
        find . -not -name "default.m3u" -name "*.m3u" -o -name "*.m3u_origin" \
        | sort -d \
        | column \
        | sed 's/\.\///g;s/\.m3u//g;s/\s/ /g'
        __
        read -rp "${info}"' Save playlist as: (do not use extension) '"${nc}" list

        if [[ $(find . -name "${list}") ]]; then
            __
            _Prompt -n " ${critical}This playlist already exists! Overwrite $list?: ${nc}" && {
                __NestedSave
            }
            __
        else
            __NestedSave
        fi

    )

    case "$1" in
        -a)
            if [[ -f $AUDIO_INFO ]]; then
                CURRENT_LIST="$AUDIO_INFO"
                CURRENT_TITLE="$AUDIO_TITLE"
                __NestedSaveCheck
                rm -f $AUDIO_{INFO,TITLE} "$AUDIO_TITLE"_origin
                __ReplaceSpaces
                unset list
            else
                echo " ${critical}No links in the list${nc}"
                sleep 2
                _CopyAudio
            fi
        ;;
        -q)
            CURRENT_LIST="$QUEUE"
            CURRENT_TITLE="$tmp_dir"/DefaultTitles
            __NestedSaveCheck
            rm -f "$tmp_dir"/DefaultTitles
            __ReplaceSpaces
            unset list
        ;;
        -v)
            if [[ -f $VIDEO_INFO ]]; then
                CURRENT_LIST="$VIDEO_INFO"
                CURRENT_TITLE="$VIDEO_TITLE"
                __NestedSaveCheck
                rm -f $VIDEO_{INFO,TITLE} "$VIDEO_TITLE"_origin
                __ReplaceSpaces
                unset list
            else
                echo " ${critical}No links in the list${nc}"
                sleep 2
                _CopyVideo
            fi
        ;;
    esac
    _Menu
}

_Remove() {

    case "$1" in
        -a) rm -f $AUDIO_{INFO,TITLE} \
            {"$AUDIO_INFO"_origin,"$AUDIO_TITLE"_origin}
            __
            echo " ${critical}Audio list removed...${nc}"
            sleep 3
        ;;
        -q) sed -i '/^https/d' "$QUEUE"
            rm {"$QUEUE"_origin,"$tmp_dir"/1} 2>/dev/null
            rm {"$tmp_dir"/DefaultTitles_origin,"$tmp_dir"/DefaultTitles} 2>/dev/null
            __
            echo " ${critical}Default list cleared...${nc}"
            sleep 3
        ;;
        -v) rm -f $VIDEO_{INFO,TITLE} \
            {"$VIDEO_INFO"_origin,"$VIDEO_TITLE"_origin}
            __
            echo " ${critical}Video list removed...${nc}"
            sleep 3
        ;;
    esac

    _Menu
}

_SaveRemove() {

    cd "$playlists_dir" || exit 1

    prompt=( "[B]ack to menu," "[S]ave default," "Save [A]udio," \
    "Save [V]ideo," "[R]emove a playlist." )

    if [[ -f $AUDIO_INFO ]] && [[ -f $VIDEO_INFO ]]; then
        if (( $(_GetLinesList -q) < 1 )); then
            unset prompt[1]
            echo "${info}" "${prompt[*]}" "${nc}"
            __
        else
            echo "${info}" "${prompt[@]}" "${nc}"
            __
        fi
    elif [[ -f $AUDIO_INFO ]]; then
        if (( $(_GetLinesList -q) < 1 )); then
            unset {prompt[1],prompt[3]}
            echo "${info}" "${prompt[*]}" "${nc}"
        else
            unset prompt[3]
            echo "${info}" "${prompt[*]}" "${nc}"
            __
        fi
    elif [[ -f $VIDEO_INFO ]]; then
        if (( $(_GetLinesList -q) < 1 )); then
            unset {prompt[1],prompt[2]}
            echo "${info}" "${prompt[*]}" "${nc}"
        else
            unset prompt[2]
            echo "${info}" "${prompt[*]}" "${nc}"
            __
        fi
    elif (( $(_GetLinesList -q) < 1 )); then
        echo -e " ${critical}Nothing to save, maybe remove something?${nc}\n"
        unset {prompt[1],prompt[2],prompt[3]}
        echo "${info}" "${prompt[*]}" "${nc}"
        __
    else
        unset {prompt[2],prompt[3]}
        echo "${info}" "${prompt[@]}" "${nc}"
        __
    fi

    read -rsn 1 opt
    case "$opt" in
        a|A) _Save -a ;;
        b|B) _Menu ;;
        s|S)
            rm -f "$tmp_dir"/1 2>/dev/null
            _Save -q
        ;;
        r|R)
            echo "${info} Choose a playlist to remove: ${nc}"
            PS3=" "
            __
            select m3ufile in $(find "$playlists_dir" -not -name "default.m3u" \
                -name "*.m3u" -o -name "*.m3u_origin" \
                | sort -d | sed 's,.*/,,'); do
                __
                _Prompt -n \
                " ${critical}Are you sure you want to remove $m3ufile?: ${nc}" && {
                    rm "$m3ufile"
                    rm "$titles_dir"/"$m3ufile".titles
                    __
                    echo " ${critical}$m3ufile removed.${nc}"
                    sleep 3s
                    break
                }
                __
                echo " ${info}$m3ufile preserved"
                sleep 2s
                break
            done
        ;;
        v|V) _Save -v ;;
    esac
    _Menu
}

_CleanTmpDir() { rm -f "$tmp_dir"/* >/dev/null 2>&1; }

## avoids running multiple instances
mpvmenu=$(basename $0)
pids=($(pidof -x $mpvmenu))

[[ ${#pids[@]} -gt 1 ]] && exit

HELP="/usr/local/share/doc/mpm/help"

_LaunchMpn() {
    _Prompt " ${info}Launch mpm_full? ${nc}" || {
        exit
    }
    _CheckDependencies "${@}"
}

case "$1" in
    -c) $MPMEDITOR ~/.config/mpm/mpmrc && _LaunchMpn ;;
    -e) _EditPlaylist ;;
    -l) _LoadPlaylist ;;
    -p) _LoadLocal ;;
    -v) echo "mpm $VERSION" && _LaunchMpn ;;
    -h|--help) less "$HELP" && _LaunchMpn ;;
esac

_CheckDependencies "${@}"
