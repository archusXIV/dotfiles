#!/bin/bash

##    Author: Barret E (2021-23) <archus@protonmail.com>
##    https://github.com/archusXIV/mpv-playlists-manager/blob/main/mpm
##    Dependencies: ffmpeg, jq, mpv, youtube-dl.
##    Optionals: ranger, w3m, wmctrl
##
##    Youtube-dl is for now kind of unmaintained so install and make a symlink with
##    https://github.com/yt-dlp/yt-dlp/releases
##    sudo pacman -S yt-dlp youtube-dl
##    ln -s /usr/bin/yt-dlp ~/.local/bin/youtube-dl (if ~/.local/bin is in your $PATH)
##
##    This script rips video urls from Youtube and so on.
##    In our case we use ".m3u" files to store urls in and then be able
##    to watch from the site itself or download videos or just the audio.
##    We can save, remove or edit playlists & mpm config file (mpmrc).
##    It is recommanded to disable mpv cache for better results on direct streaming,
##    or find a better cache parameter.

# shellcheck disable=SC1091,SC2013,SC2015,SC2030,SC2031,SC2034,SC2044,SC2076,SC2048
# shellcheck disable=SC2086,SC2119,SC2120,SC2143,SC2153,SC2154,SC2164,SC2184,SC2207,SC2317

VERSION="v.1.3-8"

: "${XDG_CONFIG_HOME:-$HOME/.config}"
MPMRC="$XDG_CONFIG_HOME/mpm/mpmrc"
THEMERC="$XDG_CONFIG_HOME/mpm/themerc"

[[ ! -f $MPMRC ]] && {
    mkdir -p "$XDG_CONFIG_HOME"/mpm
    cp /usr/local/share/doc/mpm/mpmrc "$MPMRC"
}

# shellcheck source=/dev/null
## summon our personal settings
source "$MPMRC"
source "$THEMERC"

trap "_CleanTmpDir; exit" SIGTERM EXIT

## prompts blinking
b=$'\e[5m';     # blinking
nb=$'\e[25m';   # stop blinking

supportedsites="https://github.com/ytdl-org/youtube-dl/blob/master/docs/supportedsites.md"
QUEUE="$playlists_dir/default.m3u"

# !!!!!!!!!!!!!!!! creates a blank line !!!!!!!!!!!!!!!!!!!
# so do not delete these characters "__" in the code below.
__() { printf '\n'; }

## This function is called multiple times across this program,
## but let's ensure temporary files are removed before we exit out.
_CheckDependencies() {
    ## Checking dependencies: softwares, directories and files.
    declare -a deps=( "ffmpeg" "jq" "mpv" "youtube-dl" "yt-dlp" \
                    "ueberzug" "wmctrl" "w3m" )

    for dep in "${deps[@]:0:5}"; do
        [[ -z $(command -v "$dep") ]] && {
            printf '%s\n' " ${critical}$dep isn 't installed,...exiting!"
            notify-send -t 0 -u critical "$dep isn 't installed,...exiting!"
            exit 127
        }
    done

    for optional in "${deps[@]:5:8}"; do
        [[ -z $(command -v "$optional") ]] && {
            printf '%s\n' " ${info}For better experience consider installing $optional.${nc}"
            sleep 3
        }
    done

    # MPMEDITOR & FILEMANAGER must be defined in ~/.config/mpm/mpmrc
    [[ -z $MPMEDITOR ]] && {
        printf '%s\n' " ${critical}The config EDITOR is not set...exiting!${nc}"
        notify-send -t 0 -u critical "The config EDITOR is not set...exiting!"
        exit 1
    }

    [[ -z $(command -v "$FILEMANAGER") ]] && {
        printf '%s\n' " ${critical}Consider installing a terminal file manager.${nc}"
        notify-send -t 0 -u critical "Consider installing a terminal file manager"
        sleep 3
    }

    if [[ ! -d $main_dir ]]; then
        mkdir --parents \
        {"$audios_dir","$playlists_dir","$titles_dir","$tmp_dir","$videos_dir"}
    else
        [[ ! -d $audios_dir ]] && mkdir -p "$audios_dir"
        [[ ! -d $playlists_dir ]] && mkdir -p "$playlists_dir"
        [[ ! -d $titles_dir ]] && mkdir -p "$titles_dir"
        [[ ! -d $tmp_dir ]] && mkdir -p "$tmp_dir"
        [[ ! -d $videos_dir ]] && mkdir -p "$videos_dir"
    fi

    [[ ! -f $QUEUE ]] && echo "#EXTM3U" > "$QUEUE"

    # needed to warn the user when the default list isn' t empty.
    (($(_GetLinesList -q) >= 1)) && {
        touch "$tmp_dir"/1
        cp -f "$DEFAULTM3UTITLES" "$DEFAULTITLES"
    }

    _Theme "$THEME"
    _Menu

}

AUDIO_URLS="$tmp_dir/AudioUrls.m3u"
AUDIO_TITLES="$tmp_dir/AudioTitles"
VIDEO_URLS="$tmp_dir/VideoUrls.m3u"
VIDEO_TITLES="$tmp_dir/VideoTitles"

_ListsCount() {

    local UPD
    UPD=$(curl -sL "https://raw.githubusercontent.com/archusXIV/mpv-playlists-manager/main/version")
    [[ $UPD != "$VERSION" ]] && {
        printf '%s\n' " ${critical}${b}version $UPD available${nb}${nc}"
    }
    __
    echo -e " ${info}Collection:" \
    " $(find "$playlists_dir" -not -name "default.m3u" \
    -iname "*.m3u" -printf '.' | wc -c) playlist(s)${nc}"
    
    if [[ -f $tmp_dir/1 ]]; then
        __
        echo -e " ${info}Default list: ${b}$(_GetLinesList -q)${nb} url(s)${nc}"
    elif [[ $(_GetLinesList -q) -gt 0 ]]; then
        __
        echo -e " ${info}Default list: $(_GetLinesList -q) url(s)${nc}"
    else
        __
    fi

    [[ -f $AUDIO_URLS ]] && (($(_GetLinesList -a) > 0)) && \
        echo -e " ${info}Audio list:   $(_GetLinesList -a) url(s)${nc}"
    [[ -f $VIDEO_URLS ]] && (($(_GetLinesList -v) > 0)) && \
        echo -e " ${info}Video list:   $(_GetLinesList -v) url(s)${nc}\n"

}

# stolen from budRich
_Prompt() {
    local screenprompt key default opts status

    default=y
    opts=yn

    [[ $1 =~ -([${opts}]) ]] \
        && default="${BASH_REMATCH[1]}" && shift

    screenprompt="$* [${default^^}/${opts/$default/}]:"

    # let's determine if we are in a terminal
    if [[ -t 2 ]]; then
        >&2 echo "$screenprompt"

        while :; do
            read -rsn 1

            key="${REPLY:-$default}"
            [[ $key =~ [${opts}] ]] || continue
            break
        done
    else
        key="$default"
    fi

    [[ ${key,,} = n ]] && status=1

    return "${status:-0}"
}

_SaveOnExit() {

    _Prompt -n \
        " ${critical}Some temporary lists aren't saved, quit anyway?: ${nc}" && {
        clear
        exit
    }
    cd "$playlists_dir" || exit 1

    saveOnExitPrompt=( "[B]ack to menu" "Save [A]udio list" "Save [V]ideo list" )

    if [[ -f $AUDIO_URLS && -f $VIDEO_URLS ]]; then
        __
        echo -e " ${info}${saveOnExitPrompt[*]}${nc}"
    elif [[ -f $AUDIO_URLS && ! -f $VIDEO_URLS ]]; then
        unset saveOnExitPrompt[2]
        __
        echo -e " ${info}${saveOnExitPrompt[*]}${nc}"
    elif [[ -f $VIDEO_URLS && ! -f $AUDIO_URLS ]]; then
        unset saveOnExitPrompt[1]
        __
        echo -e " ${info}${saveOnExitPrompt[*]}${nc}"
    fi

    read -rsn 1 saveOnExitOptions
    case "$saveOnExitOptions" in
        a|A) _Save -a ;;
        b|B) _Menu ;;
        v|V) _Save -v ;;
    esac

}

_LittleStars() {

    if [[ $THEME = default ]]; then
        for i in {1..7}; do
            echo -en "\e[38;5;${i}m*****\e[0m"
        done
    else
        for i in "${customColors[@]}"; do
            if [[ $i = 0x* ]]; then
                printf '\e[38;2;%d;%d;%dm%s' ${i} '*******'
            else
                echo -en "\e[38;2;${i}m*******\e[0m"
            fi
        done
    fi
    
}

_Menu() {
    # First copy url then select option 1 or 2,
    # the link will be saved in an m3u file.
    while [[ -e $QUEUE ]]; do
        _ResizeWindow
        clear
        _ListsCount
        __
        echo -e "                                           ${mtitle}::MPV-PLAYLISTS-MANAGER $VERSION::"
        echo -e "                                          $(_LittleStars)"
        echo -e "                                     ${info}current theme: $THEME. ${critical}For usage: mpm --help${nc}"
        echo -e "                  ┌─────────────────────────────────────────────────────────────────────────────────────┐"
        echo -e "                  │  1) Create/Add video playlist   6) View default playlist   │  ${info}Tasks for option 4)${nc}:  │"
        [[ $direct_download = yes ]] && echo -e "                  │  2) Create/Add audio playlist   7) Clear all tmp lists     │  direct download: ${task}$direct_download${nc}  │"
        [[ $direct_download = no ]] && echo -e "                  │  2) Create/Add audio playlist   7) Clear all tmp lists     │  direct download:  ${task}$direct_download${nc}  │"
        [[ $automatic_audio_conversion = yes ]] && echo -e "                  │  3) Save as/Delete a playlist   8) Edit a playlist         │  conversion auto: ${task}$automatic_audio_conversion${nc}  │"
        [[ $automatic_audio_conversion = no ]] && echo -e "                  │  3) Save as/Delete a playlist   8) Edit a playlist         │  conversion auto:  ${task}$automatic_audio_conversion${nc}  │"
        if [[ -z $default_conversion_format ]]; then echo -e "                  │  ${info}4)${nc} Play/Download a playlist    9) Edit mpm config (mpmrc) │  audio format:  ${task}unset  │"; \
        elif [[ $default_conversion_format != flac ]]; then echo -e "                  │  ${info}4)${nc} Play/Download a playlist    9) Edit mpm config (mpmrc) │  audio format:    ${task}$default_conversion_format${nc}  │"; \
        elif [[ $default_conversion_format = flac ]]; then echo -e "                  │  ${info}4)${nc} Play/Download a playlist    9) Edit mpm config (mpmrc) │  audio format:   ${task}$default_conversion_format${nc}  │"; fi
        [[ $quit_after_task = yes ]] && echo -e "                  │  5) Load local folder/files     X) Exit                    │  quit after task: ${task}$quit_after_task${nc}  │"
        [[ $quit_after_task = no ]] && echo -e "                  │  5) Load local folder/files     X) Exit                    │  quit after task:  ${task}$quit_after_task${nc}  │"
        echo -e "                  └─────────────────────────────────────────────────────────────────────────────────────┘"
        [[ -f $tmp_dir/1 ]] \
            && echo -e "                                                     ${info}Select an item${nc}" \
            || echo -e "                                                     ${info}${b}Select an item${nc}${nb}"
        __
        read -rsn 1 mainMenuOptions
        case "$mainMenuOptions" in
            1)  _CopyVideo
                __  ;;
            2)  _CopyAudio
                __  ;;
            3)  _SaveRemove
                __  ;;
            4)  _LoadPlaylist
                __  ;;
            5)  _LoadLocal
                __  ;;
            6)  _ViewUrlInfo -q
                __  ;;
            7)  _DeleteUrl
                __  ;;
            8)  _EditPlaylist
                __  ;;
            9)  _EditMpmConf
                __  ;;
            x|X)    if [[ -f "$AUDIO_URLS" || -f "$VIDEO_URLS" ]]; then
                        _SaveOnExit
                    else
                        clear
                        exit 0
                    fi
        esac
    done
}

YTOP="$tmp_dir/youtube-dl_output"
DEFAULTITLES="$tmp_dir/DefaultTitles"
DEFAULTM3UTITLES="$titles_dir/default.m3u.titles"

_GetAudioDownload() {

    mapfile -t AUDIOLINKS < <(grep '^https' "$M3UFILE")

    for getAudioUrl in "${AUDIOLINKS[@]}"; do
        __GetAudioDownloadMessages
        if [[ $(youtube-dl -F "${ytdlPreset_DW[@]}" "$getAudioUrl" \
            | grep '^251') ]]; then
            __
            if [[ $(youtube-dl --skip-download --get-title "$getAudioUrl") =~ '/' ]]; then
                youtube-dl --format 251 "${ytdlPreset_FS[@]}" \
                "${ytdlPreset_NC[@]}" "$getAudioUrl"
            else
                youtube-dl --output "$(youtube-dl \
                --skip-download --get-title "$getAudioUrl").%(ext)s" \
                --format 251 "${ytdlPreset_NC[@]}" "$getAudioUrl"
            fi
        else
            youtube-dl -F "${ytdlPreset_DW[@]}" "$getAudioUrl" \
            | awk '/audio only|PROTO|^[-]/ {sub("^[sb*]",""); print $0}'
            __
            printf '%s\n' " ${info}Choose a format code: ${nc}"
            read -r code
            clear
            __
            if [[ $(youtube-dl --skip-download --get-title "$getAudioUrl") =~ '/' ]]; then
                youtube-dl --format "$code" "${ytdlPreset_FS[@]}" \
                "${ytdlPreset_NC[@]}" "$getAudioUrl"
            else
                youtube-dl --output "$(youtube-dl \
                --skip-download --get-title "$getAudioUrl").%(ext)s" \
                --format "$code" "${ytdlPreset_NC[@]}" "$getAudioUrl"
            fi
        fi

        if [[ $M3UFILE = "$AUDIO_URLS" ]]; then
            sed -i '1d' {"$M3UFILE","$TITLES"}
        else
            sed -i '2d' "$M3UFILE"
            sed -i '1d' "$TITLES"
        fi

        clear

    done
}

_GetAudio() {

    cd "$audios_dir" || exit 1
    local M3UFILE TITLES

    case "$1" in
        -a)
            [[ $(_GetLinesList -a) -eq 0 ]] && {
                printf '%s\n' " ${critical}No links in the list${nc}"
                sleep 2
                _CopyAudio
            }
            M3UFILE="$AUDIO_URLS"
            TITLES="$AUDIO_TITLES"
        ;;
        -l)
            M3UFILE="$playlists_dir"/"$list"
            TITLES="$titles_dir"/"$list".titles
            mkdir -p "$audios_dir"/"${list%.*}"
        ;;
        -q)
            if [[ ! -f $DEFAULTITLES && \
                -f $DEFAULTM3UTITLES ]]; then
                cat "$DEFAULTM3UTITLES" > \
                "$DEFAULTITLES"
            elif [[ -f $DEFAULTITLES ]]; then
                printf '%s\n' " ${info}Fetching titles file...${nc}"
                sleep 1
            else
                printf '%s\n' " ${info}Getting titles...${nc}"
                _GetMediaTitle -q > "$DEFAULTITLES"
                clear
            fi
            M3UFILE="$QUEUE"
            TITLES="$DEFAULTITLES"
        ;;
    esac

    cp -f "$M3UFILE" "$M3UFILE"_origin
    cp -f "$TITLES" "$TITLES"_origin
    clear

    __GetAudioDownloadMessages() (

        [[ $M3UFILE = "$AUDIO_URLS" ]] && {
            printf '%s\n' " ${info}$(_GetLinesList -a) audio file(s) left to download." \
            " Downloading:  $(_GetLinkTitle -a)${nc}"
        }

        [[ $M3UFILE = "$playlists_dir"/"$list" ]] && {
            printf '%s\n' " ${info}$(_GetLinesList -l) audio file(s) left to download." \
            " Downloading:  $(_GetLinkTitle -l)${nc}"
        }

        [[ $M3UFILE = "$QUEUE" ]] && {
            printf '%s\n' " ${info}$(_GetLinesList -q) audio file(s) left to download." \
            " Downloading:  $(_GetLinkTitle -q)${nc}"
        }

    )

    [[ -d "$audios_dir"/"${list%.*}" ]] && cd "$audios_dir"/"${list%.*}"

    _GetAudioDownload

    echo -e " ${info}Done\n${nc}"

    if [[ -n $(find . -iname "*.webm") ]]; then

        echo " ${critical}ADVISORY: if you choose conversion, all downloaded files (.webm)"
        echo -e " will be converted in the chosen format.${nc}\n"
        find . -iname "*.webm" | sort -d | sed 's,.*/,,'

        if [[ $automatic_audio_conversion = yes ]]; then
            __
            printf '%s\n' " ${task}Automatic audio conversion enabled.${nc}"
            sleep 2
            [[ $M3UFILE = "$AUDIO_URLS" ]] || [[ $M3UFILE = "$QUEUE" ]] \
            && _ConvertAudio && _GetCompleted -a
            [[ $M3UFILE = "$playlists_dir"/"$list" ]] \
            && _ConvertAudio && _DownloadCompleted
        else
            __
            _Prompt " ${info}Do you wish to convert them?: ${nc}" || {
                [[ $M3UFILE = "$AUDIO_URLS" ]] || [[ $M3UFILE = "$QUEUE" ]] \
                && _GetCompleted -a
                [[ $M3UFILE = "$playlists_dir"/"$list" ]] && _DownloadCompleted
            }
            [[ $M3UFILE = "$AUDIO_URLS" ]] || [[ $M3UFILE = "$QUEUE" ]] \
            && _ConvertAudio && _GetCompleted -a
            [[ $M3UFILE = "$playlists_dir"/"$list" ]] \
            && _ConvertAudio && _DownloadCompleted
        fi

    else
        [[ $M3UFILE = "$AUDIO_URLS" ]] || [[ $M3UFILE = "$QUEUE" ]] \
        && _GetCompleted -a
        [[ $M3UFILE = "$playlists_dir"/"$list" ]] && _DownloadCompleted
    fi

}

_ViewUrlInfo() {
    # Normaly in Bash nested functions use parentheses instead of curly braces,
    # but here it won't work because of the case statment right parenthese...
    # They will close the block before it finishes.

    viewUrlInfoPrompt=( "[M]aim menu" "[B]ack to audio options" \
                        "[B]ack to video options" "[D]ownload" \
                        "[P]lay" "[S]ave as" "[R]emove list: " )

    # let's play...
    stars=$(printf "%-54s" "*")
    __audio() {
        if [[ -f $AUDIO_URLS ]]; then
            clear
            __
            echo " ${info}order |  audio playlist link(s) & titles.${nc}"
            echo -e " ${info}${stars// /*}${nc}\n"
            awk '$0 ~ /^https/{print $0}' "$AUDIO_URLS" \
            | cat -n && {
                __
                cat -n "$AUDIO_TITLES"
            __
            }
            unset {viewUrlInfoPrompt[2],viewUrlInfoPrompt[7]}
            __
            echo "${info}" "${viewUrlInfoPrompt[*]}" "${nc}"
            read -rsn 1 opt
            case "$opt" in
                b|B) __; _CopyAudio ;;
                m|M) _Menu ;;
                d|D) _GetAudio -a ;;
                p|P) _LoadAudio -a ;;
                r|R) _Remove -a ;;
                s|S) _Save -a ;;
            esac
        else
            echo " ${critical}No links in the list${nc}"
            sleep 2 && return
        fi
    }

    __video() {
        if [[ -f $VIDEO_URLS ]]; then
            clear
            __
            echo " ${info}order |  video playlist link(s) & titles.${nc}"
            echo -e " ${info}${stars// /*}${nc}\n"
            awk '$0 ~ /^https/{print $0}' "$VIDEO_URLS" \
            | cat -n && {
                __
                cat -n "$VIDEO_TITLES"
            __
            }
            unset {viewUrlInfoPrompt[1],viewUrlInfoPrompt[7]}
            __
            echo "${info}" "${viewUrlInfoPrompt[*]}" "${nc}"
            read -rsn 1 opt
            case "$opt" in
                b|B) __; _CopyVideo ;;
                m|M) _Menu ;;
                d|D) _GetVideo -v ;;
                p|P) _LoadVideo -v ;;
                r|R) _Remove -v ;;
                s|S) _Save -v ;;
            esac
        else
            echo " ${critical}No links in the list${nc}"
            sleep 2 && return
        fi
    }

    __queue() {
        if (($(_GetLinesList -q) > 0)); then
            [[ -f $tmp_dir/1 ]] && rm "$tmp_dir"/1
            clear
            __
            echo " ${info}order |  default playlist link(s) & titles.${nc}"
            echo -e " ${info}${stars// /*}${nc}\n"
            awk '$0 ~ /^https/{print $0}' "$QUEUE" \
            | cat -n && {
            __
            cat -n "$DEFAULTITLES" 2>/dev/null || \
            cat -n "$DEFAULTM3UTITLES"
            __
            }
            while [[ -f $QUEUE ]]; do
                unset {viewUrlInfoPrompt[1],viewUrlInfoPrompt[2],viewUrlInfoPrompt[7]}
                echo "${info}" "${viewUrlInfoPrompt[*]}" "${nc}"
                read -rsn 1 opt
                case "$opt" in
                    m|M)
                        _Menu
                    ;;
                    d|D)
                        __
                        read -rsn 1 -p "${info}"' Download [A]udio, [V]ideo:'"${nc}" get
                        case "$get" in
                            a|A) __; _GetAudio -q ;;
                            v|V) __; _GetVideo -q ;;
                        esac
                    ;;
                    p|P)
                        __
                        read -rsn 1 -p "${info}"' Play [A]udio, [V]ideo?: '"${nc}" play
                        case "$play" in
                            a|A) _LoadAudio -q ;;
                            v|V) _LoadVideo -q ;;
                        esac
                    ;;
                    r|R) _Remove -q ;;
                    s|S)
                        if [[ -f $DEFAULTM3UTITLES \
                        || -f  $DEFAULTITLES ]]; then
                            _Save -q
                        else
                            echo " ${task}${b}Updating playlist titles...${nb}${nc}"
                            _GetMediaTitle -q \
                            | tee -a "$DEFAULTITLES" \
                            | cat -n >/dev/null 2>&1
                            _Save -q
                        fi
                    ;;
                esac
            done
        else
            echo " ${critical}There is nothing to do, Default playlist is empty...${nc}"
            sleep 3
        fi
    }

    case "$1" in
        -a) __audio ;;
        -v) __video ;;
        -q) __queue ;;
    esac
}

_RemoveCrap() {
    # After some tests it appears that a single link copied from a youtube playlist
    # causes the download of the entire playlist.
    # So with sed & perl we cleanup the link to get the direct link to the desir video.
    # Note that this behavior does not appear during a simple viewing/listening.

    LISTS=( "$AUDIO_URLS" "$AUDIO_TITLES" \
            "$VIDEO_URLS" "$VIDEO_TITLES" \
            "$QUEUE" "$DEFAULTITLES" )

    for file in "${LISTS[@]}"; do
        # removing unwanted parts of links, blank lines & duplicates
        sed -i 's/&list.*//;/^\s*$/d' "$file"
        perl -i -ne 'print if ! $a{$_}++' "$file"
    done 2>/dev/null

}

_DeleteUrl() {

    if (( $(_GetLinesList -q) == 0 )); then

        if [[ -n $(find "$tmp_dir" -name "*.m3u") ]]; then
            _CleanTmpDir
            echo " ${critical}All tmp lists removed.${nc}"
            sleep 3
        else
            echo " ${critical}There is nothing to do, no existing tmp lists...${nc}"
            sleep 3
            _Menu
        fi

    else
        __
        sed -i '/^[[:alpha:]]/d' "$QUEUE"
        _CleanTmpDir
        echo " ${critical}All lists cleared...${nc}"
        sleep 3
        _Menu
    fi

}

_CopyAudio() {

    [[ -f $tmp_dir/1 ]] && rm "$tmp_dir"/1

    while (( $(grep "" -c "$QUEUE") > 0 )); do
        __CopyAudioLinks() {
            __
            echo -e " Paste an url to fill the ${info}audio${nc} playlist:\n"
            read -r copyAudioUrl

            if [[ $copyAudioUrl =~ 'playlist?list=' ]]; then

                __
                AudioPlaylistTitle=$(\
                youtube-dl "${ytdlPreset_DW[@]}" -J \
                --flat-playlist "$copyAudioUrl" \
                | jq -r .title \
                )

                printf '%s\n' " ${info}Getting titles & links from playlist: $AudioPlaylistTitle..." \
                "${b} Please be patient.${nb}${nc}"
                youtube-dl --get-title "${ytdlPreset_DW[@]}" "$copyAudioUrl" \
                | tee -a "$AUDIO_TITLES" >> "$DEFAULTITLES"
                _GetYoutubePlaylistUrls -a
                _RemoveCrap

            else

                echo "$copyAudioUrl" >> "$AUDIO_URLS"
                __
                echo " ${info}Testing url...${nc}"
                _RemoveCrap
                copyAudioUrl=$(sed -n '$p' "$AUDIO_URLS")
                youtube-dl -F "${ytdlPreset_DW[@]}" "$copyAudioUrl" > "$YTOP"

                if [[ $? -eq 1 ]]; then
                    __
                    echo -e " ${critical}${b}No format code found!${nb}\n$copyAudioUrl will be removed."
                    echo " ${info}Please visit: $supportedsites${nc}"
                    sed -i '$d' "$AUDIO_URLS"
                    _RemoveCrap
                    sleep 7
                    [[ $(_GetLinesList -a) -eq 0 ]] && _Menu

                else

                    echo "$copyAudioUrl" >> "$QUEUE"
                    echo -e " ${info}Getting audio title...${nc}\n"
                    youtube-dl --get-title "${ytdlPreset_DW[@]}" \
                    "$copyAudioUrl" | tee -a "$AUDIO_TITLES" >> "$DEFAULTITLES"
                    _RemoveCrap

                fi

            fi
        }

        while :; do
            _ResizeWindow
            clear
            __
            [[ -f $AUDIO_URLS ]] && \
            echo " ${info}Audio list:   $(_GetLinesList -a) url(s)${nc}"
            __
            echo -e "                                                    ${mtitle}::AUDIO OPTIONS::${nc}"
            echo -e "                              ┌─────────────────────────────────────────────────────────────┐"
            echo -e "                              │     1) Add audio links            4) Play current list      │"
            echo -e "                              │     2) Download current list      5) View current list      │"
            echo -e "                              │     3) Save playlist as           6) Back to main menu      │"
            echo -e "                              └─────────────────────────────────────────────────────────────┘"
            echo -e "                                                     ${info}${b}Select an item${nb}${nc}"
            __
            read -rsn 1 copyAudioOptions
            case "$copyAudioOptions" in
                1)  __CopyAudioLinks
                    __ ;;
                2)  _GetAudio -a
                    __ ;;
                3)  _Save -a
                    __ ;;
                4)  _LoadAudio -a
                    __ ;;
                5)  _ViewUrlInfo -a
                    __ ;;
                6)  _Menu
                    __ ;;
            esac
        done


    done
}

_CopyVideo() {

    [[ -f $tmp_dir/1 ]] && rm "$tmp_dir"/1

    while (( $(grep "" -c "$QUEUE") > 0 )); do
        __CopyVideoLinks() {
            __
            echo -e " Paste an url to fill the ${info}video${nc} playlist:\n"
            read -r copyVideoUrl

            if [[ $copyVideoUrl =~ 'playlist?list=' ]]; then

                __
                VideoPlaylistTitle=$(\
                youtube-dl "${ytdlPreset_DW[@]}" -J \
                --flat-playlist "$copyVideoUrl" \
                | jq -r .title \
                )

                printf '%s\n' " ${info}Getting titles & links from playlist: $VideoPlaylistTitle..." \
                "${b} Please be patient.${nb}${nc}"
                youtube-dl --get-title "${ytdlPreset_DW[@]}" "$copyVideoUrl" \
                | tee -a "$VIDEO_TITLES" >> "$DEFAULTITLES"
                _GetYoutubePlaylistUrls -v
                _RemoveCrap

            else

                echo "$copyVideoUrl" >> "$VIDEO_URLS"
                __
                echo " ${info}Testing url...${nc}"
                _RemoveCrap
                copyVideoUrl=$(sed -n '$p' "$VIDEO_URLS")
                youtube-dl -F "${ytdlPreset_DW[@]}" "$copyVideoUrl" > "$YTOP"

                if [[ $? -eq 1 ]]; then
                    __
                    echo -e " ${critical}${b}No format code found!${nb}\n$copyVideoUrl will be removed."
                    echo " ${info}Please visit: $supportedsites${nc}"
                    sed -i '$d' "$VIDEO_URLS"
                    _RemoveCrap
                    sleep 7
                    [[ $(_GetLinesList -v) -eq 0 ]] && _Menu

                else

                    echo "$copyVideoUrl" >> "$QUEUE"
                    echo -e " ${info}Getting video title...${nc}\n"
                    youtube-dl --get-title "${ytdlPreset_DW[@]}" \
                    "$copyVideoUrl" | tee -a "$VIDEO_TITLES" >> "$DEFAULTITLES"
                    _RemoveCrap

                fi

            fi
        }

        while :; do
            _ResizeWindow
            clear
            __
            [[ -f $VIDEO_URLS ]] && \
            echo -e " ${info}Video list:   $(_GetLinesList -v) url(s)${nc}\n"
            __
            echo -e "                                                    ${mtitle}::VIDEO OPTIONS::${nc}"
            echo -e "                              ┌─────────────────────────────────────────────────────────────┐"
            echo -e "                              │     1) Add video links            4) Play current list      │"
            echo -e "                              │     2) Download current list      5) View current list      │"
            echo -e "                              │     3) Save playlist as           6) Back to main menu      │"
            echo -e "                              └─────────────────────────────────────────────────────────────┘"
            echo -e "                                                     ${info}${b}Select an item${nb}${nc}"
            __
            read -rsn 1 copyVideoOptions
            case "$copyVideoOptions" in
                1)  __CopyVideoLinks
                    __ ;;
                2)  _GetVideo -v
                    break ;;
                3)  _Save -v
                    __ ;;
                4)  _LoadVideo -v
                    __ ;;
                5)  _ViewUrlInfo -v
                    __ ;;
                6)  _Menu
                    __ ;;
            esac
        done

    done
}

# these are temporary files used in _Choose{Download{Audio,Video},FromPlay}
CHOOSE1="$playlists_dir/temporary_selection.m3u"
CHOOSE2="$playlists_dir/temporary_selection2.m3u"

_mpmIpc() {
	polybar-msg \
	-p $(pgrep --full "$(wmctrl -m | awk '/Name:/{print $2}')"-bar-3) \
	action "#mpm-ipc.hook.0" >/dev/null 2>&1
}

_IfPartsExist() {

    __IfPartsExistInfo() (
        partsDirs=( "$audios_dir" "$videos_dir" )
        clear
        echo -e " Incomplete files in audio/video directories:\n${nc}"
        find "${partsDirs[@]}" -name "*.part" 2>/dev/null \
        | sort -d | sed 's,.*/,,' | cat -n
        __
        echo " ${info}Try again now or later, choose an option.${nc}"
        return
    )

    case "$1" in
        -l)
            mv "$playlists_dir"/"$list"_origin \
            "$playlists_dir"/"$list"
            mv "$titles_dir"/"$list".titles_origin \
            "$titles_dir"/"$list".titles
            __IfPartsExistInfo
        ;;
        -t)
            tempFiles=( "$QUEUE" "$AUDIO_URLS" "$AUDIO_TITLES" \
                        "$VIDEO_URLS" "$VIDEO_TITLES" "$DEFAULTITLES" )

            for f in "${tempFiles[@]}"; do
                mv -f "$f"_origin "$f"
            done 2>/dev/null

            __IfPartsExistInfo
        ;;
    esac

}

_DownloadCompleted() {
    cd "$playlists_dir" || exit 1

    if [[ -n $(find "$audios_dir" "$videos_dir" -name "*.part") ]]; then
        _IfPartsExist -l
    else
        FILES=( "$list" "$list"_origin "$titles_dir"/"$list".titles \
                "$titles_dir"/"$list".titles_origin "$CHOOSE1" "$CHOOSE2" )

        __KeepItOrNot() (
            if [[ $keep_none_empty_playlist = yes ]]; then
                unset {FILES[0],FILES[2]}
                rm -f "${FILES[@]}" 2>/dev/null
            else
                echo " ${critical}keep_none_empty_playlist is set to 'no'.${nc}"
                echo -e " ${info}Please confirm.${nc}\n"
                _Prompt \
                " ${info}Downloads completed but $list is not empty, do you want to KEEP it?: ${nc}" || {
                    rm -f "${FILES[@]}" 2>/dev/null
                    printf '%s\n' " ${critical}$list removed...${nc}"
                    sleep 3
                }
                unset {FILES[0],FILES[2]}
                rm -f "${FILES[@]}" 2>/dev/null
            fi
        )

        # _GetLinesList only counts lines starting with 'https'
        if (( $(_GetLinesList -l) > 0 )); then
            __KeepItOrNot
            _mpmIpc
        else
            printf '%s\n' " ${info}Downloads completed, ${critical}$list is empty... $list removed.${nc}"
            sleep 3
            rm -f "${FILES[@]}" 2>/dev/null
            _mpmIpc
        fi
        [[ $quit_after_task = yes ]] && {
			exit
			_mpmIpc
		} || _mpmIpc && _Menu
    fi
}

_GetMediaTitle() {

    case "$1" in
        -a) LIST="$AUDIO_URLS" ;;
        -l) LIST="$playlists_dir"/"$list" ;;
        -q) LIST="$QUEUE" ;;
        -v) LIST="$VIDEO_URLS" ;;
    esac

    mapfile -t MEDIATITLES < <(grep '^https' "$LIST")

    for line in "${MEDIATITLES[@]}"; do
        youtube-dl \
        --skip-download \
        --get-title \
        "${ytdlPreset_DW[@]}" "$line" 2>/dev/null
    done

}

_GetLinesList() {
    case "$1" in
        -a) FILE="$AUDIO_URLS" ;;
        -l) FILE="$playlists_dir"/"$list" ;;
        -q) FILE="$QUEUE" ;;
        -v) FILE="$VIDEO_URLS" ;;
    esac
    grep -c '^https' "$FILE" 2>/dev/null
}

FFOP="$tmp_dir/ffmpeg_output"

_ConvertAudio() {

    [[ -d "$audios_dir"/"${list%.*}" ]] \
    && cd "$audios_dir"/"${list%.*}" \
    || cd "$audios_dir"

    if [[ -n $default_conversion_format ]]; then
        __
        printf '%s\n' " ${task}Default format set to $default_conversion_format.${nc}"
        __
        printf '%s\n' " ${info}Converting files in ${task}$default_conversion_format${b}...${nb}${nc}"
        _"$default_conversion_format"
    else
        # functions _mp3 _flac _wav & _ogg are in ~/.config/mpm/mpmrc
        __
        printf '%s\n' " ${task}Default format isn't set." \
        " Press Enter to abort conversion.${nc}"
        __
        read -rn1 \
        -p "${info}"' Select an output format [1=mp3] [2=flac] [3=wav] [4=ogg]: '"${nc}" conv

        case "$conv" in
            1)
                __
                printf '%s\n' " ${info}Converting files in ${task}mp3${b}...${nb}${nc}"
                _mp3
            ;;
            2)
                __
                printf '%s\n' " ${info}Converting files in ${task}flac${b}...${nb}${nc}"
                _flac
            ;;
            3)
                __
                printf '%s\n' " ${info}Converting files in ${task}wav${b}...${nb}${nc}"
                _wav
            ;;
            4)
                __
                printf '%s\n' " ${info}Converting files in ${task}ogg${b}...${nb}${nc}"
                _ogg
            ;;
            *)
                __
                printf '%s\n' " ${critical}Conversion aborted...${nc}"
                sleep 3
                clear
            ;;
        esac
    fi

    if [[ -z $(find "$audios_dir" -maxdepth 2 -name "*.webm" ) ]]; then
        __
        printf '%s\n' " ${info}Conversion done.${nc}"
        sleep 2
        clear
    else
        echo ""
    fi

}

SELECTEDTITLES="$titles_dir/selected.titles"

_GetLinkTitle() {
    case "$1" in
        -a) sed -n '1p' "$AUDIO_TITLES" ;;
        -l) sed -n '1p' "$titles_dir"/"$list".titles ;;
        -q) sed -n '1p' "$DEFAULTITLES" ;;
        -s) sed -n '1p' "$SELECTEDTITLES" ;;
        -v) sed -n '1p' "$VIDEO_TITLES" ;;
    esac
}

_DirectVideoDownload() {

    mkdir -p "$videos_dir"/"${list%.*}"
    __
    printf '%s\n' " ${task}Direct download enabled.${nc}"
    __
    cd "$videos_dir"/"${list%.*}" || return
    mapfile -t DIRECT < <(grep '^https' "$playlists_dir"/"$list")

    for line in "${DIRECT[@]}"; do

        printf '%s\n' " ${info}$downloadVideoCounter file(s) left to download." \
        " Downloading: $(_GetLinkTitle -l)${nc}"

        if [[ $line =~ 'youtube.com' && $(_GetLinkTitle -l) =~ '/' ]]; then
            youtube-dl "${ytdlPreset_FS[@]}" \
            "${ytdlPreset_X[@]}" "$line"
        elif [[ $line =~ 'youtube.com' ]]; then
            youtube-dl \
            --output "$(_GetLinkTitle -l).%(ext)s" \
            "${ytdlPreset_X[@]}" "$line"
        else
            youtube-dl \
            --output "$(_GetLinkTitle -l).%(ext)s" \
            "${ytdlPreset_NC[@]}" "$line"
        fi

        ((downloadVideoCounter--))

        sed -i '2d' "$playlists_dir"/"$list"
        sed -i '1d' "$titles_dir"/"$list".titles
        clear

    done

}

_DownloadVideoList() {
    cd "$playlists_dir" || exit 1

    _TitlesListCompare
    local downloadVideoCounter
    downloadVideoCounter=$(grep -c '^https' "$list")

    clear
    cp -f "$list" "$list"_origin 2>/dev/null
    mkdir -p "$videos_dir"/"${list%.*}"

    if [[ $direct_download = yes ]]; then
        _DirectVideoDownload
    else
        __
        printf '%s\n' " ${task}Direct download disabled."
        __
        printf '%s\n' " ${info}Tip: direct download will always pick the best format," \
        " on Youtube webm may be the best one but we'll merge files in mp4.${nc}"
        __
        printf '%s\n' " ${info}[B]ack to download options, choose [S]pecific codes or [D]irect download?:${nc}"
        sleep 0.5 && read -rsn 1 choice
    fi

    case "$choice" in
        b|B) clear; return ;;
        d|D) _DirectVideoDownload ;;
        s|S)
            mapfile -t SELECTEDCODES < <(grep '^https' "$list")

            cd "$videos_dir"/"${list%.*}" || return

            for downvideourl in "${SELECTEDCODES[@]}"; do

                clear
                __
                youtube-dl -F "${ytdlPreset_DW[@]}" "$downvideourl" \
                | awk '$0 !~ /sb|youtube/{print $0}'
                __
                printf '%s\n' " ${info}Choose a format code for $(_GetLinkTitle -l)." \
                " eg: 137+251 for merging, hls-1080p, 22 for single:${nc}"
                read -r code
                clear
                __
                printf '%s\n' " ${info}$downloadVideoCounter file(s) left to download." \
                " Downloading $(_GetLinkTitle -l).${nc}"

                if [[ "$code" =~ '+' && $(_GetLinkTitle -l) =~ '/' ]]; then
                    youtube-dl "${ytdlPreset_FS[@]}" \
                    --format "$code" \
                    "${ytdlPreset_X[@]}" "$downvideourl"
                elif [[ "$code" =~ '+' ]]; then
                    youtube-dl --format "$code" \
                    --output "$(_GetLinkTitle -l).%(ext)s" \
                    "${ytdlPreset_X[@]}" "$downvideourl"
                else
                    youtube-dl --format "$code" \
                    --output "$(_GetLinkTitle -l).%(ext)s" \
                    "${ytdlPreset_NC[@]}" "$downvideourl"
                fi

                sed -i '2d' "$playlists_dir"/"$list"
                sed -i '1d' "$titles_dir"/"$list".titles
                ((downloadVideoCounter--))
                clear

            done

        ;;
    esac

    echo " ${info}All done${nc}"
    sleep 2
    _DownloadCompleted

}

_EditPlaylist() {
    while true; do
        clear
        cd "$playlists_dir" || exit 1
        __
        PS3=""$'\n'"${info}Choose a playlist to edit:${nc} "

        select playlist in $(find . -not -name "default.m3u" -name "*.m3u" \
            -o -name "*.m3u_origin" | sort -d | sed 's,.*/,,'); do
                __
                $MPMEDITOR "$playlist"
                echo -e " ${info}$playlist saved${nc}\n"
                read -rsn 1 \
                -p "${info}"' [C]ontinue editing, [B]ack to menu or [Q]uit.'"${nc}" edit

                case "$edit" in
                    c|C) break ;;
                    b|B) _Menu ;;
                    q|Q)
                        if [[ -f "$AUDIO_URLS" || -f "$VIDEO_URLS" ]]; then
                            _SaveOnExit
                        else
                            clear
                            exit 0
                        fi ;;
                esac
        done
    done
}

_EditMpmConf() {

    $MPMEDITOR "$MPMRC"
    printf '%s\n' " ${info}mpm config saved! New changes active.${nc}"
    source "$MPMRC"
    _Theme "$THEME"
    sleep 3
    clear
    _Menu

}

_GetYoutubePlaylistUrls() {
    __
    case "$1" in
        -a) URLS_INFO="$AUDIO_URLS"
            url="$copyAudioUrl"
        ;;
        -v) URLS_INFO="$VIDEO_URLS"
            url="$copyVideoUrl"
        ;;
    esac

    youtube-dl "${ytdlPreset_DW[@]}" -j "$url" \
    | jq '(.webpage_url)' | sed 's/"//g' \
    | tee -a "$QUEUE" >> "$URLS_INFO"
    sed -i '/playlist/d' {"$QUEUE","$URLS_INFO"}

}

_GetCompleted() {

    cd "$main_dir" || exit 1

    if [[ -n $(find "$audios_dir" "$videos_dir" -name "*.part") ]]; then
        _IfPartsExist -t
    else
        _Prompt -n " ${info}Downloads completed, KEEP playlist?: ${nc}" && {
            __
            echo " ${critical}If it was a temporary list, don't forget to save it.${nc}"
            sleep 4

            tempfiles=( "$QUEUE" "$AUDIO_URLS" "$AUDIO_TITLES" \
                        "$VIDEO_URLS" "$VIDEO_TITLES" "$DEFAULTITLES" )

            for f in "${tempfiles[@]}"; do
                mv -f "$f"_origin "$f"
            done 2>/dev/null

			_mpmIpc
            _Menu

        }

        case "$1" in
            -a)
                if [[ -f "$QUEUE"_origin ]]; then
                    _Remove -q
                else
                    _Remove -a
                fi
            ;;
            -v)
                if [[ -f "$QUEUE"_origin ]]; then
                    _Remove -q
                else
                    _Remove -v
                fi
            ;;
        esac
    fi

}

_DirectVideoDownload() {

    mkdir -p "$videos_dir"/"${list%.*}"
    __
    printf '%s\n' " ${task}Direct download enabled.${nc}"
    __
    cd "$videos_dir"/"${list%.*}" || return
    mapfile -t DIRECT < <(grep '^https' "$playlists_dir"/"$list")

    for line in "${DIRECT[@]}"; do

        printf '%s\n' " ${info}$downloadVideoCounter file(s) left to download." \
        " Downloading: $(_GetLinkTitle -l)${nc}"

        if [[ $line =~ 'youtube.com' && $(_GetLinkTitle -l) =~ '/' ]]; then
            youtube-dl "${ytdlPreset_FS[@]}" \
            "${ytdlPreset_X[@]}" "$line"
        elif [[ $line =~ 'youtube.com' ]]; then
            youtube-dl \
            --output "$(_GetLinkTitle -l).%(ext)s" \
            "${ytdlPreset_X[@]}" "$line"
        else
            youtube-dl \
            --output "$(_GetLinkTitle -l).%(ext)s" \
            "${ytdlPreset_NC[@]}" "$line"
        fi

        ((downloadVideoCounter--))

        sed -i '2d' "$playlists_dir"/"$list"
        sed -i '1d' "$titles_dir"/"$list".titles
        clear

    done

}

_GetVideoDownload() {

    cd "$videos_dir" || exit 1

    mapfile -t VIDEOLINKS < <(grep '^https' "$M3UFILE")
    
    for getVideoUrl in "${VIDEOLINKS[@]}"; do
        __
        youtube-dl -F "${ytdlPreset_DW[@]}" "$getVideoUrl" \
        | awk '$0 !~ /sb|youtube/{print $0}'
        __
        __ChooseFormatMessages
        read -r code
        clear
        __
        __DownloadMessages

        # it seems that only youtube uses merging options
        if [[ "$code" =~ '+' ]]; then
            # downloader presets described in ~/.config/mpm/mpmrc
            # we have to differenciate titles files because of _GetLinkTitle function.
            if [[ $TITLES = "$DEFAULTITLES" ]]; then
                if [[ $(youtube-dl --skip-download --get-title "$getVideoUrl") =~ '/' ]]; then
                    youtube-dl --format "$code" "${ytdlPreset_FS[@]}" \
                    "${ytdlPreset_X[@]}" "$getVideoUrl"
                else
                    youtube-dl --format "$code" \
                    --output "$(_GetLinkTitle -q).%(ext)s" \
                    "${ytdlPreset_X[@]}" "$getVideoUrl"
                fi
            else
                if [[ $(youtube-dl --skip-download --get-title "$getVideoUrl") =~ '/' ]]; then
                    youtube-dl --format "$code" "${ytdlPreset_FS[@]}" \
                    "${ytdlPreset_X[@]}" "$getVideoUrl"
                else
                    youtube-dl --format "$code" \
                    --output "$(_GetLinkTitle -v).%(ext)s" \
                    "${ytdlPreset_X[@]}" "$getVideoUrl"
                fi
            fi
        else
            if [[ $TITLES = "$DEFAULTITLES" ]]; then
                if [[ $(youtube-dl --skip-download --get-title "$getVideoUrl") =~ '/' ]]; then
                    youtube-dl --format "$code" "${ytdlPreset_FS[@]}" \
                    "${ytdlPreset_NC[@]}" "$getVideoUrl"
                else
                    youtube-dl --format "$code" \
                    --output "$(_GetLinkTitle -q).%(ext)s" \
                    "${ytdlPreset_NC[@]}" "$getVideoUrl"
                fi
            else
                if [[ $(youtube-dl --skip-download --get-title "$getVideoUrl") =~ '/' ]]; then
                    youtube-dl --format "$code" "${ytdlPreset_FS[@]}" \
                    "${ytdlPreset_NC[@]}" "$getVideoUrl"
                else
                    youtube-dl --format "$code" \
                    --output "$(_GetLinkTitle -v).%(ext)s" \
                    "${ytdlPreset_NC[@]}" "$getVideoUrl"
                fi
            fi
        fi

        if [[ $M3UFILE = "$VIDEO_URLS" ]]; then
            sed -i '1d' {"$M3UFILE","$TITLES"}
            clear
        else
            sed -i '2d' "$M3UFILE"
            sed -i '1d' "$TITLES"
            clear
        fi

    done

}

_GetVideo() {

    local M3UFILE TITLES

    case "$1" in
        -q)
            __
            if [[ ! -f $DEFAULTITLES && \
                -f $DEFAULTM3UTITLES ]]; then
                cat "$DEFAULTM3UTITLES" > \
                "$DEFAULTITLES"
            elif [[ -f $DEFAULTITLES ]]; then
                printf '%s\n' " ${info}Fetching titles file...${nc}"
                sleep 1
            else
                printf '%s\n' " ${info}Getting titles...${nc}"
                _GetMediaTitle -q > "$DEFAULTITLES"
                clear
            fi
            M3UFILE="$QUEUE"
            TITLES="$DEFAULTITLES"
        ;;
        -v)
            __
            [[ $(_GetLinesList -v) -eq 0 ]] && {
                echo " ${critical}No links in the list${nc}"
                sleep 2
                _CopyVideo
            }
            M3UFILE="$VIDEO_URLS"
            TITLES="$VIDEO_TITLES"
        ;;
    esac

    cp -f "$M3UFILE" "$M3UFILE"_origin
    cp -f "$TITLES" "$TITLES"_origin
    clear

    __ChooseFormatMessages() (
        [[ $M3UFILE = "$QUEUE" ]] && {
            printf '%s\n' " ${info}Choose a format code for $(_GetLinkTitle -q)." \
            " eg: 137+251 (video+audio), hls-1080p, 22 for single:${nc}"
        }
        [[ $M3UFILE = "$VIDEO_URLS" ]] && {
            printf '%s\n' " ${info}Choose a format code for $(_GetLinkTitle -v)." \
            " eg: 137+251 (video+audio), hls-1080p, 22 for single:${nc}"
        }
    )

    __DownloadMessages() (
        [[ $TITLES = "$DEFAULTITLES" ]] && {
            printf '%s\n' " ${info}$(_GetLinesList -q) video file(s) left to download." \
            " Downloading:  $(_GetLinkTitle -q)${nc}"
        }
        [[ $TITLES = "$VIDEO_TITLES" ]] && {
            printf '%s\n' " ${info}$(_GetLinesList -v) video file(s) left to download." \
            " Downloading:  $(_GetLinkTitle -v)${nc}"
        }
    )

    cd "$videos_dir" || exit 1

    _GetVideoDownload && {

    echo -e " ${info}Done.\n${nc}"
    sleep 2
    _GetCompleted -v
    }
}

_LoadAudio() {
    # change mpv settings in ~/.config/mpmrc
    local M3UFILE

    __AdviceAudio() (
        clear
        __; rm -f "$tmp_dir"/download 2>/dev/null
        echo "${critical}Tip: You may want to put this in your mpv.conf:"
        printf '%s\n' "term-playing-msg='Tiltle: \${media-title}'"
        echo -e "Otherwise press I in mpv for more infos.${nc}\n"
        printf '%s\n' " ${info}Playing ${M3UFILE##*/}${nc}"
    )

    # change mpv settings in ~/.config/mpm/mpmrc
    case "$1" in
        -a)
            if [[ -f $AUDIO_URLS ]]; then
                M3UFILE="$AUDIO_URLS"
                __AdviceAudio
                _MpvAudioOptions
                _Prompt " ${info}Temporary audio list still exist, KEEP it?: ${nc}" || {
                    rm {"$AUDIO_URLS","$AUDIO_TITLES"}
                }
                _Menu
            else
                echo " ${critical}No links in the list${nc}"
                sleep 2 && _CopyAudio
            fi
        ;;
        -c)
            M3UFILE="$CHOOSE1"
            __AdviceAudio
            _MpvAudioOptions
            rm "$CHOOSE1"
            [[ $quit_after_task = yes ]] && exit || _Menu
        ;;
        -l)
            M3UFILE="$list"
            __AdviceAudio
            _MpvAudioOptions
            [[ $quit_after_task = yes ]] && exit || _Menu
        ;;
        -q)
            M3UFILE="$QUEUE"
            __AdviceAudio
            _MpvAudioOptions
            _Menu
        ;;
    esac

}

_LoadVideo() {

    local M3UFILE

    case "$1" in
        -c) M3UFILE="$CHOOSE1" ;;
        -l) M3UFILE="$list" ;;
        -q) M3UFILE="$QUEUE" ;;
        -v)
            if [[ -f $VIDEO_URLS ]]; then
                M3UFILE="$VIDEO_URLS"
            else
                echo " ${critical}No links in the list${nc}"
                sleep 2 && _CopyVideo
            fi
        ;;
    esac

    clear
    __
    echo "${critical}Tip: You may want to put this in your mpv.conf:"
    printf '%s\n' "term-playing-msg='Tiltle: \${media-title}'"
    echo -e "Otherwise press I in mpv for more infos.${nc}\n"
    printf '%s\n' " ${info}Playing ${M3UFILE##*/}${nc}"

    # change mpv settings in ~/.config/mpm/mpmrc
    _MpvVideoOptions

    if [[ -f "$VIDEO_URLS" ]]; then
        clear
        __
        echo " ${critical}Did you launched video(s) from the default list?"
        echo " or from option 4) Load a playlist?"
        echo " If so, type ${b}${task}Y${nb} ${critical}to preserve temporary video list${nc}"
        __

        declare -a TMP=( "$VIDEO_URLS" "$VIDEO_TITLES" "$FFOP" "$YTOP" "$CHOOSE1" )

        _Prompt " ${info}Temporary video list still exist, KEEP it?:${nc}" || {
            rm -f "${TMP[@]}" 2>/dev/null
            echo " ${critical}Temporary video list removed...${nc}"
            sleep 3
        }
        __
    elif [[ -f $CHOOSE1 ]]; then
        rm -f "$CHOOSE1" "$list"_origin 2>/dev/null
        [[ $quit_after_task = yes ]] && exit || _Menu
    else
        rm -f "${TMP[@]}" 2>/dev/null
        [[ $quit_after_task = yes ]] && exit || _Menu
    fi
    _Menu
}

_TitlesListCompare() {

    # first test if "myplaylist".titles exist.
    if [[ -f $titles_dir/$list.titles ]]; then

        if (( $(grep "" -c "$titles_dir/$list.titles") \
            != $(_GetLinesList -l) )); then
            __
            echo -e " ${task}${b}Updating titles...please wait.${nb}${nc}\n"
            _GetMediaTitle -l > "$titles_dir"/"$list".titles
            clear
        fi
        __
        echo -e " ${info}Titles for $list.${nc}\n"
        cat -n "$titles_dir"/"$list".titles
        __

    else

        echo -e " ${task}${b}Getting titles...please wait.${nb}${nc}\n"
        _GetMediaTitle -l > "$titles_dir"/"$list".titles
        clear
        __
        cat -n "$titles_dir"/"$list".titles
        __

    fi

}

_ChooseFromPlay() {
    cd "$playlists_dir" || exit 1

    clear
    _TitlesListCompare

    [[ -f $CHOOSE1 ]] && rm "$CHOOSE1"

    read -rsn 1 \
    -p "${info}"" [B]ack to menu, Play all items as [A]udio, [V]ideo or ${b}[S]elect:${nb} ""${nc}" choice
    case "$choice" in
        a|A) _LoadAudio -l ;;
        b|B) _Menu ;;
        v|V) _LoadVideo -l ;;
        s|S)
            __
            IFS=","
            read -ra array \
            -p " ${info}"'Enter links numbers separeted by comma, eg: 3,1,5: '"${nc}"

            for i in "${array[@]}"; do
                ((i++))
                sed -n "${i}p" "$list" >> "$CHOOSE1"
            done

            # if we don't unset IFS all other functions will be messed up!
            unset IFS
            __
            read -rsn 1 -p "${info}"' load [A]udio, [V]ideo: '"${nc}" load
            case "$load" in
                a|A)
                    _LoadAudio -c
                ;;
                v|V)
                    clear
                    _LoadVideo -c
                ;;
            esac
        ;;
    esac
    _Menu
}

_UpdateSelected() {

    cd "$playlists_dir" || exit 1
    # let's remove downloaded links from the original file
    # and sending the other ones in a second temporary file...
    for line in $(grep '^https' "$CHOOSE1"); do
        grep -v "${line}" "$list" >> "$CHOOSE2"
    done
    unset line

    # ...that we now rename with the original file name.
    mv -f "$CHOOSE2" "$list"
    rm "$CHOOSE1"

    cd "$titles_dir" || exit 1
    __
    echo -e " ${task}${b}Refreshing titles...please wait.${nb}${nc}\n"
    _GetMediaTitle -l > "$titles_dir"/"$list".titles
    rm "$SELECTEDTITLES"
    clear

}

_GetSelected() {
    # we don't quote here because yd-dlp will fail.
    for i in ${array[*]}; do
        ((i++))
        sed -n "${i}p" "$playlists_dir"/"$list" \
        >> "$CHOOSE1"
    done
    unset i

    for t in "${array[@]}"; do
        sed -n "${t}p" "$titles_dir"/"$list.titles" \
        >> "$SELECTEDTITLES"
    done
    unset t
}

_ChooseDownloadAudio() {

    cd "$playlists_dir" || exit 1
    clear
    _TitlesListCompare

    cp -f "$list" "$list"_origin
    mkdir -p "$audios_dir"/"${list%.*}"

    IFS=","
    read -ra array \
    -p " ${info}Enter links numbers separeted by comma, eg: 3,1,5: ${nc}"

    clear
    cd "$audios_dir"/"${list%.*}" || exit 1

    local chooseAudioCounter
    chooseAudioCounter="${#array[*]}"

    _GetSelected

    __ChooseDownloadAudioMessage() (
        printf '%s\n' " ${info}$chooseAudioCounter file(s) left to downloads.${nc}" \
        " Downloading: $(_GetLinkTitle -s)${nc}"
    )

    mapfile -t SELECTEDAUDIO < <(grep '^https' "$CHOOSE1")

    for url in "${SELECTEDAUDIO[@]}"; do

        if [[ $direct_download = yes ]] && \
            [[ $(youtube-dl -F "${ytdlPreset_DW[@]}" "$url" \
            | grep '^251') ]]; then

            printf '%s\n' " ${task}Direct download enabled.${nc}"
            __
            __ChooseDownloadAudioMessage
            youtube-dl --output "$(_GetLinkTitle -s).%(ext)s" \
            --format 251 "${ytdlPreset_NC[@]}" "$url"

        elif [[ $direct_download = no ]] && [[ $url =~ 'youtube.com' ]]; then
            __
            printf '%s\n' " ${task}Direct download disabled.${nc}"
            __
            youtube-dl -F "${ytdlPreset_DW[@]}" "$url" \
            | awk '/audio only|PROTO|^[-]/ {sub("^[sb*]",""); print $0}'
            __
            printf '%s\n' " ${info}Choose a format code for: $(_GetLinkTitle -s)${nc}"
            read -r code
            clear
            __
            __ChooseDownloadAudioMessage
            youtube-dl --output "$(_GetLinkTitle -s).%(ext)s" \
            --format "$code" "${ytdlPreset_NC[@]}" "$url"

        else

            youtube-dl -F "${ytdlPreset_DW[@]}" "$url"
            printf '%s\n' " ${info}Choose a format code for: $(_GetLinkTitle -s)${nc}"
            read -r code
            clear
            __
            __ChooseDownloadAudioMessage
            sleep 0.5
            youtube-dl --output "$(_GetLinkTitle -s).%(ext)s" \
            --format "$code" "${ytdlPreset_NC[@]}" "$url"

        fi

        sed -i '1d' "$SELECTEDTITLES"
        ((chooseAudioCounter--))
        clear

    done

    _UpdateSelected
    # if we don't unset IFS other functions will be messed up!
    unset IFS

    clear
    echo -e " ${info}Done${nc}\n"
    clear

    cd "$audios_dir"/"${list%.*}" || exit 1

    if [[ -n $(find "$audios_dir"/"${list%.*}" -iname "*.webm") ]]; then

        echo " ${critical}ADVISORY: if you choose conversion, all downloaded webm"
        echo -e " files will be converted in the chosen format.${nc}\n"
        find . -iname "*.webm" | sed 's,.*/,,'

        if [[ $automatic_audio_conversion = yes ]]; then
            __
            printf '%s\n' " ${task}Automatic audio conversion enabled.${nc}"
            sleep 2
            _ConvertAudio && _DownloadCompleted
        else
            __
            _Prompt " ${info}Do you wish to convert them?: ${nc}" || {
                _DownloadCompleted
            }
            _ConvertAudio && _DownloadCompleted
        fi

    else
        _DownloadCompleted
    fi

}

_ChooseDirectVideoDownload() {

    _GetSelected
    clear
    cd "$videos_dir"/"${list%.*}" || exit 1

    mapfile -t DIRECT < <(grep '^https' "$CHOOSE1")

    for line in "${DIRECT[@]}"; do

        if [[ $direct_download = yes ]]; then
            printf '%s\n' " ${task}Direct download enabled.${nc}"
        else
            printf '%s\n' " ${task}Download method = direct.${nc}"
        fi
        __
        printf '%s\n' " ${info}$chooseVideoCounter file(s) left to downloads.${nc}" \
        " Downloading: $(_GetLinkTitle -s)${nc}"

        if [[ $line =~ 'youtube.com' && $(_GetLinkTitle -s) =~ '/' ]]; then
            # downloader presets described in ~/.config/mpm/mpmrc
            youtube-dl "${ytdlPreset_FS[@]}" \
            "${ytdlPreset_X[@]}" "$line"
            clear
        elif [[ $line =~ 'youtube.com' ]]; then
            youtube-dl \
            --output "$(_GetLinkTitle -s).%(ext)s" \
            "${ytdlPreset_X[@]}" "$line"
        else
            youtube-dl \
            --output "$(_GetLinkTitle -s).%(ext)s" \
            "${ytdlPreset_NC[@]}" "$line"
            clear
        fi

        sed -i '1d' "$SELECTEDTITLES"
        ((chooseVideoCounter--))
        clear

    done

    unset line
    echo " ${info}All done${nc}"
    sleep 2

}

_ChooseDownloadVideo() {

    cd "$playlists_dir" || exit 1
    clear
    _TitlesListCompare

    cp -f "$list" "$list"_origin
    mkdir -p "$videos_dir"/"${list%.*}"

    IFS=","
    read -ra array \
    -p " ${info}Enter links numbers separeted by comma, eg: 3,1,5: ${nc}"

    clear

    local chooseVideoCounter="${#array[*]}"

    if [[ $direct_download = yes ]]; then
        _ChooseDirectVideoDownload
    else
        __
        printf '%s\n' " ${info}Tip: direct download will always pick the best format," \
        " on Youtube webm may be the best one but we'll merge files in mp4." \
        " Choose [S]pecific codes or [D]irect download?:\n${nc}"
        read -rsn 1 choice
    fi

    case "$choice" in
        d|D) _ChooseDirectVideoDownload ;;
        s|S)
            _GetSelected

            mapfile -t CHOSENCODES < <(grep '^https' "$CHOOSE1")

            cd "$videos_dir"/"${list%.*}" || exit 1

            for url in "${CHOSENCODES[@]}"; do

                if [[ $url =~ 'youtube.com' ]]; then
                    __
                    youtube-dl -F "${ytdlPreset_DW[@]}" "$url" \
                    | awk '$0 !~ /sb|youtube/{print $0}'
                else
                    youtube-dl -F "${ytdlPreset_DW[@]}" "$url"
                fi

                __
                printf '%s\n' " ${info}Choose a format code for: $(_GetLinkTitle -s)" \
                " eg: 137+251 for merging, hls-1080p, 22 for single:${nc}"
                read -r code
                sleep 0.5
                clear
                printf '%s\n' " ${info}$chooseVideoCounter file(s) left to downloads." \
                " Downloading: $(_GetLinkTitle -s)${nc}"
                if [[ $line =~ 'youtube.com' && $(_GetLinkTitle -s) =~ '/' ]]; then
                    # downloader presets described in ~/.config/mpm/mpmrc
                    youtube-dl "${ytdlPreset_FS[@]}" \
                    "${ytdlPreset_X[@]}" "$line"
                    # clear
                elif [[ $line =~ 'youtube.com' ]]; then
                    youtube-dl \
                    --output "$(_GetLinkTitle -s).%(ext)s" \
                    "${ytdlPreset_X[@]}" "$line"
                    # clear
                else
                    youtube-dl \
                    --output "$(_GetLinkTitle -s).%(ext)s" \
                    "${ytdlPreset_NC[@]}" "$line"
                    # clear
                fi

                sed -i '1d' "$SELECTEDTITLES"
                # sed -i '2d' "$CHOOSE1"
                ((chooseVideoCounter--))
                clear

            done

            echo " ${info}All done${nc}"
            sleep 2
        ;;
    esac

    _UpdateSelected

    # if we don't unset IFS other functions will be messed up!
    unset IFS

    clear
    _DownloadCompleted

}

_LoadPlaylistMenu() {

    while :; do

        _ResizeWindow
        __
        [[ $direct_download = yes ]] && printf '%s\n' " ${task}Direct download enabled.${nc}"
        __
        echo " ${info}$list: $(grep -c '^https' "$list") url(s).${nc}"
        __
        echo -e "                                                  ${mtitle}::DOWNLOAD OPTIONS::${nc}"
        echo -e "                                  ┌───────────────────────────────────────────────────┐"
        echo -e "                                  │     1) Choose playlist links & download ${info}audio${nc}     │"
        echo -e "                                  │     2) Choose playlist links & download ${info}video${nc}     │"
        echo -e "                                  │     3) Download whole playlist as ${info}audio${nc} files     │"
        echo -e "                                  │     4) Download whole playlist as ${info}video${nc} files     │"
        echo -e "                                  │     5) Back to main menu                          │"
        echo -e "                                  └───────────────────────────────────────────────────┘"
        echo -e "                                                    ${info}${b}Select an item${nb}${nc}"
        __
        read -rsn 1 options
        case "$options" in
            1) _ChooseDownloadAudio ;;
            2) _ChooseDownloadVideo ;;
            3) _GetAudio -l ;;
            4) _DownloadVideoList ;;
            5) _Menu ;;
        esac
    done

}

_LoadPlaylist() {
    cd "$playlists_dir" || exit 1

    [[ -z $(find . -type f -not -name "default.m3u" -name "*.m3u") ]] && {
        clear; __
        printf '%s\n' " ${critical}No playlist found!${nc}" \
        " ${task}First make a temporary list using options 1 or 2," \
        " save it as wathever you like, then come back to play/download it.${nc}"
        sleep 8 && return

    }

    for dotM3uFile in $(find . -type f -name "*.m3u"); do
        [[ -f "$dotM3uFile"_origin ]] \
        && mv "$dotM3uFile"_origin "$dotM3uFile"
    done

    clear
    touch 1_Back_to_menu
    __

    PS3=""$'\n'"${info}Select a playlist to load or hit 1) for main menu:${nc} "
    select list in $(find . -type f -not -name "default.m3u" \
        | sort -d | sed 's,.*/,,'); do

        [[ $list = 1_Back_to_menu ]] && rm 1_Back_to_menu && break

        [[ $(_GetLinesList -l) -eq 0 ]] && {
            echo " ${critical}No links found in $list (empty or does not contains #EXTM3U header)."
            echo " You can edit and fix it in option 8) Edit a playlist.${nc}"
            sleep 8
            break
        }

        rm 1_Back_to_menu
        clear
        __
        printf '%s\n' " ${info}Choose an option for${nc} $list:"
        __
        read -rn 1 -p "${info}"' [D]ownload, [P]lay, [V]iew titles: '"${nc}" submenu
        __
        case "$submenu" in
            d|D) clear; _LoadPlaylistMenu ;;
            p|P) _ChooseFromPlay ;;
            v|V)
                clear
                _TitlesListCompare
                read -rn 1 \
                -p "${info}"' [B]ack to menu, [D]ownload, [P]lay: '"${nc}" loadPlaylistOptions
                __
                case "$loadPlaylistOptions" in
                    b|B) return ;;
                    d|D) clear; _LoadPlaylistMenu ;;
                    p|P) _ChooseFromPlay ;;
                    *)
                        __
                        printf '%s\n' " ${critical}Wrong option...${nc}"
                        sleep 2
                        return
                    ;;
                esac
            ;;
            *)
                __
                printf '%s\n' " ${critical}Wrong option...${nc}"
                sleep 2
                return
            ;;
        esac

    done
}

_ReplaceSpaces() {

    case "$1" in
        -l)
            find "$AUDIOS" "$VIDEOS" -maxdepth 1 \
            -type d -name "* *" -exec \
            bash -c '
                for f in "$@"; do
                    n="${f##*/}"
                    mv -nv "$f" "${f%/*}/${n// /_}"
                done >/dev/null 2>&1
            ' dummy {} +
        ;;
        -s)
            find "$playlists_dir" "$titles_dir" -maxdepth 1 \
            -type f -name "* *" -exec \
            bash -c '
                for f in "$@"; do
                    n="${f##*/}"
                    mv -nv "$f" "${f%/*}/${n// /_}"
                done >/dev/null 2>&1
            ' dummy {} +
        ;;
    esac

}

_LoadLocal() {

    local AUDIOS VIDEOS zic vid
    # getting the right paths for french env too...
    # we use -maxdepth 2 in case our directories are in subdirectories.
    AUDIOS=$(find "$HOME" -maxdepth 2 -type d -name "Music" -o -name "Musique")
    VIDEOS=$(find "$HOME" -maxdepth 2 -type d -name "Videos" -o -name "Vidéos")
    zic=$(echo "$AUDIOS" | awk -F"/" '{print $NF}')
    vid=$(echo "$VIDEOS" | awk -F"/" '{print $NF}')

    loadPrompt=("[1] Audio dir, " "[2] Audio files, " \
                "[3] Video dir or " "[4] Video files?: ")
                
    printf '%s' " ${info}Play: ${loadPrompt[*]}${nc}"
    
    read -rsn 1 loadChoice
    case "$loadChoice" in
        1)
            _ReplaceSpaces -l
            clear
            __
            echo -e " ${info}Directories in $AUDIOS: ${nc}\n"
            PS3=""$'\n'"${info}Your selection number: ${nc}"
            select dir in $(find -L "$AUDIOS" -maxdepth 1 -type d -not -name \
                "$zic" | sort | sed 's,.*/,,'); do

                if [[ $(find "$AUDIOS"/"$dir" -type d -empty) ]]; then
                    __
                    echo " ${critical}$dir is empty. Wait and try again...${nc}"
                    sleep 4
                    break
                else
                    # checking for content in linked directories.
                    [[ -z $(command ls "$AUDIOS"/"$dir") ]] && {
                        __
                        echo " ${critical}This symlink points to an empty directory!"
                        echo " Wait and try again...${nc}"
                        sleep 4
                        break
                    }

                    clear
                    mpv --no-video "$AUDIOS"/"$dir"/*
                    break

                fi

            done
        ;;
        2)
            "$FILEMANAGER" "$AUDIOS"; _Menu
        ;;
        3)
           _ReplaceSpaces -l
            clear
            __
            echo -e " ${info}Directories in $VIDEOS: ${nc}\n"
            PS3=""$'\n'"${info}Your selection number: ${nc}"
            select dir in $(find -L "$VIDEOS" -maxdepth 1 -not -name \
                "$vid" | sort | sed 's,.*/,,'); do

                if [[ $(find "$VIDEOS"/"$dir" -type d -empty) ]]; then
                    __
                    echo " ${critical}$dir is empty. Wait and try again...${nc}"
                    sleep 4
                    break
                else

                    [[ -z $(command ls "$VIDEOS"/"$dir") ]] && {
                        __
                        echo " ${critical}This symlink points to an empty directory!"
                        echo " Wait and try again...${nc}"
                        sleep 4
                        break
                    }

                    clear
                    mpv "$VIDEOS"/"$dir"/*
                    break

                fi

            done
        ;;
        4)
            "$FILEMANAGER" "$VIDEOS"; _Menu
        ;;

    esac

}

_SaveList() {
    cd "$playlists_dir" || exit 1
    cp -f "$CURRENT_LIST" "$list"
    cp -f "$CURRENT_TITLES" "$titles_dir"/"$list".titles 2>/dev/null

    sed -i '1s/^/#EXTM3U\n/' "$list"
    sed -i '/^[[:alpha:]]/d' "$CURRENT_LIST"

    (( $(grep -c -w '#EXTM3U' "$list") > 1 )) \
        && sed -i '1d' "$list"

    if [[ $CURRENT_LIST = "$QUEUE" ]]; then
        __
        printf '%s\n' " ${info}default list saved as $list${nc}"
        _mpmIpc
    else
        rm {"$CURRENT_LIST","$CURRENT_TITLES"}
        __
        printf '%s\n' " ${info}${CURRENT_LIST##*/} saved as $list${nc}"
        _mpmIpc
    fi

    sleep 3
}

_SaveCheck() {
    clear
    cd "$playlists_dir" || exit 1

    local listTotal
    listTotal=$(find . -not -name "default.m3u" -name "*.m3u" \
    -o -name "*.m3u_origin" | sort -d | sed 's,.*/,,' | wc -l)
    __
    PS3=""$'\n'" ${info}Available playlists (type ${task}$((listTotal + 1)) ${info}to create a new one):${nc} "
    select list in $(find . -not -name "default.m3u" -name "*.m3u" \
        -o -name "*.m3u_origin" | sort -d | sed 's,.*/,,'); do

        [[ $REPLY != $((listTotal + 1)) ]] && {

            if [[ $(find . -name "${list}") ]]; then
                __
                _Prompt -n " ${critical}$list already exists! Overwrite it?: ${nc}" && {
                    _SaveList && break
                }
                __
                read -rp "${info}"' Save playlist as (do not use extension): '"${nc}" list
                list="$list.m3u"
                [[ -f $list ]] && {
                    __
                    _Prompt -n " ${critical}$list ALREADY exists! Overwrite it?: ${nc}" && {
                        _SaveList && break
                    }
                    break
                }
                _SaveList && break
            else
                __
                printf '%s\n' " ${critical}Wrong entry $REPLY, try again...${nc}"
                sleep 4
                break
            fi

        }

        __
        read -rp "${info}"' Save the new playlist as (do not use extension): '"${nc}" list
        list="$list.m3u"
        [[ -f $list ]] && {
            __
            _Prompt -n " ${critical}$list ALREADY exists! Overwrite it?: ${nc}" && {
                _SaveList && break
            }
            break
        }
        _SaveList && break

    done
}

_Save() {

    cd "$playlists_dir" || exit 1

    case "$1" in
        -a)
            if [[ -f $AUDIO_URLS ]]; then
                CURRENT_LIST="$AUDIO_URLS"
                CURRENT_TITLES="$AUDIO_TITLES"
                _SaveCheck
                _ReplaceSpaces -s
            else
                echo -e " ${critical}No links in the list${nc}"
                sleep 2
                _CopyAudio
            fi
        ;;
        -q)
            CURRENT_LIST="$QUEUE"
            if [[ -f $DEFAULTITLES ]]; then
                CURRENT_TITLES="$DEFAULTITLES"
            else
                CURRENT_TITLES="$DEFAULTM3UTITLES"
            fi
            _SaveCheck
            _ReplaceSpaces -s
        ;;
        -v)
            if [[ -f $VIDEO_URLS ]]; then
                CURRENT_LIST="$VIDEO_URLS"
                CURRENT_TITLES="$VIDEO_TITLES"
                _SaveCheck
                _ReplaceSpaces -s
            else
                echo -e " ${critical}No links in the list${nc}"
                sleep 2
                _CopyVideo
            fi
        ;;
    esac
    _Menu
}

_Remove() {

    case "$1" in
        -a) rm -f $AUDIO_{URLS,TITLES} \
            {"$AUDIO_URLS"_origin,"$AUDIO_TITLES"_origin}
            __
            echo " ${critical}Audio list removed...${nc}"
            sleep 3
        ;;
        -q) sed -i '/^[[:alpha:]]/d' "$QUEUE"
            rm -f {"$QUEUE"_origin,"$tmp_dir"/1} 2>/dev/null
            rm -f {"$DEFAULTITLES"_origin,"$DEFAULTITLES"} 2>/dev/null
            rm -f "$DEFAULTM3UTITLES" 2>/dev/null
            __
            echo " ${critical}Default list cleared...${nc}"
            sleep 3
        ;;
        -v) rm -f $VIDEO_{URLS,TITLES} \
            {"$VIDEO_URLS"_origin,"$VIDEO_TITLES"_origin}
            __
            echo " ${critical}Video list removed...${nc}"
            sleep 3
        ;;
    esac

    _Menu
}

_SaveRemove() {

    cd "$playlists_dir" || exit 1

    saveRemovePrompts=( "[B]ack to menu," "Save [D]efault," "Save [A]udio," \
                        "Save [V]ideo," "[R]emove a playlist." )

    if [[ -f $AUDIO_URLS ]] && [[ -f $VIDEO_URLS ]]; then

        if (( $(_GetLinesList -q) < 1 )); then
            unset saveRemovePrompts[1]
            echo "${info}" "${saveRemovePrompts[*]}" "${nc}"
            __
        else
            echo "${info}" "${saveRemovePrompts[@]}" "${nc}"
            __
        fi

    elif [[ -f $AUDIO_URLS ]]; then

        if (( $(_GetLinesList -q) < 1 )); then
            unset {saveRemovePrompts[1],saveRemovePrompts[3]}
            echo "${info}" "${saveRemovePrompts[*]}" "${nc}"
        else
            unset saveRemovePrompts[3]
            echo "${info}" "${saveRemovePrompts[*]}" "${nc}"
            __
        fi

    elif [[ -f $VIDEO_URLS ]]; then

        if (( $(_GetLinesList -q) < 1 )); then
            unset {saveRemovePrompts[1],saveRemovePrompts[2]}
            echo "${info}" "${saveRemovePrompts[*]}" "${nc}"
        else
            unset saveRemovePrompts[2]
            echo "${info}" "${saveRemovePrompts[*]}" "${nc}"
            __
        fi

    elif (( $(_GetLinesList -q) < 1 )); then
        echo -e " ${critical}Nothing to save, maybe remove a playlist?${nc}\n"
        unset {saveRemovePrompts[1],saveRemovePrompts[2],saveRemovePrompts[3]}
        echo "${info}" "${saveRemovePrompts[*]}" "${nc}"
        __
    else
        unset {saveRemovePrompts[2],saveRemovePrompts[3]}
        echo "${info}" "${saveRemovePrompts[@]}" "${nc}"
        __
    fi

    read -rsn 1 opt
    case "$opt" in
        a|A) _Save -a ;;
        b|B) _Menu ;;
        d|D)
            rm -f "$tmp_dir"/1 2>/dev/null
            _Save -q
        ;;
        r|R)
            clear; __
            PS3=""$'\n'" ${info}Choose a playlist to remove:${nc} "
            __
            select m3ufile in $(find "$playlists_dir" -not -name "default.m3u" \
                -name "*.m3u" -o -name "*.m3u_origin" \
                | sort -d | sed 's,.*/,,'); do
                __
                _Prompt -n \
                " ${critical}Are you sure you want to remove $m3ufile?: ${nc}" && {
                    rm {"$m3ufile","$titles_dir"/"$m3ufile".titles}
                    __
                    echo " ${critical}$m3ufile removed.${nc}"
                    _mpmIpc
                    sleep 3
                    break
                }
                __
                echo " ${info}$m3ufile preserved"
                sleep 2
                break
            done
        ;;
        v|V) _Save -v ;;
    esac
    _Menu
}

_CleanTmpDir() {
    if (( $(_GetLinesList -q) > 0 )); then

        [[ -f $DEFAULTITLES ]] && \
        cp "$DEFAULTITLES" "$DEFAULTM3UTITLES"

    elif [[ -f $DEFAULTM3UTITLES ]]; then
        rm -f "$DEFAULTM3UTITLES"
    fi
    rm -f {"$tmp_dir"/*,"$playlists_dir"/1_Back_to_menu} 2>/dev/null
}

## avoids running multiple instances
mpvmenu=$(basename $0)
pids=($(pidof -x $mpvmenu))

[[ ${#pids[@]} -gt 1 ]] && {
    notify-send -t 0 -u critical "mpm is already running..."
    exit
}

HELP="$SCRIPTDIR/mpv-playlists-manager/help"

_LaunchMpm() {
    clear
    _Prompt " ${info}Launch mpm_test? ${nc}" || {
        exit
    }
    _CheckDependencies "${@}"
}

case "$1" in
    -c) $MPMEDITOR "$MPMRC" && _LaunchMpm "$@";;
    -e) _EditPlaylist ;;
    -l) _LoadPlaylist ;;
    -p) _LoadLocal ;;
    -v) echo "mpm $VERSION" && _LaunchMpm "$@";;
    -h|--help) less "$HELP" && _LaunchMpm "$@";;
esac

_CheckDependencies "${@}"
