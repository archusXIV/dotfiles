#!/bin/bash

# Author: Barret E (2020-23) <archus@protonmail.con>
# https://github.com/archusXIV/dotfiles
#
# Yet Another Updates Manager Script for Arch Linux based systems.
# Checks for updates, lists them in a readable file, update your polybar module.
# timeshift is used to create a snapshot before update procedure

: "${XDG_RUNTIME_DIR:-/run/user/1000}"

ARCH="$XDG_RUNTIME_DIR/archlinux.list"
AUR="$XDG_RUNTIME_DIR/aur.list"
ARCHAUR="$XDG_RUNTIME_DIR/combined.list"

WM=$(wmctrl -m | awk '/Name:/{print $2}')
BARPID=$(pgrep --full "$WM"-bar-1)

declare -a DEPS=( "checkupdates" "polybar" "reflector" "yay" "wmctrl" )

nocolor=$'\e[0m';
red=$'\e[0;31m';
green=$'\e[0;32m';

_PolybarHook() {
    polybar-msg -p "$BARPID" \
    action "#updates-ipc.hook.0" >/dev/null 2>&1
}

_CheckUpdates() {

    local country
    country=$(curl --fail -s https://ipapi.co/country)

    # checking dependencies
    for deps in "${DEPS[@]}"; do
        [[ -z $(command -v "$deps") ]] && exit 127
    done

    # avoids running multiple instances
    [[ $(pidof -x updates-manager | wc | awk '{print $2}') -gt 2 ]] && exit

    while true; do

        touch {"$ARCH","$AUR","$ARCHAUR"}
        sleep 0.5

        sudo reflector \
        --country "$country" \
        --latest 10 \
        --age 24 \
        --protocol https \
        --sort rate \
        --save "$MIRR" >/dev/null 2>&1

        # because we want to check out the updates list.
        checkupdates | tee "$ARCH" > "$ARCHAUR"

        if (( $(yay -Qum 2>/dev/null | wc -l) > 0 )); then
            sleep 1.5s
            yay -Qum | tee "$AUR" >> "$ARCHAUR"

            # purge combined.list from possible duplicates.
            sed -i '/^::/d;/^\s/g;/^\s*$/d' "$ARCHAUR"
            perl -i -ne 'print if ! $x{$_}++' "$ARCHAUR" >/dev/null 2>&1
        fi

        polybar-msg -p "$(pgrep --full "$WM"-bar-1)" \
        action "#updates-ipc.hook.0" >/dev/null 2>&1
        notify-send "There is $(grep "" -c "$ARCHAUR") available updates."

        sleep 3588s

    done &
}

_YesNoPrompt() {
    # stolen from budRich
    # with this we can't answer anything else than yes or no.
    local screenprompt key default options status

    default=y
    options=yn

    [[ $1 =~ -([${options}]) ]] \
        && default="${BASH_REMATCH[1]}" && shift

    screenprompt="$* [${default^^}/${options/$default/}]"

    # Is this function called from a terminal?
    if [[ -t 2 ]]; then
        >&2 echo "$screenprompt"

        while :; do
            read -rsn 1

            key="${REPLY:-$default}"
            [[ $key =~ [${options}] ]] || continue
            break
        done
    else
        key="$default"
    fi

    [[ ${key,,} = n ]] && status=1

    return "${status:-0}"
}

_Snapshot() {

    local OLDER_SNAPSHOT SNAPSHOT_NAME
    # will remove the second snapshot & create a new one.
    if command -v timeshift >/dev/null; then
        sudo mount /dev/sdb2 /mnt
        # The first snapshot in the list is the "after system installation"
        # awk '/^1/{print $3}' will match the second snapshot.
        OLDER_SNAPSHOT=$(sudo timeshift --list | awk '/^1/{print $1}')
        SNAPSHOT_NAME=$(sudo timeshift --list | awk '/^1/{print $3}')

        if [[ $OLDER_SNAPSHOT = '1' ]]; then
            sudo timeshift --delete --snapshot "$SNAPSHOT_NAME"
            sudo timeshift --create --skip-grub --comment "Before updates"
            sleep 2
        else
            sudo timeshift --create --skip-grub --comment "Before updates"
        fi
        sudo umount -R /mnt
    else
        echo " ${green}Timeshift is not installed...${nocolor}"
        sleep 2
    fi

}

MIRR="/etc/pacman.d/mirrorlist"
BCKP="/etc/pacman.d/mirrorlist_bckp"

_Installation() {
    sudo cp -f "$MIRR" "$BCKP"
    sudo pacman -Syu --noconfirm
    sudo grub-mkconfig -o /boot/grub/grub.cfg
}

_Reboot() {
    _Snapshot
    _Installation
    sudo reboot
}

_NoReboot() {
    _Snapshot
    _Installation
    # cleaning our lists from old packages updates.
    sed -i '1,$d' {"$ARCH","$AUR","$ARCHAUR"}
    _PolybarHook
    exit 0
}

_Poweroff() {
    _Snapshot
    _Installation
    sudo poweroff
}

_CheckReboot() {

    declare -a criteria=(
    "amd-ucode" \
    "grub" \
    "linux" \
    "mesa" \
    "nvidia-dkms" \
    "systemd" \
    "xf86-video-*" \
    "xorg"
    )

    for item in "${criteria[@]}"; do
        if grep -qw "$item" "$ARCHAUR"; then
            echo -e " ${red}$item requires REBOOT!${nocolor}\n"
            # default is reboot.
            # by pressing Enter we will get the default action.
            _YesNoPrompt -n " ${red}Poweroff ${nocolor}after updates?" || {
                _YesNoPrompt " ${red}Reboot ${nocolor}after updates?" || {
                    _NoReboot
                }
                _Reboot
            }
            _Poweroff
        fi
    done

    echo -e " ${green}NO REBOOT NEEDED !${nocolor}\n"
    # Here the default is '_NoReboot'.
    _YesNoPrompt -n " ${red}Poweroff ${nocolor}after updates?" || {
        _NoReboot
    }
    _Poweroff

}

_ZnVer2() {

    local VERSION
    VERSION=$(yay -Ss linux-amd-znver2 | awk 'NR==1 {print $2}')

    if grep -q -w 'linux-amd-znver2' "$AUR"; then

        [[ $(grep "" -c "$ARCH") -eq 0 ]] && _Snapshot

        cd "$XDG_CACHE_HOME" || exit 1

        curl \
        -L "http://nhameh.ovh/linuxkernels/x86_64/linux-amd-znver2-$VERSION-x86_64.pkg.tar.zst" -O \
        && curl -L \
        "http://nhameh.ovh/linuxkernels/x86_64/linux-amd-znver2-headers-$VERSION-x86_64.pkg.tar.zst" -O \
        && sudo pacman \
        -U linux-amd-znver2-"$VERSION"-x86_64.pkg.tar.zst \
        linux-amd-znver2-headers-"$VERSION"-x86_64.pkg.tar.zst

        sed -i '/linux-amd-znver2/d' {"$AUR","$ARCHAUR"}

    fi

}

_List() {

    local TOTALUPDATES
    TOTALUPDATES=$(sed -i '/^::/d;/^\s/g;/^\s*$/d' "$ARCHAUR" | grep "" -c "$ARCHAUR")

    if ((TOTALUPDATES == 0)); then
        echo " ${red}No available update."
        sleep 3s
        return 0
    else
        while read -r line; do
            echo " $line"
        done < "$ARCHAUR"

        echo ""
        echo -e " ${green}Available update(s): $TOTALUPDATES\n${nocolor}"

        _YesNoPrompt " Proceed with installation?" || {
            echo " bye..."
            sleep 2s
            return 0
        }

        # Get & install linux-amd-znver2 before yay tries to compile it
        # _ZnVer2

        # first AUR packages update
        if (( $(grep "" -c "$AUR") > 0 )); then
            yay -Sua
            rm -rf "$HOME"/.ccache
            if (( $(grep "" -c "$AUR") == TOTALUPDATES )); then
                sed -i '/[[:graph:]]/d' {"$AUR","$ARCHAUR"}
                _PolybarHook
                return 0
            fi
        fi

        # then Arch...
        if (( $(grep "" -c "$ARCH") > 0 )); then
            _CheckReboot
        elif find "$XDG_CACHE_HOME" -type f -iname "*.zst"; then
            sudo grub-mkconfig -o /boot/grub/grub.cfg
            _YesNoPrompt " Linux-amd requires reboot, proceed so?" || {
                sed -i '1,$d' {"$ARCH","$ARCHAUR"}
                _PolybarHook
                echo " bye..."
                sleep 2s
                exit 0
            }
            sudo reboot
        fi

    fi

}

case "$1" in
    --hook ) _PolybarHook ;;
    --list ) _List ;;
    --check) _CheckUpdates ;;
esac
