#!/bin/bash

# Author: Barret E (2020-21) <archus@protonmail.con>
# https://github.com/archusXIV/dotfiles
#
# Yet Another Updates Manager Script for Arch Linux based systems.
# Checks for updates, lists them in a readable file, update your polybar module.

: "${XDG_RUNTIME_DIR:-/run/user/1000}"

ARCH="$XDG_RUNTIME_DIR/archlinux.list"
AUR="$XDG_RUNTIME_DIR/aur.list"
ARCHAUR="$XDG_RUNTIME_DIR/combined.list"

nocolor=$'\e[0m';
red=$'\e[0;31m';
green=$'\e[0;32m';

_CheckUpdates() {

    local updmngr pids location
    location=$(curl --fail -s https://ipapi.co/country)

    # checking dependencies
    for deps in checkupdates polybar yay wmctrl; do
        [[ -z $(command -v "$deps") ]] && exit 127
    done

    # avoids running multiple instances
    updmngr=$(basename "$0")
    pids="($(pidof -x "$updmngr"))"

    [[ ${#pids[@]} -gt 1 ]] && exit

    while true; do

        touch {"$ARCH","$AUR","$ARCHAUR"}
        sleep 0.5

        sudo reflector \
        --country "$location" \
        --latest 10 \
        --age 24 \
        --protocol https \
        --sort rate \
        --save "$MIRR" >/dev/null 2>&1

        # because we want to check out the updates list.
        checkupdates | tee "$ARCH" > "$ARCHAUR"

        if (( $(yay -Qum 2>/dev/null | wc -l) > 0 )); then
            sleep 1.5s
            yay -Qum | tee "$AUR" >> "$ARCHAUR"

            # purge combined.list from possible duplicates.

            sed -i '/^::/d;/^\s/g;/^\s*$/d' "$ARCHAUR"
            perl -i -ne 'print if ! $x{$_}++' "$ARCHAUR" >/dev/null 2>&1
        fi

        wm=$(wmctrl -m | awk '/Name/{print $2}')
        barpid=$(pgrep --full $wm-bar-1)

        polybar-msg -p ${barpid} \
        action "#updates-ipc.hook.0" >/dev/null 2>&1

        sleep 3588s

    done &
}

_YesNoPrompt() {
    # stolen from budRich
    local screenprompt key default options status

    default=y
    options=yn

    [[ $1 =~ -([${options}]) ]] \
        && default="${BASH_REMATCH[1]}" && shift

    screenprompt="$* [${default^^}/${options/$default/}]"

    # Is this function called from a terminal?
    if [[ -t 2 ]]; then
        >&2 echo "$screenprompt"

        while :; do
            read -rsn 1

            key="${REPLY:-$default}"
            [[ $key =~ [${options}] ]] || continue
            break
        done
    else
        key="$default"
    fi

    [[ ${key,,} = n ]] && status=1

    return "${status:-0}"
}

MIRR="/etc/pacman.d/mirrorlist"
BCKP="/etc/pacman.d/mirrorlist_bckp"

_Reboot() {
    sudo cp -f "$MIRR" "$BCKP"
    sudo pacman -Syyu --noconfirm
    sudo grub-mkconfig -o /boot/grub/grub.cfg
    sudo reboot
}

WM=$(wmctrl -m | awk '/Name:/{print $2}')
BARPID=$(pgrep --full $WM-bar-1)

_NoReboot() {
    sudo cp -f "$MIRR" "$BCKP"
    sudo pacman -Syyu --noconfirm
    sudo grub-mkconfig -o /boot/grub/grub.cfg

    # cleaning our lists from old packages updates.
    sed -i '/[[:graph:]]/d' {"$ARCH","$AUR","$ARCHAUR"}

    polybar-msg -p ${BARPID} \
    action "#updates-ipc.hook.0" >/dev/null 2>&1 \

    exit 0
}

_Poweroff() {
    sudo cp -f "$MIRR" "$BCKP"
    sudo pacman -Syyu --noconfirm
    sudo grub-mkconfig -o /boot/grub/grub.cfg
    sudo poweroff
}

_Criteria() {
    # default is reboot.
    # by pressing Enter we will get the default action.
    echo ""
    _YesNoPrompt -n " ${red}Poweroff ${nocolor}after updates?" || {
        _YesNoPrompt " ${red}Reboot ${nocolor}after updates?" || {
            _NoReboot
        }
        _Reboot
    }
    _Poweroff
}

_NoCriteria() {
    # Here the default is '_NoReboot'.
    _YesNoPrompt -n " ${red}Poweroff ${nocolor}after updates?" || {
        _NoReboot
    }
    _Poweroff
}

_MakeUpdates() {

    declare -a criteria=(
    "amd-ucode" \
    "grub" \
    "linux" \
    "mesa" \
    "nvidia" \
    "systemd" \
    "xf86-video-*" \
    "xorg"
    )

    for item in "${criteria[@]}"; do
        if grep -qw "$item" "$ARCHAUR"; then
            echo " ${red}$item requires REBOOT!${nocolor}"
            _Criteria
        fi
    done

    echo -e " ${green}NO REBOOT NEEDED !${nocolor}\n"

    _NoCriteria

}

_List() {

    local TOTALUPDATES
    TOTALUPDATES=$(sed -i '/^::/d;/^\s/g;/^\s*$/d' "$ARCHAUR" | grep "" -c "$ARCHAUR")

    if ((TOTALUPDATES == 0)); then
        echo " ${red}No available update."
        sleep 3s
        return 0
    else
        while read -r line; do
            echo " $line"
        done < "$ARCHAUR"

        echo ""
        if ((TOTALUPDATES > 1)); then
            echo -e " ${green}There are $TOTALUPDATES available updates.\n${nocolor}"
        else
            echo -e " ${green}There is $TOTALUPDATES available update.\n${nocolor}"
        fi

        _YesNoPrompt " Proceed with installation?" || {
            echo " bye..."
            sleep 2s
            return 0
        }

        # first AUR packages update
        if (( $(grep "" -c "$AUR") > 0 )); then
            yay -Sua
            rm -rf "$HOME"/.ccache
            if (( $(grep "" -c "$AUR") == TOTALUPDATES )); then
                sed -i '/[[:graph:]]/d' {"$AUR","$ARCHAUR"}
                polybar-msg -p ${BARPID} \
                action "#updates-ipc.hook.0" >/dev/null 2>&1
                return 0
            fi
        fi

        # then Arch...
        (( $(grep "" -c "$ARCH") > 0 )) && _MakeUpdates

    fi

}

case "$1" in
    --hook)
        polybar-msg -p ${BARPID} \
        action "#updates-ipc.hook.0" >/dev/null 2>&1
    ;;
    --list)
        _List
    ;;
    --check)
        _CheckUpdates
    ;;
esac

