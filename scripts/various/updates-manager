#!/usr/bin/env bash

# Author: Barret E (2020-25) <archus@protonmail.con>
# https://github.com/archusXIV/dotfiles
#
# Yet Another Updates Manager Script for Arch Linux based systems.

: "${XDG_RUNTIME_DIR:-/run/user/1000}"

ARCH="$XDG_RUNTIME_DIR/archlinux.list"
AUR="$XDG_RUNTIME_DIR/aur.list"
ARCHAUR="$XDG_RUNTIME_DIR/combined.list"
MIRR="/etc/pacman.d/mirrorlist"
BCKP="$MIRR"_bckp
LOCK_FILE="/tmp/updates-manager.lock"

# Colors
nc=$'\e[0m'
r=$'\e[0;31m'
g=$'\e[0;32m'

declare -a DEPS=( "checkupdates" "reflector" "yay" "wmctrl" )
declare -a missing=()

_Error() {
    printf '%s\n' " ${r}ERROR: $1${nc}" >&2
    exit "${2:-1}"
}

_Cleanup() {
    rm -f "$LOCK_FILE"
    exit "${1:-0}"
}

_CheckDependencies() {

    for dep in "${DEPS[@]}"; do
        command -v "$dep" >/dev/null 2>&1 || missing+=("$dep")
    done

    if ((${#missing[@]} > 0)); then
        _Error "Missing dependencies: ${missing[*]}" 127
    fi

}

_CheckForUpdates() {

    checkupdates > "$ARCH"
    yay -Qua > "$AUR"
    cat "$ARCH" "$AUR" > "$ARCHAUR"

    # Clean up the combined list
    sed -i -e '/^::/d' -e '/^\s*$/d' -e 's/^\s\+//' "$ARCHAUR"
    awk -i inplace '!seen[$0]++' "$ARCHAUR"

}

_PolybarHook() {
    # Determine running WM and bar PID only when needed
    local WM BARPID
    WM=$(wmctrl -m | awk '/Name:/{print $2}')
    BARPID=$(pgrep --full "$WM"-bar-2)

    if command -v polybar >/dev/null; then
        polybar-msg -p "$BARPID" action "#updates-ipc.hook.0" >/dev/null 2>&1
        notify-send "Available update(s): $(wc -l < "$ARCHAUR")"
    else
        notify-send "Available update(s): $(wc -l < "$ARCHAUR")"
    fi
}

_CleanFiles() {
    sed -i '1,$d' {"$ARCH","$AUR","$ARCHAUR"}
    _PolybarHook
}

_CheckUpdates() {
    _CheckDependencies

    # Use lock file instead of pid checking
    if [[ -f $LOCK_FILE ]]; then
        _Error "Another instance is running" 1
    fi
    touch "$LOCK_FILE"

    # Set trap for cleanup
    trap '_Cleanup' EXIT SIGINT SIGTERM

    local country
    while true; do
        # Check network with timeout
        if ! timeout 5 ping -c 1 archlinux.org >/dev/null 2>&1; then
            notify-send -u critical 'archlinux.org unreachable'
            _Cleanup 1
        fi

        country=$(timeout 5 curl --fail -s https://ipapi.co/country) ||
            _Error "Could not determine country" 1

        sudo reflector \
            --country "$country" \
            --latest 10 \
            --age 24 \
            --protocol https \
            --sort rate \
            --save "$MIRR" >/dev/null 2>&1

        _CheckForUpdates
        _PolybarHook

        sleep 3588s
    done &
}

_YesNoPrompt() {
    # stolen from budRich
    # with this we can't answer anything else than yes or no.
    local screenprompt key default options status

    default=y
    options=yn

    [[ $1 =~ -([${options}]) ]] \
        && default="${BASH_REMATCH[1]}" && shift

    screenprompt="$* [${default^^}/${options/$default/}]"

    # Is this function called from a terminal?
    if [[ -t 2 ]]; then
        >&2 echo "$screenprompt"

        while :; do
            read -rsn 1
            key="${REPLY:-$default}"
            [[ $key =~ [${options}] ]] || continue
            break
        done
    else
        key="$default"
    fi

    [[ ${key,,} = n ]] && status=1

    return "${status:-0}"
}

_Snapshot() {

    local OLDER_SNAPSHOT_INDEX OLDER_SNAPSHOT_NAME
    # will remove the first snapshot & create a new one.
    if command -v timeshift >/dev/null; then
        sudo mount /dev/sdb2 /mnt
        sleep 3
        # awk '/^0/{print $3}' will match the first snapshot over three.
        OLDER_SNAPSHOT_INDEX=$(sudo timeshift --list | awk '/^0/{print $1}')
        OLDER_SNAPSHOT_NAME=$(sudo timeshift --list | awk '/^0/{print $3}')
        # checking '0' as a string
        if [[ $OLDER_SNAPSHOT_INDEX == '0' ]]; then
            sudo timeshift --delete --snapshot "$OLDER_SNAPSHOT_NAME"
            sudo timeshift --create --skip-grub --comment "Before updates"
            sleep 2
        else
            sudo timeshift --create --skip-grub --comment "Before updates"
            sleep 2
        fi
        sudo umount -R /mnt
    else
        notify-send -u critical " ${g}Timeshift is not installed...${nc}"
        sleep 2
    fi

}

_Installation() {
    sudo cp -f "$MIRR" "$BCKP"
    sudo pacman -Syu --noconfirm
    sudo grub-mkconfig -o /boot/grub/grub.cfg
}

_PowerOptions() {
	_Snapshot
    _Installation
	case "$1" in
		-n)
			sed -i '1,$d' {"$ARCH","$AUR","$ARCHAUR"}
			_PolybarHook
			exit 0
		;;
		-p) sudo poweroff ;;
		-r) sudo reboot ;;
	esac
}

_CheckReboot() {

    declare -a criteria=(
        "amd-ucode"
        "grub"
        "linux-lts"
        "linux-zen"
        "mesa"
        "systemd"
        "xorg-server"
    )

    for pkg in "${criteria[@]}"; do
        if grep -qw "${pkg}" "$ARCH"; then
            echo -e " ${r}${pkg} requires REBOOT!${nc}\n"
            restart="yes"
            break
        fi
    done

    # the default is reboot.
    # by pressing Enter we will get the default action.
    if [[ $restart == yes ]]; then
        _YesNoPrompt -n " ${r}Poweroff ${nc}after updates?" || {
            _YesNoPrompt " ${r}Reboot ${nc}after updates?" || {
                _PowerOptions -n
            }
            _PowerOptions -r
        }
        _PowerOptions -p
    else
        echo -e " ${g}NO REBOOT NEEDED!${nc}\n"
        # Here the default is 'No Reboot'.
        _YesNoPrompt -n " ${r}Poweroff ${nc}after updates?" || {
            _PowerOptions -n
        }
        _PowerOptions -p
    fi

}

_List() {

    mapfile -t TOTALUPDATES < "$ARCHAUR"

    if ((${#TOTALUPDATES[@]} == 0)); then
        printf '%s\n' " ${r}No available update."
        sleep 3s
        return 0
    else
        while read -r line; do
            echo " $line"
        done < "$ARCHAUR"

        printf '\n%s\n' " ${g}Available update(s): ${#TOTALUPDATES[@]}${nc}"

        _YesNoPrompt " Proceed with installation?" || {
            printf '%s\n' " bye..."
            sleep 2s
            return 0
        }

        # first AUR packages update
        if (( $(grep "" -c "$AUR") > 0 )); then
            yay -Sua
            rm -rf "$HOME"/.ccache
            if (( $(grep "" -c "$AUR") == "${#TOTALUPDATES[@]}" )); then
                sed -i '1,$d' {"$AUR","$ARCHAUR"}
                _PolybarHook
                return 0
            fi
        fi

        # then Arch...
        (( $(grep "" -c "$ARCH") > 0 )) && _CheckReboot

    fi

}

case "$1" in
    --chck) _CheckUpdates ;;
    --hook) _PolybarHook ;;
    --list) _List ;;
    --snap) _Snapshot ;;
    *     ) _Error "Wrong option: $1" 1 ;;
esac
