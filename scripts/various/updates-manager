#!/usr/bin/env bash

# Author: Barret E (2020-25) <archus@protonmail.con>
# https://github.com/archusXIV/dotfiles
#
# Yet Another Updates Manager Script for Arch Linux based systems.
# We need sudo privileges without password prompt for this script to work
: "${XDG_RUNTIME_DIR:-/run/user/1000}"

arch_list="$XDG_RUNTIME_DIR/archlinux.list"
aur_list="$XDG_RUNTIME_DIR/aur.list"
arch_aur_list="$XDG_RUNTIME_DIR/combined.list"
mirr="/etc/pacman.d/mirrorlist"
bckp="$mirr"_bckp
country=$(curl --fail -s https://ipapi.co/country)

# Colors
nc=$'\e[0m'
r=$'\e[0;31m'
g=$'\e[0;32m'

declare -a deps=( "checkupdates" "reflector" "yay" )

_Error() {
    printf '%s\n' " ${r}ERROR: $1${nc}" >&2
    exit "${2:-1}"
}

_Cleanup() {
    rm -f {"$arch_list","$aur_list","$arch_aur_list"} >/dev/null 2>&1
    exit "${1:-0}"
}

_CheckDependencies() {
    for dep in "${deps[@]}"; do
        command -v "$dep" >/dev/null 2>&1 || \
        _Error "Missing dependency: ${dep}" 127
    done
}

#[[ -z $country ]] && _Error "Could not determine country" 1

_CheckForUpdates() {
    checkupdates > "$arch_list"
    yay -Qua > "$aur_list"
    cat "$arch_list" "$aur_list" > "$arch_aur_list"

    # Clean up the combined list
    sed -i -e '/^::/d' -e '/^\s*$/d' -e 's/^\s\+//' "$arch_aur_list"
    awk -i inplace '!seen[$0]++' "$arch_aur_list"
}

_PolybarHook() {
    if pgrep -x polybar >/dev/null; then
        polybar-msg action "#updates-ipc.hook.0" >/dev/null 2>&1
        notify-send "Available update(s): $(wc -l < "$arch_aur_list")"
    else
        notify-send "Available update(s): $(wc -l < "$arch_aur_list")"
    fi
}

_CleanFiles() {
    sed -i '1,$d' {"$arch_list","$aur_list","$arch_aur_list"}
    _PolybarHook
}

_CheckUpdates() {
    _CheckDependencies

    # Set trap for cleanup
    trap '_Cleanup' EXIT SIGINT SIGTERM

    [[ -f $arch_list ]] && rm {"$arch_list","$aur_list","$arch_aur_list"} 2>/dev/null

    while true; do
        # Check network
        if [[ -z $(ping -c 1 archlinux.org 2>/dev/null) ]]; then
            notify-send -u critical 'archlinux.org unreachable'
            _Cleanup 1
        fi

        sudo cp -f "$mirr" "$bckp"

        sudo reflector \
            --country "$country" \
            --latest 10 \
            --age 24 \
            --protocol https \
            --sort rate \
            --save "$mirr" >/dev/null 2>&1

        _CheckForUpdates
        _PolybarHook

        sleep 3592s
    done &
}

_YesNoPrompt() {
    # stolen from budRich
    # with this we can't answer anything else than yes or no.
    local screenprompt key default options status

    default=y
    options=yn

    [[ $1 =~ -([${options}]) ]] \
        && default="${BASH_REMATCH[1]}" && shift

    screenprompt="$* [${default^^}/${options/$default/}]"

    # Is this function called from a terminal?
    if [[ -t 2 ]]; then
        >&2 echo "$screenprompt"

        while :; do
            read -rsn 1
            key="${REPLY:-$default}"
            [[ $key =~ [${options}] ]] || continue
            break
        done
    else
        key="$default"
    fi

    [[ ${key,,} = n ]] && status=1

    return "${status:-0}"
}

_Snapshot() {

    local OLDER_SNAPSHOT_INDEX OLDER_SNAPSHOT_NAME
    # will remove the first snapshot & create a new one.
    if command -v timeshift >/dev/null; then
        # sudo mount /dev/sdb2 /mnt
        # sleep 3
        # awk '/^0/{print $3}' will match the first snapshot over three.
        OLDER_SNAPSHOT_INDEX=$(sudo timeshift --list | awk '/^0/{print $1}')
        OLDER_SNAPSHOT_NAME=$(sudo timeshift --list | awk '/^0/{print $3}')
        # checking '0' as a string
        if [[ $OLDER_SNAPSHOT_INDEX == '0' ]]; then
            sudo timeshift --delete --snapshot "$OLDER_SNAPSHOT_NAME"
            sudo timeshift --create --skip-grub --comment "Before updates"
        else
            sudo timeshift --create --skip-grub --comment "Before updates"
        fi
        sleep 2
        # sudo umount -R /mnt
    else
        notify-send -u critical " ${g}Timeshift is not installed...${nc}"
        sleep 2
    fi

}

_AskforSnapshot() {
    _YesNoPrompt " ${r}Do you want to create a snapshot?: ${nc}" || {
        return 1
    }
    return 0
}

_Installation() {
    sudo cp -f "$mirr" "$bckp"
    echo "${g}Ranking mirrolist...be patient${nc}"
    rankmirrors -n 10 "$bckp" | sudo tee "$mirr"
    sudo pacman -Syu --noconfirm
    sudo grub-mkconfig -o /boot/grub/grub.cfg
}

_PowerOptions() {
    _AskforSnapshot && _Snapshot
    _Installation
    case "$1" in
        -n)
            sed -i '1,$d' {"$arch_list","$aur_list","$arch_aur_list"}
            _PolybarHook
            exit 0
        ;;
        -p) sudo poweroff ;;
        -r) sudo reboot ;;
    esac
}

_CheckReboot() {

    declare -a criteria=(
        "amd-ucode"
        "grub"
        "linux-zen"
        "linux-znver4"
        "mesa"
        "systemd"
        "xorg-server"
    )

    for pkg in "${criteria[@]}"; do
        if grep -qw "${pkg}" "$arch_list"; then
            local restart
            echo -e " ${r}${pkg} requires REBOOT!${nc}\n"
            restart="yes"
            break
        fi
    done

    # the default is reboot.
    # by pressing Enter we will get the default action.
    if [[ -n $restart ]]; then
        _YesNoPrompt -n " ${r}Poweroff ${nc}after updates?" || {
            _YesNoPrompt " ${r}Reboot ${nc}after updates?" || {
                unset restart
                _PowerOptions -n
            }
            _PowerOptions -r
        }
        _PowerOptions -p
    else
        echo -e " ${g}NO REBOOT NEEDED!${nc}\n"
        # Here the default is 'No Reboot'.
        _YesNoPrompt -n " ${r}Poweroff ${nc}after updates?" || {
            _PowerOptions -n
        }
        _PowerOptions -p
    fi

}

_List() {

    mapfile -t total_updates < "$arch_aur_list"

    if (( ${#total_updates[@]} == 0 )); then
        printf '%s\n' " ${r}No available update."
        read -r -t 3
        return 0
    else
        nl "$arch_aur_list"
        printf '\n%s\n' " ${g}Available update(s): ${#total_updates[@]}${nc}"

        _YesNoPrompt " Proceed with installation?" || {
            printf '%s\n' " bye..."
            read -r -t 2
            return 0
        }

        # first aur_list packages update
        mapfile -t aur_packages < "$aur_list"
        if (( ${#aur_packages[@]} > 0 )); then
            yay -Sua
            rm -rf "$HOME"/.ccache
            if (( ${#aur_packages[@]} == ${#total_updates[@]} )); then
                sed -i '1,$d' {"$aur_list","$arch_aur_list"}
                _PolybarHook
                return 0
            fi
        fi

        # then Arch...
        mapfile -t arch_list_packages < "$arch_list"
        if (( ${#arch_list_packages[@]} > 0 )); then
            _CheckReboot
        fi

    fi

}

case "$1" in
    --chck) _CheckUpdates ;;
    --hook) _PolybarHook ;;
    --list) _List ;;
    --snap) _AskforSnapshot && _Snapshot ;;
    *     ) _Error "Wrong option: $1" 1 ;;
esac
