#!/bin/bash

# Author: Barret E (2021) <archus@protonmail.com>
# https://github.com/archusXIV/dotfiles
# Dependencies: fzf, pacdiff, reflector, vim, updates-manager.
# https://github.com/archusXIV/dotfiles/blob/main/scripts/various/updates-viewer
#
# This script shows a menu to let you choose over severals pacman tools and options.
# In order to install or remove packages it uses fzf utility on the fancy side.
# We can also find and purge orphan packages, refresh our mirrorlist, purge the cache,
# edit pacman.conf/makepkg.conf and of course update the system.

color_off=$'\e[0m';
red=$'\e[0;31m';
green=$'\e[0;32m';

declare -a dependencies=( "fzf" "pacdiff" "reflector" "vim" "updates-manager" "yay" )

for package in "${dependencies[@]}"; do
    [[ -z $(command -v "$package") ]] && {
        echo " ${red}Missing dependency...$package"
        exit 127
    }
done

_Menu() {
    clear
    while [[ -f /etc/pacman.conf ]]; do
        clear
        echo ""
        echo -e "                                          ${green}Installed packages: $(pacman -Q | wc -l)${color_off}\n"
        echo -e "                                            ::pacman options::\n"
        echo -e "                        ::To select multiple packages in listing views, press Tab:: "
        echo -e "                       ┌───────────────────────────────────────────────────────────┐"
        echo -e "                       │    1) Search & Install           6) Update the system     │"
        echo -e "                       │    2) Uninstall package(s)       7) Pacdiff               │"
        echo -e "                       │    3) List installed packages    8) Edit pacman.conf      │"
        echo -e "                       │    4) Purge orphans/cache        9) AUR pkgs management   │"
        echo -e "                       │    5) Update mirrors             0) Exit                  │"
        echo -e "                       └───────────────────────────────────────────────────────────┘"
        echo -e "                                             ${green}Select an item${color_off}"
        echo ""
        read -r option
        case "$option" in
            1)  _Install
                echo ""
            ;;
            2)  _Uninstall
                echo ""
            ;;
            3)  _PackagesList
                echo ""
            ;;
            4)  _Purge
                echo ""
            ;;
            5)  _Reflector
                echo ""
            ;;
            6)  updates-manager --list # ~/.local/bin/updates-manager
                echo ""
            ;;
            7)  _Pacdiff
                echo ""
            ;;
            8)  sudo vim /etc/pacman.conf
                echo ""
            ;;
            9)  _Aur
                echo ""
            ;;
            0)  clear
                exit
            ;;
            *)  echo -e " ${red} Wrong option!"
                echo " ${green}Wait and try again...${color_off}"
                echo ""
                sleep 3s
                clear
            ;;
        esac
    done
}

_AurPackagesList() {
    pacman -Qm | awk '{print $1}' \
        | fzf \
        --preview 'yay -Qila {}' \
        --layout=reverse \
        --bind 'enter:execute(yay -Qila {} | less)'
}

_InstallAur() {
    local buildir editor
    buildir=${BUILDIR:-$XDG_CACHE_HOME/makepkg}
    editor=${VISUAL:-vim}

    mkdir -p "$buildir"
    cd "$buildir" || exit  1

    echo ""
    read -r -p ${green}' Please enter the desired package name and press Enter: ' PACKAGE
    echo -e " Downloading sources...${color_off}\n"
    git clone https://aur.archlinux.org/"$PACKAGE"

    dir=$PACKAGE
    echo "${green}The git directory is:" "$dir${color_off}"

    if [[ -d $dir ]]; then
        cd "$dir"
        [[ -f PKGBUILD ]] && {
            read -rp ' Edit PKGBUILD? [N/y]:' ans
            case "$ans" in
                Y*|y*) $editor PKGBUILD ;;
                *)     echo "" ;;
            esac
        }
        
        read -rp " Only [b]uild , build & [i]nstall $PACKAGE: " build
        case "$build" in
            b)
                makepkg --syncdeps --rmdeps
                if [[ $? -eq 1 ]]; then
                    echo "${red}Something went wrong...${color_off}"
                    sleep 3s
                    _Menu
                else
                    cd $HOME
                    rm -rf $HOME/.ccache
                    echo " ${green}$PACKAGE is in $XDG_CACHE_HOME/makepkg"
                    sleep 3s; return
                fi
            ;;
            i)
                makepkg --syncdeps --rmdeps
                if [[ $? -eq 1 ]]; then
                    echo "${red}Something went wrong...${color_off}"
                    sleep 3s
                    _Menu
                else
                    for i in $(find . -name "*.zst" -o -name "*.xz"); do
                        echo "Install $i ? [n/Y]:"
                        read -r answer
                        case "$answer" in
                            Y|y) sudo pacman -U "$i" --needed --noconfirm ;;
                            n|*) break ;;
                        esac
                    done

                    cd $HOME
                    rm -rf $HOME/.ccache
                    rm -rf $buildir
                fi
            ;;
            *)
                echo " ${red}Unknown option, exiting...${color_off}"
                sleep 2s
                _Menu
            ;;
        esac
    else
        echo " ${red}$dir does not exist.${color_off}"
        sleep 2s
        _Menu
    fi
}

_Aur() {
    if (( $(pacman -Qm | wc -l) < 1 )); then
        echo -e " ${red}No AUR package installed yet.${color_off}\n"
        sleep 2s
        read -rn1 -p ' Do you want to install a package from the AUR [N/y]? : ' aurinstall
        case "$aurinstall" in
            N|n)
                _Menu
            ;;
            y|Y)
                _InstallAur
            ;; 
        esac
    else
        read -rn1 -p ' What do you want to do: [L]ist installed, [I]nstall or [U]ninstall an AUR package? : ' askaur
        case "$askaur" in
            L|l)
                _AurPackagesList
            ;;
            I|i)
                _InstallAur
            ;;
            U|u)
                pacman -Qm | awk '{print $1}' \
                | fzf \
                --multi \
                --preview 'yay -Qila {}' \
                --layout=reverse \
                | xargs -ro sudo pacman -Rdd
                _Menu
            ;; 
        esac
    fi
}

_Install() {
    sudo pacman -Sy >/dev/null 2>&1
    sudo pacman -Fy >/dev/null 2>&1
    pacman -Slq \
        | fzf \
        --multi \
        --preview \
        'cat <(sudo pacman -Si {1}) <(sudo pacman -Fl {1} | awk "{print \$2}")' \
        --layout=reverse \
        | xargs -ro sudo pacman -S
}

_Uninstall() {
    pacman -Slq \
        | fzf \
        --multi \
        --preview \
        'cat <(sudo pacman -Si {1}) <(sudo pacman -Fl {1} | awk "{print \$2}")' \
        --layout=reverse \
        | xargs -ro sudo pacman -Rns
}

_PackagesList() {
    pacman -Qq \
        | fzf \
        --preview 'pacman -Qil {}' \
        --layout=reverse \
        --bind 'enter:execute(pacman -Qil {} | less)'
}

_Purge() {
    read -rn 1 -p ' Purge [O]rphans or [C]ache: ' purge
    case "$purge" in
        o|O)
            local pkgs="$XDG_CACHE_HOME/orphans_list.txt"
            echo ""
            if [[ -n $(pacman -Qdqt) ]]; then
                touch "$pkgs"
                pacman -Qdqt > "$pkgs" && cat "$pkgs"
                echo ""
                echo " ${red}Would you like to purge orphan packages? [N/y]:${color_off}"
                read -r orphan
                case "$orphan" in
                    N|n|no )
                        _menu
                    ;;
                    y|Y|yes)
                        sudo pacman -Rdd $(pacman -Qdqt)
                        echo " ${green}A list of removed packages has been created"
                        echo " in $pkgs${color_off}"
                        sleep 5s
                    ;;
                    *)
                        echo " Bad option..."; sleep 2s && _menu
                    ;;
                esac
            else
                echo " ${green}No orphan package found.${color_off}"
                sleep 3s
                _menu
            fi
        ;;
        c|C)
            sudo pacman -Scc
        ;;
    esac
    return 0
}


_Pacdiff() {
    if [[ -z $(find /etc -name "*.pacnew" 2> /dev/null) ]]; then
        echo " ${green}No pacnew files found.${color_off}"
        sleep 3s
    else
        sudo pacdiff
    fi
}

_Reflector() {
    PS3=""
    echo ""
    echo " ${green}Select your country:"
    echo " Example for France: 21"
    echo -e " More details in a terminal, type: reflector --list-countries | less${color_off}\n"
    select country in $(reflector --list-countries \
        | sed '1d;2d;8d
        s/Hong Kong/Hong-Kong/;s/North Macedonia/North-Macedonia/;
        s/New Caledonia/New-Caledonia/;s/New Zealand/New-Zealand/;
        s/South Africa/South-Africa/;s/South Korea/South-Korea/;
        s/United States/United-States/;s/United Kingdom/United-Kingdom/' \
        | awk '{print $1}'); do

        case "$country" in
            Hong-Kong)
                country='Hong Kong'
            ;;
            New-Caledonia)
                country='New Caledonia'
            ;;
            New-Zealand)
                country='New Zealand'
            ;;
            North-Macedonia)
                country='North Macedonia'
            ;;
            South-Africa)
                country='South Africa'
            ;;
            South-Korea)
                country='South Korea'
            ;;
            United-Kingdom)
                country='United Kingdom'
            ;;
            United-States)
                country='United States'
            ;;
        esac

        sudo reflector \
            --country "$country" \
            --verbose \
            --latest 10 \
            --age 24 \
            --protocol http \
            --protocol https \
            --sort rate \
            --save /etc/pacman.d/mirrorlist
        echo " ${green}New mirrorlist saved.${color_off}"
        sleep 3s
        break
    done
}

_Menu "${@}"
