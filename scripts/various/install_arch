#!/bin/bash

# Author: Barret E <archus@protonmail.com>
# Youtube channel: <https://www.youtube.com/@linuxinfrench9388>
# Idea inspired by Yannick Vollenberg <https://nordri.vollenberg.ca>
# As the script name says, this will install an Achlinux base system
# on a simple disk layout following the arch way to Keep It Simple Stupid.
# Use it at your own risks....lol
# Download the script when logged in the arch live iso:
# curl -sL "https://raw.githubusercontent.com/archusXIV/dotfiles/main/scripts/various/install_arch" -O
# chmod +x install_arch-2 && ./install_arch-2
#
# French
# Ce script va installer une Archlinux en UEFI sur le disque de votre choix
# si il y en a plusieurs, le partitionnement reste manuel et cfdisk sera utilisé
# pour mettre en place la table de partitions. Si /home est absent vous avez
# la possibilité de continuer sans ou de faire machine arrière pour créer cette
# même partition sur le même disque que le système ou sur un autre si autre il y a.
#
# English
# This script will install Archlinux in UEFI mode on the drive of your choice
# if there are several, the partitioning is not automated and cfdisk will be used
# to set up the partition table. If /home partition is missing you can continue
# without it or backtrack to create this partition on the same drive
# or on another drive if it exists.

# Colors
nc=$'\e[0;m';
g=$'\e[1;32m';
r=$'\e[0;31m';
y=$'\e[93m';

_FormatPrompt() {
    clear
    printf '%s\n' " ${y}Formating and mounting partitions.${nc}"
}

_SeparatedHomeLayout() {
        mkfs.fat -F32 /dev/$HWDISK$A \
        && mkfs.ext4 /dev/$HWDISK$B \
        && mkfs.ext4 /dev/$HWDISK2$A \
        && mount /dev/$HWDISK$B /mnt \
        && mkdir -p /mnt/{boot/efi,home} \
        && mount /dev/$HWDISK$A /mnt/boot/efi \
        && mount /dev/$HWDISK2$A /mnt/home \
        && lsblk && sleep 2s
}

_TestHome() {
    
    __DefaultLayout() (
        mkfs.fat -F32 /dev/$HWDISK$A \
        && mkfs.ext4 /dev/$HWDISK$B \
        && mkfs.ext4 /dev/$HWDISK$C \
        && mount /dev/$HWDISK$B /mnt \
        && mkdir -p /mnt/{boot/efi,home} \
        && mount /dev/$HWDISK$A /mnt/boot/efi \
        && mount /dev/$HWDISK$C /mnt/home \
        && lsblk && sleep 2s
    )
    
    if [[ $(lsblk -no NAME | grep $HWDISK$C) ]]; then
        _FormatPrompt
        sleep 1s
        __DefaultLayout
    else
        clear
        printf '%s\n'
        read -r -p "${g}"' No /home partition detected, do you want to create it? [N/y]: '"${nc}" nohome
        printf '%s\n'
         case "$nohome" in
            y|Y)
                read -r -p "${g}"' [1] /home on same drive, [2] /home on another drive: '"${nc}" homepath
                case "$homepath" in
                    1)
                        printf '%s\n' " ${g}Please modify your partitions layout.${nc}"
                        sleep 2s
                        cfdisk /dev/$HWDISK
                        __DefaultLayout
                        _FormatPrompt
                        sleep 1s
                    ;;
                    2)
                        _SecondDiskChoice
                    ;;
                esac
                
            ;;
            n|N)
                _FormatPrompt
                sleep 1s
                mkfs.fat -F32 /dev/$HWDISK$A \
                && mkfs.ext4 /dev/$HWDISK$B \
                && mount /dev/$HWDISK$B /mnt \
                && mkdir -p /mnt/boot/efi \
                && mount /dev/$HWDISK$A /mnt/boot/efi \
                && lsblk && sleep 2s
            ;;
        esac
    fi
    
}

_FirstDiskChoice() {
    __FirstDriveSelected() (
        printf '%s\n' " ${y}You selected: $HWDISK"
        sleep 2s
    )
    # if there are more than one usable drive
    if [[ $(lsblk -I 8 -nd | wc -l) -gt 1 ]]; then
        printf '%s\n'
        # This will exclude weird things like: loop0, sr0
        lsblk -I 8 -nd | cat -n
        printf '%s\n'
        read -r -p "${g}"' Choose a disk for installation, eg: 1=sda or 2=sdb etc...: '"${nc}" drive
        case "$drive" in
            1)
                HWDISK=$(lsblk -dno NAME -I 8 | sed -n '1p')
                __FirstDriveSelected
            ;;
            2)
                HWDISK=$(lsblk -dno NAME -I 8 | sed -n '2p')
                __FirstDriveSelected
            ;;
            3)
                HWDISK=$(lsblk -dno NAME -I 8 | sed -n '3p')
                __FirstDriveSelected
            ;;
        esac
    else
        HWDISK=$(lsblk -dno NAME -I 8 | sed -n '1p')
        printf '%s\n' " ${y}Automatic selection done: $HWDISK"
        sleep 2s
    fi

}

_SecondDiskChoice() {
    __SecondDriveSelected() (
        printf '%s\n' " ${y}You selected: $HWDISK2"
        sleep 2s
    )
    # if there are more than one usable drive
    if [[ $(lsblk -I 8 -nd | wc -l) -gt 1 ]]; then
        clear
        printf '%s\n'
        # This will exclude weird things like: loop0, sr0
        lsblk -I 8 -nd | cat -n
        printf '%s\n'
        printf '%s\n' " ${y}Choosing a new disk should be a good choice.${nc}"
        read -r -p "${g}"' Select a disk for /home, eg: 1=sda or 2=sdb etc...: '"${nc}" home
        case "$home" in
            1)
                HWDISK2=$(lsblk -dno NAME -I 8 | sed -n '1p')
                __SecondDriveSelected
            ;;
            2)
                HWDISK2=$(lsblk -dno NAME -I 8 | sed -n '2p')
                __SecondDriveSelected
            ;;
            3)
                HWDISK2=$(lsblk -dno NAME -I 8 | sed -n '3p')
                __SecondDriveSelected
            ;;
        esac
    fi
}

_DefaultInputs() {
    # Here we define the default settings that the user
    # should fill but doesn't, just before we enter the chroot
    # if the variables are empty...
    case "$1" in
        -m)
            [[ -z $machine ]] && {
                printf '%s\n' " ${r}hostname is EMPTY... will be set to archlinux${nc}"
                machine="archlinux"
                sleep 2s
            }
        ;;
        -l)
            [[ -z $language ]] && {
                printf '%s\n' " ${r}your language is EMPTY... will be set to en_US.UTF-8${nc}"
                lang="LANG=en_US.UTF-8"
                sleep 2s
            }
        ;;
        -k)
            [[ -z $keymap ]] && {
                printf '%s\n' " ${r}your keyboard layout is EMPTY...will be set to us${nc}"
                key="KEYMAP=us" font="FONT=lat2-16"
                sleep 2s
            }
        ;;
    esac
}

_Install() {
    clear
    local LOCATION TIMEZONE A B C
    
    LOCATION=$(curl --fail -s https://ipapi.co/country)
    TIMEZONE=$(curl --fail -s https://ipapi.co/timezone)
    A="1" B="2" C="3"
    
    if [[ $(id -u) == 0 ]]; then
        # Setting faster packages downloads.
        sed -i 's/#ParallelDownloads/ParallelDownloads/' /etc/pacman.conf
        
        printf '%s\n' " ${y}Looking for UEFI system...${nc}"
        sleep 1s
        if [[ -n $(ls /sys/firmware/efi/efivars) ]]; then
            printf '%s\n' " ${y}Success, UEFI system detected.${nc}"
            sleep 2s
            clear
            
            printf '%s\n' " ${y}Syncronizing system clock...${nc}"
            timedatectl set-ntp true && timedatectl \
            && printf '%s\n' " ${y}Success, system clock updated.${nc}"
            sleep 2s
            clear
            
            _FirstDiskChoice
            cfdisk /dev/$HWDISK
            
            _TestHome
            [[ -n $HWDISK2 ]] && {
                cfdisk /dev/$HWDISK2
                _FormatPrompt
                _SeparatedHomeLayout
            }
            
            printf '%s' " ${y}Getting fresh mirrors list for $LOCATION...${nc}"
            sleep 1s
            
            reflector --verbose --country "$LOCATION" --latest 10 --age 24 \
            --protocol https --sort rate --save /etc/pacman.d/mirrorlist
            
            printf '%s\n' " ${y}Installing Arch-Linux base system...${nc}"
            sleep 1s
            
            # pacstrap will not use the iso's archlinux-keyring.
            pacstrap -K /mnt base base-devel linux linux-headers linux-firmware dmidecode \
            pacman-contrib grub efibootmgr os-prober gptfdisk fatresize networkmanager \
            reflector zip unzip p7zip nano wget vim mc git syslog-ng mtools usbutils \
            dosfstools lsb-release exfat-utils bash-completion man-db man-pages \
            gvfs gvfs-{afc,goa,google,gphoto2,mtp,nfs,smb} \
            xf86-input-{elographics,evdev,libinput,synaptics,vmmouse,void,wacom} \
            xf86-video-{amdgpu,ati,dummy,fbdev,intel,nouveau,openchrome,qxl,sisusb,vesa}
            
            cat /etc/pacman.d/mirrorlist > /mnt/etc/pacman.d/mirrorlist \
            && cat /etc/pacman.conf > /mnt/etc/pacman.conf
            
            clear
            printf '%s\n'
            printf '%s\n' " ${y}Generating fstab...${nc}"
            genfstab -U -p /mnt >> /mnt/etc/fstab \
            && sleep 2s
            
            printf '%s\n' " ${y}Entering installed system for configuration.${nc}"
            sleep 2s
            
            # if some user inputs are empty they will be set to defaults
            read -r -p "${g}"' Please fill the machine name: '"${nc}" machine
            _DefaultInputs -m || printf '%s\n' " ${y}hostename set to $machine.${nc}"
            sleep 1s
            
            printf '%s\n'
            read -r -p "${g}"' Choose your language: [F]rench (France), [E]nglish (US): '"${nc}" language
            case "$language" in
                f|F)
                    lang="LANG=fr_FR.UTF-8"
                    printf '%s\n' " ${y}language set to French.${nc}"
                    sleep 1s
                ;;
                e|E)
                    lang="LANG=en_US.UTF-8"
                    printf '%s\n' " ${y}language set to American English.${nc}"
                    sleep 1s
                ;;
            esac
            _DefaultInputs -l
            
            printf '%s\n'
            read -r -p "${g}"' Choose your keyboard layout: [F]rench (fr), [E]nglish (us): '"${nc}" keymap
            case "$keymap" in
                f|F)
                    key="KEYMAP=fr-latin9"
                    font="FONT=eurlatgr"
                    printf '%s\n' " ${y}keyboard layout set to fr.${nc}"
                    sleep 1s
                ;;
                e|E)
                    key="KEYMAP=us"
                    font="FONT=lat2-16"
                    printf '%s\n' " ${y}keyboard layout set to us.${nc}"
                    sleep 1s
                ;;
            esac
            _DefaultInputs -k
            
            arch-chroot /mnt /bin/bash -c "
                ln -sf /usr/share/zoneinfo/$TIMEZONE /etc/localtime \
                && hwclock --systohc --utc \
                && echo $machine > /etc/hostname \
                && echo $key > /etc/vconsole.conf \
                && echo $font >> /etc/vconsole.conf \
                && echo ' ${g}Choose your locales using vim${nc}' && sleep 2s \
                && vim /etc/locale.gen && locale-gen \
                && echo $lang > /etc/locale.conf \
                && echo LC_COLLATE=C >> /etc/locale.conf \
                && echo '127.0.0.1    localhost' >> /etc/hosts \
                && echo '::1          localhost' >> /etc/hosts \
                && echo '127.0.1.1    $machine.localdomain    $machine' >> /etc/hosts \
                && mkinitcpio -p linux && clear \
                && echo ' ${g}Change the $USER password: ${nc}' \
                && passwd $USER \
                && echo ' ${g}Installing grub menu on first sector of /dev/$HWDISK, please be patient...${nc}' \
                && grub-install --target=x86_64-efi --efi-directory=/boot/efi \
                --bootloader-id=ARCH_GRUB && grub-mkconfig -o /boot/grub/grub.cfg \
                && systemctl enable {NetworkManager,systemd-timesyncd}.service \
                && timedatectl set-ntp true && exit
            "
            
            clear
            printf '%s\n'
            read -r -p "${g}"' Do you want to install a desktop now? [Y/n] '"${nc}" desk
            case "$desk" in
                y|Y)
                    arch-chroot /mnt /bin/bash -c "
                        curl -sL \
                        "https://raw.githubusercontent.com/archusXIV/dotfiles/main/scripts/various/install_desktop" \
                        -O && chmod +x install_desktop && ./install_desktop
                        exit
                    "
                    umount -R /mnt && reboot
                ;;
                n|N)
                    read -r -p "${g}"' Do you want to enter the new installed system? [Y/n] '"${nc}" enter
                    case "$enter" in
                        y|Y)
                            arch-chroot /mnt /bin/bash -c "
                                curl -sL \
                                "https://raw.githubusercontent.com/archusXIV/dotfiles/main/scripts/various/install_desktop" \
                                -O && chmod +x install_desktop
                            "
                        ;;
                        n|N)
                            curl -sL \
                            "https://raw.githubusercontent.com/archusXIV/dotfiles/main/scripts/various/install_desktop" \
                            -O && chmod +x install_desktop && mv install_desktop /mnt/root/
                            printf '%s' " ${y}Unmounting /mnt and rebooting.${nc}"
                            sleep 1s
                            umount -R /mnt && reboot
                        ;;
                        *)
                            arch-chroot /mnt /bin/bash -c "
                                curl -sL \
                                "https://raw.githubusercontent.com/archusXIV/dotfiles/main/scripts/various/install_desktop" \
                                -O && chmod +x install_desktop
                            "
                        ;;
                    esac
                ;;
            esac
        else
            clear
            printf '%s\n'
            printf '%s' " ${r}NONE UEFI SYSTEM, exiting...${nc}"
            sleep 3s && exit 0
        fi
    else
        clear
        printf '%s\n'
        printf '%s' " ${r}ONLY ROOT USER CAN RUN THIS SCRIPT, exiting...${nc}"
        sleep 3s && exit 0
    fi
    
}

_Description() {
    clear
    setfont sun12x22
    cat << EOF

                #                                                       
               # #      #####   ####  #    # #      # #    # #    # #    # 
              #   #     #    # #    # #    # #      # ##   # #    #  #  #  
             #     #    #    # #      ###### #      # # #  # #    #   ##   
            #########   #####  #      #    # #      # #  # # #    #   ##   
           #         #  #   #  #    # #    # #      # #   ## #    #  #  #  
          #           # #    #  ####  #    # ###### # #    #  ####  #    #
    
                     Base installation for lazy dudes made easy!
    
    # French (ne jamais lancer un script sans le lire auparavant)
    ${g}Ce script va installer une Archlinux en UEFI sur le disque de votre choix
    si il y en a plusieurs, le partitionnement reste manuel et cfdisk sera utilisé
    pour mettre en place la table de partitions.${nc}
    
    # English (never run a script without reading it first)
    ${g}This script will install Archlinux in UEFI mode on the drive of your choice
    if there are several, the partitioning is not automated and cfdisk will be used
    to set up the partition table.${nc}
    
    Partitions layouts examples:
    
    ${y}1) sda1=/boot/efi sda2=/ sda3=/home
    2) sda1=/boot/efi sda2=/
    3) sda1=/boot/efi sda2=/ sdb1=/home${nc}
    
EOF
    printf '%s\n'
    read -r -p "${g}"'    Press enter to launch installation, ^C to quit: '"${nc}" inst
    case "$inst" in *) _Install ;; esac
}

_Description "${@}"
