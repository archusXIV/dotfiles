#!/bin/bash

# This script automates the base installation of Arch Linux with configurable options.
# It allows customization of system disk, keyboard layout, locale, timezone and hostname through
# command line arguments. The script handles both UEFI and BIOS systems, guides through
# disk selection and partitioning, and performs the core system installation steps.

# Display usage information if no arguments provided
if [ $# -eq 0 ]; then
    echo " Arch Linux Installation Script"
    echo " ============================="
    echo " This script will guide you through installing Arch Linux."
    echo ""
    echo " Available options:"
    echo "   -d <root disk> Set the system disk (default: sda)"
    echo "   -x             List all present disks"
    echo "   -k <layout>    Set keyboard layout (default: us)"
    echo "   -l <locale>    Set system locale (default: en_US)"
    echo "   -s <home disk> Set the disk for /home (optional)"
    echo "   -t <zone>      Set timezone (default: UTC)"
    echo "   -h <name>      Set hostname (default: archlinux)"
    echo ""
    echo " Example usage:"
    echo "   $0 -d sda -s sdb -k uk -l en_GB -t Europe/London -h myarch"
    echo ""
    exit 1
fi

# Parse command line arguments
while getopts "x:d:k:l:t:h:s:" opt; do
    case $opt in
        x)
            echo -e " \nAvailable disks:\n"
           lsblk -d -n -p -o NAME,SIZE,MODEL
           exit 0
        ;;
        d) system_disk="$OPTARG" ;;
        k) keyboard_layout="$OPTARG" ;;
        l) locale="$OPTARG" ;;
        t) timezone="$OPTARG" ;;
        h) hostname="$OPTARG" ;;
        s) second_disk="$OPTARG" ;;
        \?) echo "Invalid option -$OPTARG" >&2; exit 1 ;;
    esac
done

# Set defaults if not provided
disk=${system_disk:-sda}
keyboard_layout=${keyboard_layout:-us}
locale=${locale:-en_US}
timezone=${timezone:-UTC}
hostname=${hostname:-archlinux}

check_uefi() {
    if [[ -d /sys/firmware/efi ]]; then
        echo "System is booted in UEFI mode"
        return 0
    else
        echo "System is booted in BIOS mode"
        return 1
    fi
}

partition_disk() {
    local is_uefi="$1"
    local disk="$2"
    local second_disk="$3"

    # Ensure disk paths are complete
    if [[ ! $disk =~ ^\/dev\/ ]]; then
        disk="/dev/$disk"
    fi
    if [[ -n $second_disk ]] && [[ ! $second_disk =~ ^\/dev\/ ]]; then
        second_disk="/dev/$second_disk"
    fi

    # Verify disks exist and clear partition tables
    for d in "$disk" ${second_disk:+"$second_disk"}; do
        if [[ ! -b $d ]]; then
            echo "Error: Disk $d does not exist"
            exit 1
        fi
        echo "Clearing partition table on $d..."
        sgdisk -Z "$d" || { echo "Failed to clear partition table on $d"; exit 1; }
    done

    if [[ $is_uefi -eq 0 ]]; then
        echo "Creating UEFI partitions..."
        # UEFI partitioning
        sgdisk -n 1:0:+512M -t 1:ef00 -c 1:"EFI System" "$disk" || { echo "Failed to create EFI partition"; exit 1; }
        sgdisk -n 2:0:0 -t 2:8300 -c 2:"Linux root" "$disk" || { echo "Failed to create root partition"; exit 1; }

        if [[ -n $second_disk ]]; then
            echo "Creating home partition on second disk..."
            sgdisk -n 1:0:0 -t 1:8300 -c 1:"Linux home" "$second_disk" || { echo "Failed to create home partition"; exit 1; }
        fi
    else
        echo "Creating BIOS partitions..."
        # BIOS partitioning
        sgdisk -n 1:0:+2G -t 1:8200 -c 1:"Linux swap" "$disk" || { echo "Failed to create swap partition"; exit 1; }
        sgdisk -n 2:0:0 -t 2:8300 -c 2:"Linux root" "$disk" || { echo "Failed to create root partition"; exit 1; }

        if [[ -n $second_disk ]]; then
            echo "Creating home partition on second disk..."
            sgdisk -n 1:0:0 -t 1:8300 -c 1:"Linux home" "$second_disk" || { echo "Failed to create home partition"; exit 1; }
        fi
    fi
}

# Function to format and mount partitions
setup_partitions() {
    local disk="$1"
    local is_uefi="$2"
    local second_disk="$3"

    # Ensure disk paths are complete
    if [[ ! $disk =~ ^\/dev\/ ]]; then
        disk="/dev/$disk"
    fi
    if [[ -n $second_disk ]] && [[ ! $second_disk =~ ^\/dev\/ ]]; then
        second_disk="/dev/$second_disk"
    fi

    if [[ $is_uefi -eq 0 ]]; then
        # UEFI system partitioning
        echo "Formatting EFI partition..."
        mkfs.fat -F32 "${disk}1" || { echo "Failed to format EFI partition"; exit 1; }
        echo "Formatting root partition..."
        mkfs.ext4 "${disk}2" || { echo "Failed to format root partition"; exit 1; }

        # Mount partitions
        echo "Mounting root partition..."
        mount "${disk}2" /mnt || { echo "Failed to mount root partition"; exit 1; }
        echo "Creating EFI mount point..."
        mkdir -p /mnt/boot/efi || { echo "Failed to create EFI mount point"; exit 1; }
        echo "Mounting EFI partition..."
        mount "${disk}1" /mnt/boot/efi || { echo "Failed to mount EFI partition"; exit 1; }

        # Handle second disk if present
        if [[ -n $second_disk ]]; then
            echo "Formatting home partition..."
            mkfs.ext4 "${second_disk}1" || { echo "Failed to format home partition"; exit 1; }
            echo "Creating home mount point..."
            mkdir -p /mnt/home || { echo "Failed to create home mount point"; exit 1; }
            echo "Mounting home partition..."
            mount "${second_disk}1" /mnt/home || { echo "Failed to mount home partition"; exit 1; }
        fi
    else
        # BIOS system partitioning
        echo "Creating swap partition..."
        mkswap "${disk}1" || { echo "Failed to create swap"; exit 1; }
        echo "Formatting root partition..."
        mkfs.ext4 "${disk}2" || { echo "Failed to format root partition"; exit 1; }

        # Mount partitions
        echo "Mounting root partition..."
        mount "${disk}2" /mnt || { echo "Failed to mount root partition"; exit 1; }
        echo "Enabling swap..."
        swapon "${disk}1" || { echo "Failed to enable swap"; exit 1; }

        # Handle second disk if present
        if [[ -n $second_disk ]]; then
            echo "Formatting home partition..."
            mkfs.ext4 "${second_disk}1" || { echo "Failed to format home partition"; exit 1; }
            echo "Creating home mount point..."
            mkdir -p /mnt/home || { echo "Failed to create home mount point"; exit 1; }
            echo "Mounting home partition..."
            mount "${second_disk}1" /mnt/home || { echo "Failed to mount home partition"; exit 1; }
        fi
    fi
}

install_base_system() {
    # ensure the system clock is synchronized
    timedatectl set-ntp true
    # Update package database first
    reflector \
    -l 10 \
    -a 24 \
    -p https \
    --sort rate \
    --save /etc/pacman.d/mirrorlist
    pacman -Syy archlinux-keyring --noconfirm
    pacstrap -K /mnt base base-devel linux linux-firmware vim zram-generator
    genfstab -U /mnt >> /mnt/etc/fstab
}

configure_system() {
    local is_uefi="$1"
    local system_disk="$2"

    # Create configuration script
cat > /mnt/root/configure.sh <<-EOF
#!/bin/bash
# Set timezone
ln -sf /usr/share/zoneinfo/"$timezone" /etc/localtime
hwclock --systohc --utc

# Set locale
sed -i "s/#${locale}/${locale}/" /etc/locale.gen
locale-gen
echo "LANG=$locale" > /etc/locale.conf
echo "LC_COLLATE=C" >> /etc/locale.conf
export LANG="$locale.UTF-8"

# Set hostname
echo "$hostname" > /etc/hostname
echo "127.0.1.1    $hostname.localdomain    $hostname" >> /etc/hosts

# Set keyboard layout
echo "KEYMAP=$keyboard_layout" > /etc/vconsole.conf
mkinitcpio -P

# Configure network
pacman -S --noconfirm networkmanager
systemctl enable NetworkManager

# Set root password
echo "Set root password:"
passwd

# Install and configure bootloader
if [[ $is_uefi -eq 0 ]]; then
    pacman -S --noconfirm grub efibootmgr
    grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=ARCH_GRUB
else
    pacman -S --noconfirm grub
    if [[ -z "$system_disk" || ! -b "$system_disk" ]]; then
        echo "Error: Invalid or unset system disk for BIOS bootloader installation."
        exit 1
    fi
    grub-install --target=i386-pc "$system_disk"
fi
grub-mkconfig -o /boot/grub/grub.cfg

exit  # Exit chroot
EOF

    chmod +x /mnt/root/configure.sh
    if ! arch-chroot /mnt /root/configure.sh; then
        echo "Error: Configuration script failed. Retaining /mnt/root/configure.sh for debugging."
    else
        rm /mnt/root/configure.sh
    fi
}

# Main installation script
echo -e "\nStarting Arch Linux installation...\n"

# Verify we're in the live environment
if [[ ! -f /run/archiso/bootmnt/arch/boot/x86_64/vmlinuz-linux ]]; then
    echo "This script must be run from the Arch Linux live environment!"
    exit 1
fi

# Check internet connectivity
if ! ping -c 1 archlinux.org >/dev/null 2>&1; then
    echo "No internet connection! Please connect to the internet first."
    exit 1
fi

# Check UEFI status
check_uefi
is_uefi=$?

# Confirm installation
echo "WARNING: This will erase ALL data on $system_disk"
read -rp "Do you want to continue? (y/N) " confirm
if [[ ! $confirm =~ ^[Yy]$ ]]; then
    echo "Installation cancelled."
    exit 1
fi

# Perform installation steps
if [[ -n $second_disk ]]; then
    echo "Partitioning disks..."
    partition_disk "$is_uefi" "$system_disk" "$second_disk"
    echo "Setting up partitions..."
    setup_partitions "$system_disk" "$is_uefi" "$second_disk"
else
    echo "Formatting disk..."
    partition_disk "$is_uefi" "$system_disk"
    echo "Setting up partitions..."
    setup_partitions "$system_disk" "$is_uefi"
fi

echo "Installing base system..."
install_base_system

echo "Configuring system..."
configure_system "$is_uefi" "$system_disk"

# Cleanup and finish
echo "Unmounting partitions..."
umount -R /mnt

echo -e "\nInstallation complete!"
echo "You can now reboot into your new Arch Linux system."
echo "After reboot, log in as root with the password you set."
