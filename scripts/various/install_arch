#!/bin/bash

# Author: Barret E <https://github.com/archusXIV/>
# Creation date: 2025-05-25
# License: GPLv2
# This script automates the installation of Arch Linux with the following features:
# - Supports both UEFI and BIOS systems.
# - Configurable disk partitioning with option for separate /home partition.
#   and custom swap size if needed (only for BIOS install).
# - Customizable keyboard layout, locale, timezone and hostname.
# - Automatic mirror selection based on response rate and package database update.
# - Installation of base system packages (minimal) and bootloader.
# - Network configuration via NetworkManager.
# - Root password setup during installation.
# - Safety checks for live environment and internet connectivity.

# Display usage information if no arguments provided
r=$'\e[31m';
g=$'\e[32m';
c=$'\e[0m';

if [ $# -eq 0 ]; then
    cat <<'USAGE'
 Arch Linux Installation Script
 ==============================

 Available options:
  -D all              List all present disks for decision making
  -r <root disk>      Set the system disk (default: sda)
  -s <home disk>      Set the second disk for /home (optional)
  -S <swap size>      Set the swap size for BIOS install (default: 4G)
  -c <country>        Set your actual location (default: United States)
  -k <kbd layout>     Set your keyboard layout (default: us)
  -l <locale>         Set system locale (default: en_US)
  -t <Region/Capital> Set timezone (default: UTC)
  -h <name>           Set hostname (default: archlinux)

 Example usage for UEFI install (no swap):
  ./install_arch -d sda -s sdb -k fr -l fr_FR -t Europe/Paris -h myarchuefi

 Example usage for BIOS install (with swap size):
  ./install_arch -d sda -S 4 -s sdb -k fr -l fr_FR -t Europe/Paris -h myarchbios

USAGE
    exit 1
fi

# Parse command line arguments
while getopts "D:c:r:k:l:t:h:s:S:" opt; do
    case $opt in
        D)
            echo -e " \n${g}Available disks:\n${c}"
            lsblk -I 8 -d -o NAME,SIZE,MODEL
            echo ""
            exit 0
        ;;
        c) country="$OPTARG" ;;
        r) system_disk="$OPTARG" ;;
        k) keyboard_layout="$OPTARG" ;;
        l) locale="$OPTARG" ;;
        t) timezone="$OPTARG" ;;
        h) hostname="$OPTARG" ;;
        s) second_disk="$OPTARG" ;;
        S) swap_size="$OPTARG" ;;
        \?) echo "${r}Invalid option -$OPTARG${c}" >&2; exit 1 ;;
    esac
done

# Set defaults if not provided
country=${country:-"United States"}
disk=${system_disk:-sda}
swap_size=${swap_size:-4}
hostname=${hostname:-archlinux}
keyboard_layout=${keyboard_layout:-us}
locale=${locale:-en_US}
timezone=${timezone:-UTC}

checkUefi() {
    if [[ -d /sys/firmware/efi ]]; then
        echo "${g}System is booted in UEFI mode${c}"
        return 0
    else
        echo "${g}System is booted in BIOS mode${c}"
        return 1
    fi
}

ensureDisksPathsAreCorrect() {
    [[ ! $disk =~ ^\/dev\/ ]] && disk="/dev/$disk"
    [[ -n $second_disk ]] && [[ ! $second_disk =~ ^\/dev\/ ]] \
    && second_disk="/dev/$second_disk"
}

errorDisk() {
    case "$1" in
        "clear_partition") echo "${r}Error: Failed to clear partition table${c}" ;;
        "create_efi") echo "${r}Error: Failed to create EFI partition${c}" ;;
        "create_bios_boot") echo "${r}Error: Failed to create BIOS boot partition${c}" ;;
        "create_efi_mount") echo "${r}Error: Failed to create EFI mount point${c}" ;;
        "create_root") echo "${r}Error: Failed to create root partition${c}" ;;
        "create_home") echo "${r}Error: Failed to create home partition${c}" ;;
        "create_home_mount") echo "${r}Error: Failed to create home mount point${c}" ;;
        "create_swap") echo "${r}Error: Failed to create swap partition${c}" ;;
        "disk_not_exist") echo "${r}Error: Disk does not exist${c}" ;;
        "enable_swap") echo "${r}Error: Failed to enable swap${c}" ;;
        "format_efi") echo "${r}Error: Failed to format EFI partition${c}" ;;
        "format_root") echo "${r}Error: Failed to format root partition${c}" ;;
        "format_home") echo "${r}Error: Failed to format home partition${c}" ;;
        "mount_root") echo "${r}Error: Failed to mount root partition${c}" ;;
        "mount_efi") echo "${r}Error: Failed to mount EFI partition${c}" ;;
        "mount_home") echo "${r}Error: Failed to mount home partition${c}" ;;
    esac
    exit 1
}

partitionDisk() {
    local is_uefi="$1"
    local disk="$2"
    local second_disk="$3"

    ensureDisksPathsAreCorrect

    # Verify disks exist and clear partition tables
    for d in "$disk" ${second_disk:+"$second_disk"}; do
        [[ ! -b $d ]] && errorDisk "disk_not_exist"
        sgdisk -Z "$d" || errorDisk "clear_partition"
    done

    if [[ $is_uefi -eq 0 ]]; then
        # UEFI partitioning
        sgdisk -n 1:0:+512M -t 1:ef00 -c 1:"EFI System" "$disk" \
        || errorDisk "create_efi"
    else
        # BIOS partitioning
        # Create a 1MB BIOS Boot Partition first
        sgdisk -n 1:0:+1M -t 1:ef02 -c 1:"BIOS boot partition" "$disk" \
        || errorDisk "create_bios_boot"
        # Create swap partition
        sgdisk -n 2:0:+"$swap_size"G -t 2:8200 -c 2:"Linux swap" "$disk" \
        || errorDisk "create_swap"
    fi

    if [[ $is_uefi -eq 0 ]]; then
        sgdisk -n 2:0:0 -t 2:8300 -c 2:"Linux root" "$disk" \
        || errorDisk "create_root"
    else
        sgdisk -n 3:0:0 -t 3:8300 -c 3:"Linux root" "$disk" \
        || errorDisk "create_root"
    fi

    [[ -n $second_disk ]] && {
        sgdisk -n 1:0:0 -t 1:8300 -c 1:"Linux home" "$second_disk" \
        || errorDisk "create_home"
    }

    # Ensure kernel rereads partition table
    echo "Debug: Refreshing partition table..."
    partprobe "$disk"
    [[ -n $second_disk ]] && partprobe "$second_disk"
    sleep 2  # Give the kernel some time to process
}

setupPartitions() {
    local disk="$1"
    local is_uefi="$2"
    local second_disk="$3"

    ensureDisksPathsAreCorrect

    # Debug output
    echo "Debug: Setting up partitions for disk: $disk"
    echo "Debug: UEFI mode: $is_uefi"
    lsblk "$disk"

    if [[ $is_uefi -eq 0 ]]; then
        echo "Debug: Setting up UEFI partitions..."
        mkfs.fat -F32 "${disk}1" || errorDisk "format_efi"
        mkfs.ext4 "${disk}2" || errorDisk "format_root"
        mount "${disk}2" /mnt || errorDisk "mount_root"
        mkdir -p /mnt/boot/efi || errorDisk "create_efi_mount"
        mount "${disk}1" /mnt/boot/efi || errorDisk "mount_efi"
    else
        echo "Debug: Setting up BIOS partitions..."
        # Note: partition 1 is BIOS boot, no formatting needed
        mkswap "${disk}2" || errorDisk "create_swap"
        echo "Debug: Checking if partition ${disk}3 exists..."
        if [[ ! -b "${disk}3" ]]; then
            echo "${r}Error: Partition ${disk}3 does not exist. Available partitions:${c}"
            lsblk "$disk"
            exit 1
        fi
        echo "Debug: Creating ext4 on ${disk}3"
        mkfs.ext4 "${disk}3" 2>&1 || {
            echo "${r}Error details for ext4 formatting:${c}"
            mkfs.ext4 "${disk}3" 2>&1
            errorDisk "format_root"
        }
        echo "Debug: Mounting ${disk}3 to /mnt"
        mount "${disk}3" /mnt || errorDisk "mount_root"
        echo "Debug: Enabling swap on ${disk}2"
        swapon "${disk}2" || errorDisk "enable_swap"
    fi

    [[ -n $second_disk ]] && {
        echo "Debug: Setting up home partition on $second_disk"
        mkfs.ext4 "${second_disk}1" || errorDisk "format_home"
        mkdir -p /mnt/home || errorDisk "create_home_mount"
        mount "${second_disk}1" /mnt/home || errorDisk "mount_home"
    }
}

installBaseSystem() {
    # Ensure the system clock is synchronized
    timedatectl set-ntp true
    echo "${g}Updating mirrolist for ${country}${c}"
    reflector \
    -c "${country}" \
    -l 10 \
    -a 24 \
    -p https \
    --sort rate \
    --save /etc/pacman.d/mirrorlist
    pacman -Syy archlinux-keyring --noconfirm
    pacstrap -K /mnt base base-devel less linux linux-firmware reflector vim zram-generator
    genfstab -U /mnt >> /mnt/etc/fstab
    cp -f /etc/pacman.d/mirrorlist /mnt/etc/pacman.d/mirrorlist
}

configureSystem() {
    local is_uefi="$1"
    local system_disk="$2"

    # Ensure disk path is complete
    [[ ! $system_disk =~ ^\/dev\/ ]] && system_disk="/dev/$system_disk"

    # Create configuration script
cat > /mnt/root/configure.sh <<-EOF
#!/bin/bash
# Set timezone
ln -sf /usr/share/zoneinfo/"$timezone" /etc/localtime
hwclock --systohc --utc

# Set locale
sed -i "s/#${locale}/${locale}/" /etc/locale.gen
locale-gen
echo "LANG=$locale" > /etc/locale.conf
echo "LC_COLLATE=C" >> /etc/locale.conf
export LANG="$locale.UTF-8"

# Set hostname
echo "$hostname" > /etc/hostname
echo "127.0.1.1     $hostname.localdomain    $hostname" >> /etc/hosts

# Set keyboard layout
echo "KEYMAP=$keyboard_layout" > /etc/vconsole.conf
echo "FONT=sun12x22" >> /etc/vconsole.conf
mkinitcpio -P

# Configure network
pacman -S --noconfirm networkmanager
systemctl enable NetworkManager

# Set root password
echo "Set the root password:"
passwd

# Performance optimizations
echo "Adding performance tweaks..."
# Enable parallel module loading
sed -i 's/^#MODULES_DECOMPRESS="no"/MODULES_DECOMPRESS="yes"/' /etc/mkinitcpio.conf
sed -i 's/^MODULES=()/MODULES=(sd_mod)/' /etc/mkinitcpio.conf

# Create systemd-boot-options.conf for kernel parameters
mkdir -p /etc/systemd/system.conf.d/
cat > /etc/systemd/system.conf.d/boot-options.conf <<EOL
[Manager]
DefaultTimeoutStartSec=10s
DefaultTimeoutStopSec=10s
EOL

# Install and configure bootloader
pacman -S --noconfirm grub
if [[ $is_uefi -eq 0 ]]; then
    pacman -S --noconfirm efibootmgr
    grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=ARCH_GRUB
else
    [[ -z "$system_disk" || ! -b "$system_disk" ]] && {
        echo "${r}Error: Invalid or unset system disk for BIOS bootloader installation.${c}"
        exit 1
    }
    grub-install --target=i386-pc "$system_disk"
fi

# Add performance-related kernel parameters to GRUB
sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT=".*"/GRUB_CMDLINE_LINUX_DEFAULT="quiet nowatchdog nmi_watchdog=0 raid=noautodetect"/' /etc/default/grub

grub-mkconfig -o /boot/grub/grub.cfg

exit
EOF
    chmod +x /mnt/root/configure.sh
    if ! arch-chroot /mnt /root/configure.sh "$system_disk"; then
        echo "${r}Error: Configuration script failed. Retaining /mnt/root/configure.sh for debugging.${c}"
    else
        rm /mnt/root/configure.sh
    fi

}

# We start from here
echo -e "\nStarting Arch Linux installation...\n"

# Verify we're in the live environment
if [[ ! -f /run/archiso/bootmnt/arch/boot/x86_64/vmlinuz-linux ]]; then
    echo "${r}This script must be run from the Arch Linux live environment!${c}"
    exit 1
fi

# Check internet connectivity
ping -c 1 archlinux.org >/dev/null 2>&1 || {
    echo "${r}No internet connection! Please connect to the internet first.${c}"
    exit 1
}

# Check UEFI status
checkUefi
is_uefi=$?

# Confirm installation
echo "${r}WARNING: This will erase ALL data on $system_disk${c}"
read -rp "Do you want to continue? (y/N) " confirm
[[ ! $confirm =~ ^[Yy]$ ]] && {
    echo "${g}Installation cancelled.${c}"
    exit 1
}

# Perform disks operations
if [[ -n $second_disk ]]; then
    echo "${g}Partitioning disks...${c}"
    partitionDisk "$is_uefi" "$system_disk" "$second_disk"
    echo "${g}Setting up partitions...${c}"
    setupPartitions "$system_disk" "$is_uefi" "$second_disk"
else
    echo "${g}Formatting disk...${c}"
    partitionDisk "$is_uefi" "$system_disk"
    echo "${g}Setting up partitions...${c}"
    setupPartitions "$system_disk" "$is_uefi"
fi

echo "${g}Installing base system...${c}"
installBaseSystem

echo "${g}Configuring system...${c}"
configureSystem "$is_uefi" "$system_disk"

echo "${g}Unmounting partitions...${c}"
umount -R /mnt

echo -e "\n${g}Installation complete!${c}"
echo "You can now reboot into your new Arch Linux system."
echo "After reboot, log in as root with the password you set."
