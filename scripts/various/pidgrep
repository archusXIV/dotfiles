#!/bin/bash

# Author: Barret E (2021) <archus@protonmail.com>
# https://github.com/archusXIV/dotfiles
#
# Simple script to get the pid(s) number(s) of a running process.
# We are prompted to kill it or not...
# Of course we could use xkill but what about a background process?
# eg: pidgrep my_script_name (use sudo for root privileges).
# ----------------------------------------------
#  PID: 712 COMMAND: my_script_name
# ----------------------------------------------
#
# Do you want to kill my_script_name? [N/y]:
# Enter the pid number to kill.
# 712
# 712 my_script_name does not exist anymore...

green=$'\e[0;32m';
red=$'\e[0;31m';
nocolor=$'\e[0m';

if [[ $(ps -ef | grep -c "$1") -gt 2 ]]; then

    echo ""

    if [[ $(ps -ef | grep -c "$1") -gt 3 ]]; then

        # Here we expect more than three matches:
        # The process name itself with at least two instances,
        # the ps line matching 'grep $1' and the pid of this script too.
        # Using 'pidof -x' provides scripts pids too.

        echo "----------------------------------------------"
        echo " PIDS:"${green} $(pidof -x -S\| "$1")${nocolor} "COMMAND:" ${green}"$1"${nocolor}
        echo "----------------------------------------------"
        echo ""
        echo " ${red}There are multiple pids or instances matching $1."
        echo " Press any key for details.${nocolor}"
        echo ""

        read -rsn 1 key
        case "$key" in
            *) echo "--------------------------------------------------------------------------------"
               echo " ${green}USER    |   PID   |                               |       COMMAND${nocolor}"
               echo "--------------------------------------------------------------------------------"
               ps -ef | grep "$1" | head -n -2
               echo "--------------------------------------------------------------------------------" ;;
        esac

        echo ""
        echo " ${red}Do you wish to kill them all [a] or just one [x] or quit [q]?${nocolor}"

        read -rsn 1 answer
        case "$answer" in
            q)  echo "exiting...bye." && exit 0
            ;;
            a)  for pid in $(pidof -x "$1"); do
                    kill -KILL "$pid"
                done
                echo " ${red}"$1" ${nocolor}does not exist anymore..."
            ;;
            x)  echo " Enter the pid number to kill."
                read -r pid 
                if [[ -z $(pgrep --full "$1" | grep "$pid") ]]; then
                    echo " ${red}wrong pid number...$1 still alive."
                    exit 1
                else
                    kill -KILL "$pid" && echo " ${red}"$pid" ${nocolor}has been killed..."
                    exit 0
                fi
            ;;
        esac

    else
    
        if [[ -n $(systemctl list-units | grep "$1") ]]; then
            printf '%s\n' " ${red}$1 is a running systemd unit," \
            " ${green}please use systemctl command to manage it."
            exit 1
        elif [[ -n $(systemctl --user list-units | grep "$1") ]]; then
            printf '%s\n' " ${red}$1 is a running systemd --user unit," \
            " ${green}please use systemctl command to manage it."
            exit 1 
        fi

        echo "----------------------------------------------"
        echo " PID:" ${green}$(pgrep --full "$1" | sed -n '1p') ${nocolor}"COMMAND:" ${green}"$1"${nocolor}
        echo "----------------------------------------------"
        echo ""
        echo " ${red}Do you want to kill "$1"? [N/y]:${nocolor}"

        read -rsn1 answer
        case "$answer" in
            N|n) echo "exiting...bye." && exit 0
            ;;
            y|Y) echo " Enter the pid number to kill."
                read -r pid
                if [[ -z $(pgrep --full "$1" | grep "$pid") ]]; then
                    echo " ${red}wrong pid number...$1 still alive."
                    exit 1
                else
                    kill -KILL "$pid" && echo " ${red}"$pid" "$1" ${nocolor}does not exist anymore..."
                    exit 0
                fi
            ;;
            *)  echo "Must be 'N' or 'y', exiting..." && exit 1
            ;;
        esac

    fi

else
    echo "No such process!" && exit 1
fi
