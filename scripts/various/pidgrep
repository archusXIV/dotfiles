#!/bin/bash

# Author: Barret E (2021) <archus@protonmail.com>
# https://github.com/archusXIV/dotfiles
#
# Simple script to get the pid(s) number(s) of a running process.
# We are prompted to kill it or not...
# Of course we could use xkill but what about a background process?
# eg: pidgrep updates-manager (use sudo for root privileges).
# ---------------------------------------------------------------------------------
#  USER    |   PID   |   COMMAND
# ---------------------------------------------------------------------------------
# archang+  156439      /bin/bash /home/archangel/.local/bin/updates-manager --check 
# ---------------------------------------------------------------------------------
#
# Kill all processes [a] or just one [x] ? (press q to quit).

green=$'\e[0;32m';
red=$'\e[0;31m';
nocolor=$'\e[0m';

# first test if $1 is a service.
if [[ -n $(systemctl list-units | grep -w "$1") ]]; then
    printf '%s\n' " ${green}$1 is a running systemd unit" \
    " ${red}PLEASE USE: sudo systemctl <option> to manage it.${nocolor}"
    systemctl status "$1"* | awk '/Main PID:/{print}'
    exit 0
elif [[ -n $(systemctl --user list-units | grep -w "$1") ]]; then
    printf '%s\n' " ${green}$1 is a running systemd --user unit" \
    " ${red}PLEASE USE: systemctl --user <option> to manage it.${nocolor}"
    systemctl --user status "$1"* | awk '/Main PID:/{print}'
    exit 0
fi

# then a regular process.
if [[ -z $(pgrep -x "$1") ]]; then
    echo "No such process!"
    printf '%s\n'; exit 0
elif (( $(pgrep -u "$USER" -fc "$1") >= 1 )); then
    printf '%s\n'
    perl -E 'say "-" x 81'
    echo " ${green}USER    |   PID   |   COMMAND${nocolor}"
    perl -E 'say "-" x 81'
    ps -fp $(pgrep -x "$1") \
    | awk '
        {if(NR!=1)
        { print $1"   "$2"     "$8" "$9" "$10" "$11" "$12 }}
    '
    
    perl -E 'say "-" x 81'
    printf '%s\n'
    read -rsn 1 -p ${red}' Kill all processes [a] or just one [x] ? (press q to quit).'${nocolor} answer
    
    case "$answer" in
        q)  printf '%s\n'; exit 0
        ;;
        a)  for pid in $(pidof -x "$1"); do
                kill -KILL "$pid"
            done
            echo " ${red}$1 ${nocolor}does not exist anymore..."
            printf '%s\n'; exit 0
        ;;
        x)  printf '%s\n'
            read -r -p ${red}" Enter the pid number to kill: "${nocolor} pid
            if [[ -z $(pgrep --full "$1" | grep "$pid") ]]; then
                echo " ${red}wrong pid number...$1 still alive."
                exit 1
            else
                kill -KILL "$pid" && echo " ${red}$1 ${nocolor}does not exist anymore..."
                printf '%s\n'; exit 0
            fi
        ;;
    esac
fi
