#!/bin/bash

# Author: Barret E (2021) <archus@protonmail.com>
# https://github.com/archusXIV/dotfiles
#
# Simple script to get the pid(s) number(s) of a running process.
# We are prompted to kill it or not...
# Of course we could use xkill but what about a background process?
# eg: pidgrep my_script_name (use sudo for root privileges).
# ----------------------------------------------
#  PID: 712 COMMAND: my_script_name
# ----------------------------------------------

green=$'\e[0;32m';
red=$'\e[0;31m';
nocolor=$'\e[0m';

# first test if $1 is a service.
if [[ -n $(systemctl list-units | grep "$1") ]]; then
    printf '%s\n' " ${green}$1 is a running systemd unit," \
    " ${red}PLEASE USE: sudo systemctl <option> to manage it.${nocolor}"
    systemctl status "$1"* | awk '/Main PID:/{print " " $1" "$2" "$3}'
    exit 0
elif [[ -n $(systemctl --user list-units | grep -w "$1") ]]; then
    printf '%s\n' " ${green}$1 is a running systemd --user unit," \
    " ${red}PLEASE USE: systemctl --user <option> to manage it.${nocolor}"
    systemctl --user status "$1"* | awk '/Main PID:/{print " " $1" "$2" "$3}'
    exit 0
fi

# then a regular process.
[[ -z $(pidof -x "$1") ]] && {
    echo "No such process!"
    exit 0
}

if (( $(pgrep -fc "$1") > 1 )); then
    perl -E 'say "-" x 81'
    echo " ${green}USER    |   PID   |   COMMAND${nocolor}"
    perl -E 'say "-" x 81'
    ps -ef | grep ${1} | sed '/grep/d' | awk '{ print $1"  "$2"      "$8" "$9" "$10 }'
    perl -E 'say "-" x 81'
    echo ""
    echo " ${red}Do you wish to kill them all [a] or just one [x] or quit [q]?${nocolor}"
    read -rsn 1 answer
    case "$answer" in
        q)  echo "exiting...bye." && exit 0
        ;;
        a)  for pid in $(pidof -x "$1"); do
                kill -KILL "$pid"
            done
            echo " ${red}"$1" ${nocolor}does not exist anymore..."
        ;;
        x) 
            read -r -p " Enter the pid number to kill." pid
            if [[ -z $(pgrep --full "$1" | grep "$pid") ]]; then
                echo " ${red}wrong pid number...$1 still alive."
                exit 1
            else
                kill -KILL "$pid" && echo " ${red}"$pid" ${nocolor}has been killed..."
                exit 0
            fi
        ;;
    esac
else
    perl -E 'say "-" x 46'
    echo " PID:" ${green}$(pidof -x "$1") ${nocolor}"COMMAND:" ${green}"$1"${nocolor}
    perl -E 'say "-" x 46'
    echo ""
    echo " ${red}Do you want to kill "$1"? [N/y]:${nocolor}"
    read -rsn 1 answer
    case "$answer" in
        N|n) echo "exiting...bye." && exit 0
        ;;
        y|Y) echo " Enter the pid number to kill."
            read -r pid
            if [[ -z $(pgrep --full "$1" | grep "$pid") ]]; then
                echo " ${red}wrong pid number...$1 still alive."
                exit 1
            else
                kill -KILL "$pid" && echo " ${red}"$pid" "$1" ${nocolor}does not exist anymore..."
                exit 0
            fi
        ;;
        *)  echo "Must be 'N' or 'y', exiting..." && exit 1
        ;;
    esac
fi
