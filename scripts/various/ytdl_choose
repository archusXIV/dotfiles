#!/bin/bash

# Quickly choose and download/view an existing audio/video url in a playlists...
# first install youtube-dl yt-dlp then create a symlink:
# ln -s /usr/bin/yt-dlp ~/.local/bin/youtube-dl
# usage: ytdl_choose -{d,v} <m3u_file_name> (no extension)

: "${MPM_DIR:-$HOME/Documents/mpv-playlists-manager}"

file="$MPM_DIR/playlists/$2.m3u"
TMP1="$MPM_DIR/playlists/tmp1.m3u"
TMP2="$MPM_DIR/playlists/tmp2.m3u"

function _GetTitles {
    mapfile -t PLAYLIST < <(grep -v '#EXTM3U' "$file")

    for item in "${PLAYLIST[@]}"; do
        youtube-dl --get-title "$item"
    done | cat -n 2>/dev/null
    echo ""
}

case "$1" in
    -d) cd "$MPM_DIR"/videos || exit 1
    
        echo ""
        _GetTitles
        IFS=","; read -a array -p " Links to download, eg: 1,3,5: "
        
        for i in ${array[*]}; do
            let "i++"
            url=$(sed -n "${i}p" "$file")
            
            # Sending choosen urls in a temporary file for future operation.
            echo "$url" >> "$TMP1"
            
            [[ $url =~ 'youtube.com' ]] && {
                youtube-dl --merge-output-format mp4 --progress "$url"
                clear
            } || youtube-dl --no-warnings --progress "$url" && clear
        done
        
        # let's remove downloaded links from the original file
        # and sending the other ones in a second temporary file...
        for line in $(grep '^https' "$TMP1"); do
            grep -v "${line}" "$file" >> "$TMP2"
        done
        
        # ...that we now rename with the original file name.
        mv -f "$TMP2" "$file"
        rm "$TMP1"
        notify-send 'Downloads completed'
    ;;
    -v) echo ""
        _GetTitles
        IFS=","; read -a array -p " Links to load, eg: 1,3,5: "
        
        for i in ${array[*]}; do
            let "i++"
            url=$(sed -n "${i}p" "$file")
            echo "$url" >> "$TMP1"
        done
        
        mpv "$TMP1"
        rm "$TMP1"
    ;;
esac

