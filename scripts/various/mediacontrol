#!/bin/bash

<<ABOUT
 This script parses the output of the command:
 pactl list sink-inputs, and echoes the name of the active player.
 If the player is "Corked" it is active but not
 playing any sound (probably paused)
ABOUT

_whoisplaying() {

  declare -A players

  eval "$(pactl list sink-inputs | awk '
    $1=="Corked:" {currentCork=$2}
    $1=="application.process.binary"{
      # only echo players in the list below.
      if($NF~/mpv|cmus|mpd/)
        print "players[" $NF "]=" currentCork
    }
  ')"

  # target player priority list:
  # 1. mpv if it is running
  # 2. cmus if it is running
  # 3. mpd if it is running

  for k in "${!players[@]}"; do
    # if the player isn't corked, it is emitting sound
    # and is set as target (1).
    [[ ${players[$k]} = no ]] && target=$k
  done

  if [[ -z $target ]]; then
    if [[ -n $(pidof mpv) ]]; then
        target=mpv
    elif [[ -n $(pidof cmus) ]]; then
        target=cmus
    elif [[ -n $(pidof mpd) ]]; then
        target=mpd
    else
        target=NA
    fi
  fi

  echo "$target"
}

<<SUGGESTION
 Now you can define keybindings in your window manager config,
 down below we use 'mpvc' a command line interface for mpv.
 eg: XF86Audio{Play,Pause} mediacontrol --toggle
SUGGESTION

player=$(_whoisplaying)

case "$1" in
  --toggle )
    [[ $player = mpv  ]] && mpvc toggle
    [[ $player = cmus ]] && cmus-remote --pause
    [[ $player = mpd  ]] && mpc toggle
  ;;
  --next )
    [[ $player = mpv  ]] && mpvc next
    [[ $player = cmus ]] && cmus-remote --next
    [[ $player = mpd  ]] && mpc next
  ;;
  --prev )
    [[ $player = mpv  ]] && mpvc prev
    [[ $player = cmus ]] && cmus-remote --prev
    [[ $player = mpd  ]] && mpc prev
  ;;
  --stop )
    [[ $player = mpv  ]] && mpvc stop
    [[ $player = cmus ]] && cmus-remote --stop
    [[ $player = mpd  ]] && mpc stop
  ;;
esac
