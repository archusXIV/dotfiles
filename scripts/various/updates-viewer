#!/bin/bash

# Author: Barret E (2020-21) <archus@protonmail.con>
# https://github.com/archusXIV/dotfiles
#
# Yet Another Updates Viewer Script for Arch Linux based systems.
# Checks for updates, lists them in a readable file, update your polybar module.

ARCH="$XDG_CACHE_HOME/archlinux.list"
AUR="$XDG_CACHE_HOME/aur.list"
ARCHAUR="$XDG_CACHE_HOME/combined.list"

MIRR="/etc/pacman.d/mirrorlist"
BCKP="/etc/pacman.d/mirrorlist_bckp"

nocolor=$'\e[0m';
red=$'\e[0;31m';
green=$'\e[0;32m';

_check_updates() {
    # checking dependencies
    for deps in checkupdates polybar yay; do
        [[ -z $(command -v $deps) ]] && exit 1
    done

    while true; do

        [[ ! -f "$ARCH" ]] && touch "$ARCH"
        [[ ! -f "$AUR" ]] && touch "$AUR"
        [[ ! -f "$ARCHAUR" ]] && touch "$ARCHAUR"

        if [[ ! -e $MIRR ]]; then
            sudo reflector -c 'France' \
            -l 10 -a 24 --protocol http \
            --protocol https --sort rate \
            --save "$MIRR"
        fi

        # because we want to check out the updates list.
        checkupdates | tee "$ARCH" > "$ARCHAUR"

        if (( $(yay -Qum 2> /dev/null | wc -l) > 0 )); then
            sleep 2s
            yay -Qum | tee "$AUR" >> "$ARCHAUR"

            # purge combined.list from possible duplicates.
            if [[ -n $(uniq -d "$ARCHAUR") ]]; then
                sed -i -n \
                'G; s/\n/&&/; /^\([ -~]*\n\).*\n\1/d; s/\n//; h; P' \
                "$ARCHAUR"
            fi
        fi

        if [[ -n $(pidof polybar) ]]; then
            polybar-msg hook updates-ipc 1 >/dev/null 2>&1
        elif [[ -n $(pidof i3blocks) ]]; then
            pkill -RTMIN+10 i3blocks >/dev/null 2>&1 &
        else
            break
        fi

        sleep 3598s

    done &
}

_yesnoprompt() {
    # stolen from budRich
    local screenprompt key default options status

    default=y
    options=yn

    [[ $1 =~ -([${options}]) ]] \
        && default="${BASH_REMATCH[1]}" && shift

    screenprompt="$* [${default^^}/${options/$default/}]"

    if [[ -t 2 ]]; then
        >&2 echo "$screenprompt"

        while :; do
            read -rsn 1

            key="${REPLY:-$default}"
            [[ $key =~ [${options}] ]] || continue
            break
        done
    else
        key="$default"
    fi

    [[ ${key,,} = n ]] && status=1

    return "${status:-0}"
}

_reboot() {
    sudo cp -f "$MIRR" "$BCKP"
    sudo pacman -Syu
    sudo grub-mkconfig -o /boot/grub/grub.cfg
    sed -i '/^[a-zA-Z]/d' "$ARCHAUR"
    sudo reboot
}

_noreboot() {
    sudo cp -f "$MIRR" "$BCKP"
    sudo pacman -Syu
    sudo grub-mkconfig -o /boot/grub/grub.cfg
    sed -i '/^[a-zA-Z]/d' "$ARCHAUR"

    if [[ -n $(pidof polybar) ]]; then
        polybar-msg hook updates-ipc 1 > /dev/null 2>&1
    elif [[ -n $(pidof i3blocks) ]]; then
        pkill -SIGRTMIN+10 i3blocks > /dev/null 2>&1
    else
        echo "no running bars found" && exit 1
    fi

    exit
}

_poweroff() {
    sudo cp -f "$MIRR" "$BCKP"
    sudo pacman -Syu
    sudo grub-mkconfig -o /boot/grub/grub.cfg
    sed -i '/^[a-zA-Z]/d' "$ARCHAUR"
    sudo poweroff
}

_criteria() {
    # default is reboot.
    # by pressing Enter we will get the default action.
    echo ""
    _yesnoprompt -n "Do you wish to ${red}poweroff ${nocolor}after updates?" || {
        _yesnoprompt "Do you wish to ${red}reboot ${nocolor}after updates?" || {
            _noreboot
        }
        _reboot
    }
    _poweroff
}

_nocriteria() {
    # Here the default is '_noreboot'.
    echo ""
    _yesnoprompt -n "Do you wish to ${red}poweroff ${nocolor}after updates?" || {
        _noreboot
    }
    _poweroff
}

_make_updates() {

    declare -a criteria=( "linux" "nvidia" "mesa" "systemd" "amd-ucode" "xf86-video" "xorg" )

    for i in "${criteria[@]}"; do
        if grep -qw "$i" "$ARCHAUR"; then
            echo " ${red}REBOOT NEEDED !${nocolor}"
            _criteria
        fi
    done

    for i in "${criteria[@]}"; do
        if ! grep -qw "$i" "$ARCHAUR"; then
            echo " ${green}NO REBOOT NEEDED !${nocolor}"
            _nocriteria
        fi
    done

}

case "$1" in
    --hook) polybar-msg hook updates-ipc 1 >/dev/null 2>&1
    ;;
    --list) while read -r content; do
                echo "$content"
            done < "$ARCHAUR"

            if [[ -z $(cat "$ARCHAUR") ]]; then
                echo " ${red}No update available."
                sleep 3s
                exit 0
            else
                echo ""
                echo "${green}There are "$(grep "" -c $ARCHAUR)" updates available.${nocolor}"
                echo ""
                _yesnoprompt "Procede with updates?" || {
                    echo "bye..."
                    exit 0
                }
                if (( $(grep "" -c $AUR) > 0 )); then
                    yay -Sua
                    rm -rf "$HOME"/.ccache && {
                        (( $(grep "" -c $ARCH) > 0 )) && {
                            _make_updates
                        }
                    }
                else
                    _make_updates
                fi
            fi
    ;;
    --updates)  _check_updates
    ;;
esac
