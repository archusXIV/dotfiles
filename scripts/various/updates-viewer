#!/bin/bash

# Author: Barret E (2020-21) <archus@protonmail.con>
# https://github.com/archusXIV/dotfiles
#
# Yet Another Updates Viewer Script for Arch Linux based systems.
# Checks for updates, lists them in a readable file, update your polybar module.

: "${XDG_RUNTIME_DIR:-/run/user/1000}"

ARCH="$XDG_RUNTIME_DIR/archlinux.list"
AUR="$XDG_RUNTIME_DIR/aur.list"
ARCHAUR="$XDG_RUNTIME_DIR/combined.list"

MIRR="/etc/pacman.d/mirrorlist"
BCKP="/etc/pacman.d/mirrorlist_bckp"

nocolor=$'\e[0m';
red=$'\e[0;31m';
green=$'\e[0;32m';

# checking dependencies
for deps in checkupdates polybar yay; do
    [[ -z $(command -v "$deps") ]] && exit 1
done

_check_updates() {
    
    # avoid running multiple instances
    scriptname=$(basename $0)
    pids=($(pidof -x $scriptname))
    
    [[ ${#pids[@]} -gt 1 ]] && exit
    
    while true; do

        touch "$ARCH" "$AUR" "$ARCHAUR"
        sleep 0.5
        
        sudo reflector --country 'France' --latest 10 \
        --age 24 --protocol https --protocol http \
        --sort rate --save "$MIRR" >/dev/null 2>&1

        # because we want to check out the updates list.
        checkupdates | tee "$ARCH" > "$ARCHAUR"

        if (( $(yay -Qum 2> /dev/null | wc -l) > 0 )); then
            sleep 1.5s
            yay -Qum | tee "$AUR" >> "$ARCHAUR"

            # purge combined.list from possible duplicates.
            perl -i -ne 'print if ! $x{$_}++' "$ARCHAUR" >/dev/null 2>&1
        fi

        if [[ -n $(pidof bspwm) ]]; then
            polybar-msg -p "$(pgrep --full bspwm-bar-1)" \
            action "#updates-ipc.hook.0" >/dev/null 2>&1
        elif [[ -n $(pidof i3) ]]; then
            polybar-msg -p "$(pgrep --full i3-bar-1)" \
            action "#updates-ipc.hook.0" >/dev/null 2>&1
        else
            break
        fi

        sleep 3588s

    done &
}

_yesnoprompt() {
    # stolen from budRich
    local screenprompt key default options status

    default=y
    options=yn

    [[ $1 =~ -([${options}]) ]] \
        && default="${BASH_REMATCH[1]}" && shift

    screenprompt="$* [${default^^}/${options/$default/}]"

    if [[ -t 2 ]]; then
        >&2 echo "$screenprompt"

        while :; do
            read -rsn 1

            key="${REPLY:-$default}"
            [[ $key =~ [${options}] ]] || continue
            break
        done
    else
        key="$default"
    fi

    [[ ${key,,} = n ]] && status=1

    return "${status:-0}"
}

_reboot() {
    sudo cp -f "$MIRR" "$BCKP"
    sudo pacman -Syu --noconfirm
    sudo grub-mkconfig -o /boot/grub/grub.cfg
    sudo reboot
}

_noreboot() {
    sudo cp -f "$MIRR" "$BCKP"
    sudo pacman -Syu --noconfirm
    sudo grub-mkconfig -o /boot/grub/grub.cfg
    # cleaning our lists from old packages updates.
    sed -i '/^[a-zA-Z]/d' {$ARCH,$AUR,$ARCHAUR}

    if [[ -n $(pidof polybar) ]]; then
        polybar-msg -p "$(pgrep --full bspwm-bar-1)" \
        action "#updates-ipc.hook.0" >/dev/null 2>&1
    elif [[ -n $(pidof i3blocks) ]]; then
        pkill -SIGRTMIN+10 i3blocks > /dev/null 2>&1
    else
        echo "no running bars found" && exit 1
    fi
    exit
}

_poweroff() {
    sudo cp -f "$MIRR" "$BCKP"
    sudo pacman -Syu --noconfirm
    sudo grub-mkconfig -o /boot/grub/grub.cfg
    sudo poweroff
}

_criteria() {
    # default is reboot.
    # by pressing Enter we will get the default action.
    echo ""
    _yesnoprompt -n "Do you wish to ${red}poweroff ${nocolor}after updates?" || {
        _yesnoprompt "Do you wish to ${red}reboot ${nocolor}after updates?" || {
            _noreboot
        }
        _reboot
    }
    _poweroff
}

_nocriteria() {
    # Here the default is '_noreboot'.
    echo ""
    _yesnoprompt -n "Do you wish to ${red}poweroff ${nocolor}after updates?" || {
        _noreboot
    }
    _poweroff
}

_make_updates() {

    declare -a criteria=( "linux" "nvidia" "mesa" "systemd" "amd-ucode" "xf86-video-*" "xorg" )

    for i in "${criteria[@]}"; do
        if grep -qw "$i" "$ARCHAUR"; then
            echo " ${red}REBOOT NEEDED !${nocolor}"
            _criteria
        fi
    done

    echo " ${green}NO REBOOT NEEDED !${nocolor}"
   _nocriteria

}

_list() {

    if [[ -z $(cat "$ARCHAUR") ]]; then
        echo " ${red}No available update."
        sleep 3s
        exit 0
    else
        while read -r line; do
            echo "$line"
        done < "$ARCHAUR"
        
        echo ""
        if (( $(grep "" -c $ARCHAUR) > 1 )); then
            echo -e "${green}There are "$(grep "" -c $ARCHAUR)" available updates.\n${nocolor}"
        else
            echo -e "${green}There is "$(grep "" -c $ARCHAUR)" available update.\n${nocolor}"
        fi

        _yesnoprompt "Proceed with installation?" || {
            echo "bye..."
            sleep 2s
            exit 0
        }
        if (( $(grep "" -c $AUR) > 0 )); then
            yay -Sua
            rm -rf "$HOME"/.ccache && {
                (( $(grep "" -c $ARCH) > 0 )) && {
                    _make_updates
                }
            }
        else
            _make_updates
        fi
    fi

}

case "$1" in
    --hook  )   if [[ -n $(pidof bspwm) ]]; then
                    polybar-msg -p "$(pgrep --full bspwm-bar-1)" \
                    action "#updates-ipc.hook.0" >/dev/null 2>&1
                else
                    polybar-msg -p "$(pgrep --full i3-bar-1)" \
                    action "#updates-ipc.hook.0" >/dev/null 2>&1
                fi ;;
    --list )    _list ;;
    --check)    _check_updates ;;
esac
