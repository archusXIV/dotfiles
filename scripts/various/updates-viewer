#!/bin/bash

# Author: Barret E (2020-21) <archus@protonmail.con>
# https://github.com/archusXIV/dotfiles
#
# Yet Another Updates Viewer Script for Arch Linux based systems.
# Checks for updates, lists them in a readable file, update your polybar module.

: "${XDG_RUNTIME_DIR:-/run/user/1000}"

ARCH="$XDG_RUNTIME_DIR/archlinux.list"
AUR="$XDG_RUNTIME_DIR/aur.list"
ARCHAUR="$XDG_RUNTIME_DIR/combined.list"

MIRR="/etc/pacman.d/mirrorlist"
BCKP="/etc/pacman.d/mirrorlist_bckp"

nocolor=$'\e[0m';
red=$'\e[0;31m';
green=$'\e[0;32m';

barpid=$(pgrep --full "$(wmctrl -m | awk '/Name/{print $2}')"-bar-1)

_CheckUpdates() {
    
    # checking dependencies
    deps=( "checkupdates" "polybar" "reflector" "wmctrl" "yay" )
    for item in "${deps[@]}"; do
        [[ -z $(command -v "$item") ]] && exit 1
    done
    
    # avoids running multiple instances
    updmngr=$(basename "$0")
    pids="($(pidof -x "$updmngr"))"
    
    [[ ${#pids[@]} -gt 1 ]] && exit
    
    while true; do

        touch {"$ARCH","$AUR","$ARCHAUR"}
        sleep 0.5
        
        sudo reflector \
        --country 'France' \
        --latest 10 \
        --age 24 \
        --protocol https \
        --protocol http \
        --sort rate \
        --save "$MIRR" >/dev/null 2>&1

        # because we want to check out the updates list.
        checkupdates | tee "$ARCH" > "$ARCHAUR"

        if (( $(yay -Qum 2> /dev/null | wc -l) > 0 )); then
            sleep 1.5s
            yay -Qum | tee "$AUR" >> "$ARCHAUR"

            # purge combined.list from possible duplicates.
            perl -i -ne 'print if ! $x{$_}++' "$ARCHAUR" >/dev/null 2>&1
        fi
        
        polybar-msg -p "$barpid" \
        action "#updates-ipc.hook.0" >/dev/null 2>&1

        sleep 3588s

    done &
}

_YesNoPrompt() {
    # stolen from budRich
    local screenprompt key default options status

    default=y
    options=yn

    [[ $1 =~ -([${options}]) ]] \
        && default="${BASH_REMATCH[1]}" && shift

    screenprompt="$* [${default^^}/${options/$default/}]"

    if [[ -t 2 ]]; then
        >&2 echo "$screenprompt"

        while :; do
            read -rsn 1

            key="${REPLY:-$default}"
            [[ $key =~ [${options}] ]] || continue
            break
        done
    else
        key="$default"
    fi

    [[ ${key,,} = n ]] && status=1

    return "${status:-0}"
}

_IfGrubUpdate() {
    if grep -qw 'grub' "$ARCH"; then
        sudo grub-install \
        --target=x86_64-efi \
        --efi-directory=/boot/efi \
        --bootloader-id=ARCH_GRUB
        sudo grub-mkconfig -o /boot/grub/grub.cfg
    else
        sudo grub-mkconfig -o /boot/grub/grub.cfg
    fi
}

_Reboot() {
    sudo cp -f "$MIRR" "$BCKP"
    sudo pacman -Syu --noconfirm
    _IfGrubUpdate
    sudo reboot
}

_NoReboot() {
    sudo cp -f "$MIRR" "$BCKP"
    sudo pacman -Syu --noconfirm
    _IfGrubUpdate
    
    # cleaning our lists from old packages updates.
    sed -i '/^[a-zA-Z]/d' {"$ARCH","$AUR","$ARCHAUR"}
    
    polybar-msg -p "$barpid" \
    action "#updates-ipc.hook.0" >/dev/null 2>&1 \
    
    exit 0
}

_Poweroff() {
    sudo cp -f "$MIRR" "$BCKP"
    sudo pacman -Syu --noconfirm
    _IfGrubUpdate
    sudo poweroff
}

_Criteria() {
    # default is reboot.
    # by pressing Enter we will get the default action.
    echo ""
    _YesNoPrompt -n "Do you wish to ${red}poweroff ${nocolor}after updates?" || {
        _YesNoPrompt "Do you wish to ${red}reboot ${nocolor}after updates?" || {
            _NoReboot
        }
        _Reboot
    }
    _Poweroff
}

_NoCriteria() {
    # Here the default is '_NoReboot'.
    echo ""
    _YesNoPrompt -n "Do you wish to ${red}poweroff ${nocolor}after updates?" || {
        _NoReboot
    }
    _Poweroff
}

_MakeUpdates() {

    declare -a criteria=( "amd-ucode" "grub" "linux" "mesa" "nvidia" "systemd" "xf86-video-*" "xorg" )
    
    for item in "${criteria[@]}"; do
        if grep -qw "$item" "$ARCHAUR"; then
            echo " ${red}REBOOT NEEDED !${nocolor}"
            _Criteria
        fi
    done

    echo " ${green}NO REBOOT NEEDED !${nocolor}"
    
    _NoCriteria

}

_List() {

    if [[ -z $(cat "$ARCHAUR") ]]; then
        echo " ${red}No available update."
        sleep 3s
        return 0
    else
        while read -r line; do
            echo "$line"
        done < "$ARCHAUR"
        
        echo ""
         if (( $(grep "" -c "$ARCHAUR") > 1 )); then
            echo -e " ${green}There are $(grep "" -c "$ARCHAUR") available updates.\n${nocolor}"
        else
            echo -e " ${green}There is $(grep "" -c "$ARCHAUR") available update.\n${nocolor}"
        fi

        _YesNoPrompt "Proceed with installation?" || {
            echo "bye..."
            sleep 2s
            return 0
        }
        
        if (( $(grep "" -c "$AUR") > 0 )); then
            yay -Sua
            
            if (( $(grep "" -c "$AUR") == $(grep "" -c "$ARCHAUR") )); then
                sed -i '/^[a-zA-Z]/d' {"$AUR","$ARCHAUR"}
                polybar-msg -p "$barpid" \
                action "#updates-ipc.hook.1" >/dev/null 2>&1
            else
                sed -i '/^[a-zA-Z]/d' "$AUR"
            fi
            
            rm -rf "$HOME"/.ccache && {
                (( $(grep "" -c "$ARCH") > 0 )) && _MakeUpdates
            }
        else
            _MakeUpdates
        fi
    fi

}

case "$1" in
    --hook  )   polybar-msg -p "$barpid" \
                action "#updates-ipc.hook.0" >/dev/null 2>&1
    ;;
    --list )    _List
    ;;
    --check)    _CheckUpdates
    ;;
esac
