#!/usr/bin/env bash

# Author: Barret E <archus@protonmail.com>
# <https://www.youtube.com/@linuxinfrench9388/featured>
# Licensed under GPLv3
#
# YAYTV (YetAnotherYouTubeViewer)
# Search and watch youtube videos using fzf.
# mpv is the DEFAULT player.
# Usage: yaytv --results 25 search_string
#        yaytv --fzf (to relaunch the TUI if exited before)
# Or :   yaytv --results 25 --player <your_player_command> search_string
#
# Dependencies: fzf, jq, yt-dlp
# Optionals: mpv, socat (to interact with mpv through its socket)
# shellcheck disable=SC2002

VERSION="v2.3"
num=50
player="mpv"
tmp_dir="$HOME/.cache"
playlist="$tmp_dir/ytsearch.m3u"
MPVSOCKET="/tmp/mpvsocket"

for pkg in fzf jq yt-dlp; do
    command -v "$pkg" >/dev/null || {
        printf '%s\n' " $pkg isn't installed...exiting"
        exit 127
    }
done

cd "$tmp_dir" || exit 1

# resize the window for the fzf menu
echo -ne '\e[8;32;124t'

_fzfPlayer() {

    __makePlaylistIndexes() (
        index=0
        while read -r line; do
            echo "$index" "$line" >> ./yaytvIndexeslist
            ((index++))
        done < "${0##*/}.titles"
        unset line
        echo "starting fzf..." > ./yaytvSelectedFile
    )

    if [[ -s "${0##*/}.titles" ]]; then
        __makePlaylistIndexes
    else
        return 1
    fi

    __currentMediaTitle() (
        echo '{ "command": ["get_property", "media-title"] }' \
        | socat - "${MPVSOCKET}" \
        | awk -F'"' '{ print "\033[32m"" Now playing: " "\033[33m"$4 }'
    )

    __currentMediaIndex() (
        local index lenght
        index=$(awk '{print $1}' yaytvSelectedFile)
        lenght="${#index}"

        if [[ $lenght -eq 1 ]]; then
            index="${index:0:1}"
        elif [[ $lenght -eq 2 ]]; then
            index="${index:0:2}"
        else
            index="${index:0:3}"
        fi
        echo playlist-play-index "$index" | socat - "$MPVSOCKET"
    )

    export -f __currentMediaTitle
    export -f __currentMediaIndex
    export FZF_DEFAULT_OPTS='
		--color=header:bold:#87afaf
		--color=fg:#af5faa,fg+:#d0d0d0,bg:#21242b,bg+:#2e3944
		--color=hl:#5f87af,hl+:#5fd7ff,info:#afaf87
		--color=prompt:#d7005f,spinner:#af5fff,pointer:#af5fff
		--color=border:#554476,label:#aeaeae,query:#d9d9d9
    '

    while [[ -f ./yaytvSelectedFile ]]; do
        fzf --reverse --pointer '|>' --scroll-off=5 --no-scrollbar --no-multi --header-first \
        --border rounded --border-label "| yaytv player $VERSION |" --border-label-pos='101:bottom' --prompt='Search: ' \
        --header '   Enter:play, Left:-30s, Right:+30s, ^N:next, ^P:prev, ^T:toggle pause, ^R:reload, ESC:quit player, ^X:quit mpv:
   ──────────────────────────────────────────────────────────────────────────────────────────────────────────────
        ' \
        --preview-window=down:1 \
        --preview="(__currentMediaTitle)" \
        --bind "enter:become:(echo {} > ./yaytvSelectedFile; sleep 0.1; __currentMediaIndex)" \
        --bind "ctrl-n:become(echo playlist_next | socat - $MPVSOCKET; __currentMediaTitle)" \
        --bind "ctrl-p:become(echo playlist_prev | socat - $MPVSOCKET; __currentMediaTitle)" \
        --bind "ctrl-t:become(echo cycle pause | socat - $MPVSOCKET)" \
        --bind "ctrl-r:become(__currentMediaTitle)" \
        --bind "left:become(echo seek -30 | socat - ${MPVSOCKET})" \
        --bind "right:become(echo seek 30 | socat - ${MPVSOCKET})" \
        --bind "ctrl-x:become(echo stop | socat - $MPVSOCKET; rm ./{yaytvSelectedFile,yaytvIndexeslist})" \
        --bind "esc:become(rm ./{yaytvSelectedFile,yaytvIndexeslist})" < yaytvIndexeslist
	done

    export FZF_DEFAULT_OPTS=

}

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            echo -e "\nUSAGE: ${0##*/} [OPTIONS] <search string>\n"
            echo -e "Search and play YouTube videos.\n"
            echo "  -h, --help     Show this help."
            echo "  -r, --results  Number of search results to fetch, defaults to 50."
            echo "  -p, --player   Command to be called with URLs of selected videos,"
            echo "                 DEFAULT is mpv."
            echo "  -f, --fzf      Launch the fzf playlist again WHILE mpv is running."
            echo "  -v, --version  Print version."
            echo "  --             Stops interpreting the following arguments as options."
            exit
        ;;
        -r|--results)
            num="$2"
            if ! [[ $num =~ ^[0-9]+$ ]]; then
                echo "$num is not an integer!"
                exit 1
            fi
            shift 2
        ;;
        -p|--player)
            player="$2"
            if [[ ! $player ]]; then
                echo "Player command is missing!"
                exit 1
            fi
            shift 2
        ;;
        -v|--version)
            echo "${0##*/} $VERSION"
            exit
        ;;
        -f|--fzf)
            _fzfPlayer
            exit
        ;;
        --)
            shift
            break
        ;;
        *)
            break
        ;;
    esac
done

if [[ $# -eq 0 ]]; then
    ${0##*/} --help
    exit 1
fi

jqSearch='.title + "\u0000", ., "\n"'
jqPreview='
    "\u001b[0;1m" + .title + "\u001b[0m" + "\n" + "duration: " + if (.duration | isfinite) then
    (.duration_string | tostring) else "?" end + " | views: " + if (.view_count | isfinite) then
    (.view_count | tostring) else "?" end + " | " + .uploader + "\n\n" + .description + "\n\n\n"
'
jqPreviewCmd="cat {f2} \
    | jq -jr $(printf '%q' "$jqPreview");[ '{n}' != '{+n}' ] \
    && echo -e '\033[33;1m---   Playlist   ---\033[0m' && \
    cat {+f2} | jq -jr $(printf '%q' "$jqPreview")
"
fzfGrabLinks=$(
    yt-dlp ytsearch"$num":"$*" -j --flat-playlist \
    | jq -r 'select(.title | startswith("#") | not)' \
    | jq -cj "$jqSearch" \
    | fzf \
        --multi --cycle --reverse --pointer '<>' --scroll-off=5 --prompt='Search: ' \
        --header='Select with Tab, Enter to confirm, Escape to cancel' \
        --border rounded --border-label "| Results for: $* |" \
        --preview="$jqPreviewCmd" --preview-window="down:2" -n 1 --with-nth=1 -d '\0' --ansi \
    | cut -d '' -f2 \
    | jq --raw-output '(.webpage_url, .title)'
)

if [[ -z $fzfGrabLinks ]]; then
    echo "No video selected!"
    exit
else
    echo "$fzfGrabLinks" | grep -v '^https' > "${0##*/}.titles"
    echo "$fzfGrabLinks" | grep '^https' > "${0##*/}.m3u"

    if [[ $player == mpv ]]; then
        cat "${0##*/}.m3u" \
        | "$player" --cache=yes --idle=no --no-terminal --playlist=- &
    else
        cat "${0##*/}.m3u" > "$playlist"
        "$player" "$playlist"
    fi

    if [[ $player == mpv ]]; then
        read -rp ' Launch player [Y/n]: ' answer
        case "$answer" in
            y|Y) _fzfPlayer ;;
            *) exit 0 ;;
        esac
    fi
fi
