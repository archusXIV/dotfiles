#!/bin/bash

#  Author: Barret E (2021) <archus@protonmail.com>
#  Dependencies: ffmpeg, obs, polybar, rofi, simplescreenrecorder.
#  Feel free to add/remove dependency group item to fit your settings.
#
#  This script uses three screen grabbing methods:
#  obs, simplescreenrecorder or anohter of my scripts called rofi_record-audio.
#  Of course you will have to set profiles in simplescreenrecorder gui first
#  to be able to use them later here.

# checking dependencies
declare -a deps=( "ffmpeg" "obs" "polybar" "rofi" "simplescreenrecorder" )

for i in "${deps[@]}"; do
    [[ -z $(command -v "$i") ]] && {
        notify-send "$i isn 't installed, bye..."
        exit 127
    }
done

# getting the right bar pid
if [[ -n $(pidof bspwm) ]]; then
    barpid=$(pgrep --full bspwm-bar-2)
else
    barpid=$(pgrep --full i3-bar-2)
fi

_main() {

    case "$1" in
        -a) rofi_record-audio &   # external script
            exit
        ;;
        -o) if [[ -z $(pidof -x ${deps[1]}) ]]; then
                volume_control source --toggle
                obs &
                record_chrono 2 &
            else
                notify-send "obs-studio is already running..."
            fi
        ;;
        -v) _simplescreenrecorder # calls functions below
            exit
        ;;
        -k) if [[ -z $(pidof -x ${deps[1]}) ]]; then
                pactl set-source-volume @DEFAULT_SOURCE@ 0%
                pactl set-source-mute @DEFAULT_SOURCE@ 1
                polybar-msg -p ${barpid} action "#mic-ipc.hook.0" >/dev/null 2>&1
                record_chrono -k
            fi
        ;;
    esac

}

_simplescreenrecorder() {

    local SCREENS triplescreen screen1 screen2 screen3 WM

    WM=$(wmctrl -m | awk '/Name/{print $2}')

    # Profiles:
    SCREENS="$XDG_CONFIG_HOME/simplescreenrecorder/input-profiles"
    triplescreen="$SCREENS/triplescreen.conf"
    screen1="$SCREENS/screen1.conf"
    screen2="$SCREENS/screen2.conf"
    screen3="$SCREENS/screen3.conf"

    _all_monitors() (

        amixer set Capture,0 75%,75% unmute cap >/dev/null 2>&1
        polybar-msg -p ${barpid} action "#mic-ipc.hook.1" >/dev/null 2>&1
        record_chrono 2 &

        [[ $WM == 'bspwm' ]] && bspc desktop --focus '^5' \
        || [[ $WM == 'i3' ]] && i3-msg workspace 5

        simplescreenrecorder \
        --start-hidden \
        --settingsfile="$triplescreen" \
        --start-recording && {

            killall --quiet record_chrono
            amixer set Capture,0 0%,0% mute nocap >/dev/null 2>&1
            polybar-msg -p ${barpid} action "#mic-ipc.hook.0" >/dev/null 2>&1
            polybar-msg -p ${barpid} action "#chrono-ipc-2.hook.1" >/dev/null 2>&1

        }
    )

    _screencast1() (

        amixer set Capture,0 75%,75% unmute cap >/dev/null 2>&1
        polybar-msg -p ${barpid} action "#mic-ipc.hook.1" >/dev/null 2>&1
        record_chrono 1 &

        [[ $WM == 'bspwm' ]] && bspc desktop --focus '^1' \
        || [[ $WM == 'i3' ]] && i3-msg workspace 1

        simplescreenrecorder \
        --start-hidden \
        --settingsfile="$screen1" \
        --start-recording && {

            killall --quiet record_chrono
            amixer set Capture,0 0%,0% mute nocap >/dev/null 2>&1
            polybar-msg -p ${barpid} action "#mic-ipc.hook.0" >/dev/null 2>&1
            polybar-msg -p ${barpid} action "#chrono-ipc-2.hook.1" >/dev/null 2>&1

        }
    )

    _screencast2() (

        amixer set Capture,0 75%,75% unmute cap >/dev/null 2>&1
        polybar-msg -p ${barpid} action "#mic-ipc.hook.1" >/dev/null 2>&1
        record_chrono 3 &

        [[ $WM == 'bspwm' ]] && bspc desktop --focus '^5' \
        || [[ $WM == 'i3' ]] && i3-msg workspace 5

        simplescreenrecorder \
        --start-hidden \
        --settingsfile="$screen2" \
        --start-recording && {

            killall --quiet record_chrono
            amixer set Capture,0 0%,0% mute nocap >/dev/null 2>&1
            polybar-msg -p ${barpid} action "#mic-ipc.hook.0" >/dev/null 2>&1
            polybar-msg -p ${barpid} action "#chrono-ipc-2.hook.1" >/dev/null 2>&1

        }
    )

    _screencast3() (

        amixer set Capture,0 75%,75% unmute cap >/dev/null 2>&1
        polybar-msg -p ${barpid} action "#mic-ipc.hook.1" >/dev/null 2>&1
        record_chrono 2 &

        [[ $WM == 'bspwm' ]] && bspc desktop --focus '^10' \
        || [[ $WM == 'i3' ]] && i3-msg workspace 10

        simplescreenrecorder \
        --start-hidden \
        --settingsfile="$screen3" \
        --start-recording && {

            killall --quiet record_chrono
            amixer set Capture,0 0%,0% mute nocap >/dev/null 2>&1
            polybar-msg -p ${barpid} action "#mic-ipc.hook.0" >/dev/null 2>&1
            polybar-msg -p ${barpid} action "#chrono-ipc-2.hook.1" >/dev/null 2>&1

        }
    )

    # testing our monitors setup to launch the right options.
    if [[ $(xrandr | grep -cw connected) -eq 1 ]]; then
        _screencast1
    elif [[ $(xrandr | grep -cw connected) -eq 2 ]]; then
        choice=$(printf "all_monitors\\nmonitor1\\nmonitor2" \
        | rofi -normal-window -dmenu -i -width 20 -hide-scrollbar \
        -line-padding 4 -padding 20 -lines 3 -p 'Pick a monitor to capture')
        case "$choice" in
            all_monitors) _all_monitors ;;
            monitor1    ) _screencast1  ;;
            monitor2    ) _screencast2  ;;
        esac
    elif [[ $(xrandr | grep -cw connected) -eq 3 ]]; then
        choice=$(printf "all_monitors\\nmonitor1\\nmonitor2\\nmonitor3" \
        | rofi -normal-window -dmenu -i -width 20 -hide-scrollbar \
        -line-padding 4 -padding 20 -lines 4 -p 'Pick a monitor to capture')
        case "$choice" in
            all_monitors) _all_monitors ;;
            monitor1    ) _screencast1  ;;
            monitor2    ) _screencast2  ;;
            monitor3    ) _screencast3  ;;
        esac
    else
        exit
    fi

}

_main "${@}"
