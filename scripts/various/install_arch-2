#!/bin/bash

# Author: Barret E <archus@protonmail.com>
# Youtube channel: <https://www.youtube.com/@linuxinfrench9388>
# Idea inspired by Yannick Vollenberg <https://nordri.vollenberg.ca>
# As the script name says, this will install an Achlinux base system
# on a simple disk layout following the arch way to Keep It Simple Stupid.
# Use it at your own risks....lol
# Download the script when logged in the arch live iso:
# curl -sL "https://raw.githubusercontent.com/archusXIV/dotfiles/main/scripts/various/install_arch-2" -O


# Colors
nc=$'\e[0;m';
g=$'\e[1;32m';
r=$'\e[0;31m';
y=$'\e[93m';

description() {
    clear
    setfont sun12x22
    cat << EOF

    # French
    ${g}Ce script va installer une Archlinux en UEFI sur le disque de votre choix
    si il y en a plusieurs, le partitionnement reste manuel et cfdisk sera utilisé
    pour mettre en place la table de partitions. ${y}(/home doit être sur une partition séparée).
    Pour le moment seul UN disque peut-être utilisé.${nc}
    
    # English
    ${g}This script will install Archlinux in UEFI mode on the drive of your choice
    if there are several, the partitioning is not automated and cfdisk will be used
    to set up the partition table. ${y}(/home must be on a separate partition).
    For the moment only ONE drive can be used.
    
    ${g}Partitions layout examples:${nc}
    sda1=/boot/efi sda2=/ sda3=/home
    or
    sdb1=/boot/efi sdb2=/ sdb3=/home
    etc...
    
EOF
    sleep 10s
}

diskchoice() {
    # if there are more than one usable drive
    if [[ $(lsblk -I 8 -n | wc -l) -gt 1 ]]; then
        # This will exclude weird things like: loop0, sr0
        lsblk -I 8
        printf '%s\n'
        read -r -p "${g}"' Choose a disk for installation, eg: sda or sdb: '"${nc}" drive
        case "$drive" in
            sda)
                HWDISK=$(lsblk -dno NAME -I 8 | sed -n '1p')
                printf '%s\n' " ${g}You selected: $HWDISK"
                sleep 1s
            ;;
            sdb)
                HWDISK=$(lsblk -dno NAME -I 8 | sed -n '2p')
                printf '%s\n' " ${g}You selected: $HWDISK"
                sleep 1s
            ;;
            sdc)
                HWDISK=$(lsblk -dno NAME -I 8 | sed -n '3p')
                printf '%s\n' " ${g}You selected: $HWDISK"
                sleep 1s
            ;;
        esac
    else
        HWDISK=$(lsblk -dno NAME -I 8 | sed -n '1p')
        printf '%s\n' " ${g}automatic selection: $HWDISK"
        sleep 1s
    fi

}

default_inputs() {
    # Here we define the default settings that the user
    # should fill but doesn't, just before we enter the chroot
    # if the variables are empty...
    case "$1" in
        -m)
            [[ -z $machine ]] && {
                printf '%s' " ${r}EMPTY host name!"
                printf '%s\n' " host name set to archlinux...${nc}"
                machine="archlinux"
                sleep 2s
            }
        ;;
        -l)
            [[ -z $language ]] && {
                printf '%s' " ${r}your language is not set!"
                printf '%s\n' " language set to english US...${nc}"
                lang="LANG=en_US.UTF-8"
                sleep 2s
            }
        ;;
        -k)
            [[ -z $keymap ]] && {
                printf '%s' " ${r}your keyboard layout is not set!"
                printf '%s\n' " keyboard layout set to us...${nc}"
                key="KEYMAP=us" font="FONT=lat2-16"
                sleep 2s
            }
        ;;
    esac
}

install() {
    clear
    local LOCATION TIMEZONE A B C
    
    LOCATION=$(curl --fail -s https://ipapi.co/country)
    TIMEZONE=$(curl --fail -s https://ipapi.co/timezone)
    A="1" B="2" C="3"
    
    if [[ $(id -u) == 0 ]]; then
        # Setting faster packages downloads.
        sed -i 's/#ParallelDownloads/ParallelDownloads/' /etc/pacman.conf
        
        if [[ -n $(ls /sys/firmware/efi/efivars) ]]; then
            printf '%s\n' " ${g}Success, UEFI system detected.${nc}"
            sleep 2s
            
            timedatectl set-ntp true && timedatectl \
            && printf '%s\n' " ${g}Success, system clock updated.${nc}"
            sleep 2s
            
            diskchoice
            cfdisk /dev/$HWDISK
            
            printf '%s\n' " ${g}Formating and mounting partitions.${nc}"
            sleep 1s
            
            mkfs.fat -F32 /dev/$HWDISK$A \
            && mkfs.ext4 /dev/$HWDISK$B \
            && mkfs.ext4 /dev/$HWDISK$C \
            && mount /dev/$HWDISK$B /mnt \
            && mkdir -p /mnt/{boot/efi,home} \
            && mount /dev/$HWDISK$A /mnt/boot/efi \
            && mount /dev/$HWDISK$C /mnt/home \
            && lsblk && sleep 2s
            
            printf '%s' " ${g}Getting fresh mirrors list for $LOCATION...${nc}"
            sleep 1s
            
            reflector --verbose --country "$LOCATION" --latest 10 --age 24 \
            --protocol https --sort rate --save /etc/pacman.d/mirrorlist
            
            printf '%s\n' " ${g}Installing Arch-Linux base system...${nc}"
            sleep 1s
            
            # pacstrap will not use the iso's archlinux-keyring.
            pacstrap -K /mnt base base-devel linux linux-headers linux-firmware \
            pacman-contrib grub efibootmgr os-prober gptfdisk fatresize networkmanager \
            reflector zip unzip p7zip nano wget vim mc git syslog-ng mtools usbutils \
            dosfstools lsb-release exfat-utils bash-completion man-db man-pages \
            xf86-input-{elographics,evdev,libinput,synaptics,vmmouse,void,wacom} \
            xf86-video-{amdgpu,ati,dummy,fbdev,intel,nouveau,openchrome,qxl,sisusb,vesa}
            
            cat /etc/pacman.d/mirrorlist > /mnt/etc/pacman.d/mirrorlist \
            && cat /etc/pacman.conf > /mnt/etc/pacman.conf
            
            printf '%s\n' " ${g}Generating fstab...${nc}"
            genfstab -U -p /mnt >> /mnt/etc/fstab \
            && sleep 2s
            
            printf '%s\n' " ${g}Entering installed system for configuration.${nc}"
            sleep 2s
            
            # if some user inputs are empty they will be set to defaults
            read -r -p "${g}"' Please fill the machine name: '"${nc}" machine
            default_inputs -m
            
            printf '%s\n'
            read -r -p "${g}"' Choose your language: [F]rench (France), [E]nglish (US): '"${nc}" language
            case "$language" in
                f|F) lang="LANG=fr_FR.UTF-8" ;;
                e|E) lang="LANG=en_US.UTF-8" ;;
            esac
            default_inputs -l
            
            printf '%s\n'
            read -r -p "${g}"' Choose your keyboard layout: [F]rench (fr), [E]nglish (us): '"${nc}" keymap
            case "$keymap" in
                f|F) key="KEYMAP=fr-latin9"
                    font="FONT=eurlatgr" ;;
                e|E) key="KEYMAP=us"
                    font="FONT=lat2-16" ;;
            esac
            default_inputs -k
            
            arch-chroot /mnt /bin/bash -c "
                ln -sf /usr/share/zoneinfo/$TIMEZONE /etc/localtime \
                && hwclock --systohc --utc \
                && echo $machine > /etc/hostname \
                && echo $key > /etc/vconsole.conf \
                && echo $font >> /etc/vconsole.conf \
                && echo ' ${g}Choose your locales using nano${nc}' && sleep 2s \
                && nano /etc/locale.gen && locale-gen \
                && echo $lang > /etc/locale.conf \
                && echo LC_COLLATE=C >> /etc/locale.conf \
                && echo '127.0.0.1    localhost' >> /etc/hosts \
                && echo '::1          localhost' >> /etc/hosts \
                && echo '127.0.1.1    $machine.localdomain    $machine' >> /etc/hosts \
                && mkinitcpio -p linux && clear \
                && echo ' ${g}Change the $USER password: ${nc}' \
                && passwd $USER \
                && echo ' ${g}Installing grub menu on first sector of /dev/$HWDISK, please be patient...${nc}' \
                && grub-install --target=x86_64-efi --efi-directory=/boot/efi \
                --bootloader-id=ARCH_GRUB && grub-mkconfig -o /boot/grub/grub.cfg \
                && systemctl enable {NetworkManager,systemd-timesyncd}.service \
                && timedatectl set-ntp true && exit
            "
            clear
            printf '%s\n'
            read -r -p "${g}"' Do you want to enter the new installed system? [Y/n] '"${nc}" enter
            case "$enter" in
                y|Y)
                    arch-chroot /mnt
                ;;
                n|N)
                    printf '%s' " ${g}Unmounting /mnt and rebooting.${nc}"
                    sleep 2s
                    umount -R /mnt && reboot
                ;;
                *)
                    arch-chroot /mnt
                ;;
            esac
        else
            clear
            printf '%s\n'
            printf '%s' " ${r}NONE UEFI SYSTEM, exiting...${nc}"
            sleep 3s && exit 0
        fi
    else
        clear
        printf '%s\n'
        printf '%s' " ${r}ONLY ROOT USER CAN RUN THIS SCRIPT, exiting...${nc}"
        sleep 3s && exit 0
    fi
    
}

description
install
