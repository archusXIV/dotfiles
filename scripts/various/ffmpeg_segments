#!/usr/bin/env bash

# Author: LinuxInFrench (2025) <https://github.com/archusXIV/>
# Script name: ffmpeg_clips
# License: GPlv2
# In order to work properly this script acts on ONE file at a time and ONLY
# if the current directory contains ONE file.
# Dependencies: ffmpeg, GNU/sed
# Don't forget to install several audio codex/plugins.
#
# When launched, first the duration of the current file will appear,
# just so you know at what time to cut out your media file.
# Enter time clips format as such: HH:MM:SS
# You will be asked for the start and the end of your clips.
# Ffmpeg will encode the new file for precise cutting operation.
# At the end you will also be asked if you want the script to concatenate clips.

cd "$HOME"/Documents/Videos/concat || exit 1

file="$1"
filename="${file%.*}"
extension="${file##*.}"
duration=$(ffmpeg -i "${file}" 2>&1 | awk '/Duration/{print substr($2, 1, length($2)-4)}')

_ConcatClips() {
    local ffmpegInputFile="./files.txt"
    declare -a mpFourFiles=(*.mp4)
    declare -a mkvFiles=(*.mkv)
    declare -a filesWithSpaces=(* *)
    if ((${#mpFourFiles[@]} >= 2 || ${#mkvFiles[@]} >= 2)); then 
        if ((${#filesWithSpaces[@]} >= 1)); then
            find . -depth -name "* *" -exec bash -c '
                for f in "$@"; do
                    n="${f##*/}"
                    mv -n "$f" "${f%/*}/${n// /_}"
                done
            ' dummy {} +
        fi
        find . -name "*.mp4" -o -name "*.mkv" \
        | sed ':\ :\ :g;s/^/file /' | sort -d > "$ffmpegInputFile"
        ffmpeg \
        -safe 0 \
        -f concat \
        -i "$ffmpegInputFile" \
        -c copy "$1" >/dev/null 2>&1
        mv "$1" ..
        rm ./*
    fi
}

_CheckTimeFormat() {
    [[ ! $1 =~ ^[0-9]{2}:[0-9]{2}:[0-9]{2}$ ]] && {
        ((clip--))
        printf '%s\n' " Not a valid time format $1"
        sleep 2
        clear
    }
}

_MakeClips() {
    while true; do
        echo -e "\n Duration = ${duration}\n MAKE SURE ${PWD##*/} DIRECTORY CONTAINS ONLY ONE FILE\n"
        if ((clip == 0)); then
            read -rn 1 -p ' Would you like to cut out clips? [Y/n] or [Q]uit: ' choice
        else
            read -rn 1 -p ' Would you like to cut out MORE clips? [Y/n] or [Q]uit: ' choice
        fi
        case "${choice}" in
            [nN]) clear; break ;;
            [qQ]) printf '%s\n' " Selection aborted"; exit 0 ;;
            [yY])
                ((clip++))
                printf '\n'
                read -rp " What time does clip ${clip} starts?: " start
                _CheckTimeFormat "${start}" && continue
                read -rp " What time does clip ${clip} ends?: " end
                _CheckTimeFormat "${end}" && continue
                printf '%s\n' " ...Clip ${clip} starts at ${start}, ends at ${end}" \
                " ...Cutting out ${filename} video clip ${clip}, please be patient."
                ffmpeg \
                -i "${file}" \
                -ss "${start}" \
                -to "${end}" \
                -c:a aac \
                -c:v libx264 \
                -copyts \
                "${filename}-part${clip}.${extension}" >/dev/null 2>&1
                clear
            ;;
            *)
                printf '%s\n' " Wrong option ${choice}"
                sleep 2
                continue
            ;;
        esac
    done
}

clear
clip=0
_MakeClips "${clip}"
clear

if ((clip == 1)); then
    mv "${file}" ..
    mv "${filename}-part1.${extension}" "${filename}"."${extension}"
elif ((clip > 1)); then
    printf '\n'
    read -rn 1 -p " Concatenate the ${clip} generated clips? [Y/n]: " join
    case "${join}" in
        [yY])
            mv "${file}" ..
            clear
            printf '\n%s\n' " Set a new filename (no extension): "
            read -r newname
            _ConcatClips "${newname}.${extension}"
            printf '%s\n' " All done."
            sleep 2
            clear
        ;;
        *) exit 0 ;;
    esac
fi
