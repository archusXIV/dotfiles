#!/bin/bash
## This is a part of main script: mpv-menu.

_stop_mpvipc() {
    [[ $(systemctl --user list-units | awk '/mpv-ipc/{print $3}') == 'active' ]] \
        && systemctl --user stop mpv-ipc.service
}

_load_audio() {
    mpvc -a -Q "$QUEUE"
    _get_mpv_title
    _clean_tmp_dir
    clear
    _menu
}

_load_video() {

    echo ""
    if [[ ! -f "$COMPLETE_INFO" ]]; then
        while read -r line; do
            youtube-dl -j $line \
            | jq '(.title)' >> "$COMPLETE_INFO"
        done < <(cat "$URLS_INFO")
        mapfile -t PLAYLIST < <(cat "$URLS_INFO")
    else
        mapfile -t PLAYLIST < <(cat "$URLS_INFO")
    fi

    for i in "${PLAYLIST[@]}"; do
        echo ""
        echo -e " ${green}Playing: $(cat "$COMPLETE_INFO" | sed -n '1p')\n"
        echo " ${red}Press 'q' in mpv to play next video.${nocolor}"
        mpv --ytdl-format=137+251 "$i" >/dev/null 2>&1 \
        || mpv --ytdl-format=22 "$i" >/dev/null 2>&1 \
        || mpv "$i" >/dev/null 2>&1
        sed -i '1d' "$COMPLETE_INFO"
        clear
    done

    _clean_tmp_dir
    _check_queue

}

_load_playlist() {

    cd "$playlists_dir"

    PS3=""
    echo -e " ${green}Select a playlist to load (Press 'q' to quit mpv):\n${nocolor}"
    select list in $(find . -name "*.m3u" | sort -d | sed 's,.*/,,'); do

        if ! grep -q -e '^https' "$list"; then
            echo " ${red}$list is empty...${nocolor}"
            sleep 3s
            break
        fi

        # $list may also contain a {playlist url}, so let's extract videos from,
        # remove {playlist url} and grab videos' titles.(in the second while loop).
        if [[ $(grep -e 'playlist?list=' "$list") ]]; then
            echo ""
            echo -e " ${green}Checking youtube playlist availability...please wait.${nocolor}\n"
            [[ -f $URLS_INFO ]] && rm "$URLS_INFO"

            while read -r line; do
                youtube-dl -j $line \
                | jq '(.webpage_url)' \
                | cat | sed 's/"//g' >> "$URLS_INFO"
            done < <(cat "$list" | sed '/#EXTM3U/d')

            cat "$URLS_INFO" >> "$list"

            # Cleaning $list...
            sed -i '/playlist/d' "$list"
            sed -i -n 'G; s/\n/&&/; /^\([ -~]*\n\).*\n\1/d; s/\n//; h; P' "$list"
            _check_code_load
        else
            cat "$list" | sed '/#EXTM3U/d' > "$URLS_INFO"
        fi

        echo -e " ${green}Getting videos titles...please wait.${nocolor}\n"

        while read -r line; do
            youtube-dl -j $line \
            | jq '(.title)' >> "$COMPLETE_INFO"
        done < <(cat "$list" | sed '/#EXTM3U/d')

        [[ -n $(uniq -d "$COMPLETE_INFO") ]] && {
            echo " ${red}Removing double entries...${nocolor}"
            sleep 2s
            sed -i -n \
            'G; s/\n/&&/; /^\([ -~]*\n\).*\n\1/d; s/\n//; h; P' \
            "$COMPLETE_INFO"
        }

        cat -n "$COMPLETE_INFO"

        echo ""
        echo -e " ${green}Just load [l] download audio [a] or download video [v] \n (Press '^C' to quit youtube-dl):${nocolor} "
        read -rsn 1 letter
        case "$letter" in
            a)  _download_audio ;;
            l)  echo ""
                read -rsn 1 -p  ${green}' Load audio only [a] or video [v] ?: '${nocolor} load
                clear
                case "$load" in
                    a)  _check_code_load && mpvc -a -Q "$list"; _get_mpv_title ;;
                    v)  _check_code_load && _load_video ;;
                    *)  echo " ${red} Wrong option! Wait and try again...${nocolor}"
                        sleep 3s ;;
                esac

                _clean_tmp_dir
                clear
                _menu ;;
            v)  _download_video ;;
            *)  echo " ${red} Wrong option! Wait and try again...${nocolor}"
                sleep 3s ;;
        esac

    done

    clear
    _menu

}

_load_local() {
    local VIDEOS="$HOME/Documents/Videos/"

    echo -e " ${green}What would you like to load, a directory [d] or file(s) [f] ?: ${nocolor}\n"
    read -rsn 1 answer

    case "$answer" in
        d)  PS3=" Select a directory to queue in mpv: "
            select dir in $(find "$VIDEOS" -maxdepth 1 | sed 's,.*/,,'); do
                if [[ $(find "$VIDEOS"/"$dir" -type d -empty) ]]; then
                    echo " ${red}$dir is empty. Wait and try again...${nocolor}"
                    sleep 2s
                    break
                else
                    mpvc add "$VIDEOS"/"$dir"/* >/dev/null 2>&1
                    [[ -z $(pidof mpv) ]] && {
                        echo " ${red}$dir might be a broken link or points to an empty directory.${nocolor}"
                        sleep 5s
                        break
                    }
                    echo " ${green}$dir added to the mpv playlist.${nocolor}"
                    sleep 2s
                    _get_mpv_title
                    break
                fi
            done
            _menu ;;
        f)  ranger "$VIDEOS"; _menu ;;
        *)  echo " ${red} Wrong option! Wait and try again...${nocolor}"
            sleep 3s ;;
    esac
}
