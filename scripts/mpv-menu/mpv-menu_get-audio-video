#!/bin/bash
## This is a part of main script: mpv-menu.

_get_lines_queue() { sed '/#EXTM3U/d' "$QUEUE" | wc -l; }

_get_lines_list() { sed '/#EXTM3U/d' "$list" | wc -l; }

# let's get our file (web page) title.
_get_video_title() { youtube-dl -j "$url" | jq '(.title)'; }

_get_youtubeplaylist_urls() {
    if [[ $(grep -e 'playlist?list=' "$QUEUE") ]]; then
        echo ""
        echo -e " ${green}Checking youtube playlist availability...please wait.${nocolor}\n"

        while read -r line; do
            youtube-dl -j "$line" \
            | jq '(.webpage_url)' \
            | cat | sed 's/"//g' >> "$URLS_INFO"
        done < <(cat "$QUEUE" | sed '/#EXTM3U/d')

        cat "$URLS_INFO" >> "$QUEUE"
        sed -i '/playlist/d' "$QUEUE" "$URLS_INFO"
    fi
}

_get_completed() {
    echo " ${green}Downloads are completed, do you want to keep main playlist? [n/Y]: ${nocolor}"
    read -rsn 1 REPLY
    case "$REPLY" in
        n|N)    rm "$QUEUE"_origin && _menu ;;
        Y|y)    mv -f "$QUEUE"_origin "$QUEUE" && _menu ;;
        *  )    echo " ${red} Wrong option! Wait and try again...${nocolor}"
                sleep 3s ;;
    esac
}

_get_incompleted() {

    _main_playlist_edition() {
        read -rsn 1 -p ${green}' Edit "$QUEUE"_origin and try again later? [Y/n]: '${nocolor} edit
        case "$edit" in
            Y|y) _edit_playlist ;;
            n|N) echo "" && _get_completed ;;
        esac
    }

    if [[ $(find "$audios_dir" -name "*.part") ]]; then
        echo -e " ${red}Incomplete files in $audios_dir:\n"
        find "$audios_dir" -name "*.part" | sort -d | sed 's,.*/,,'
        _main_playlist_edition
    elif [[ $(find "$videos_dir" -name "*.part") ]]; then
        echo -e " ${red}Incomplete files in $videos_dir:\n"
        find "$videos_dir" -name "*.part" | sort -d | sed 's,.*/,,'
        _main_playlist_edition
    else
        _get_completed
    fi
}

_get_audio() {

    cd "$audios_dir"
    cp -f "$QUEUE" "$QUEUE"_origin

    _get_youtubeplaylist_urls

    for url in $(grep 'https' "$QUEUE"); do

        if (( $(grep "" -c "$QUEUE") < 3 )); then
            echo ""
            echo " ${green}There is" "$(_get_lines_queue)" "audio file left to download.${nocolor}"
        else
            echo ""
            echo " ${green}There are" "$(_get_lines_queue)" "audio files left to download.${nocolor}"
        fi

        youtube-dl -F "$url" | grep -e 'audio only' | sed 's/audio only      //'
        echo ""
        echo " ${green}Choose a format code: ${nocolor}"
        read -r code

        echo " ${green}Please be patient while downloading ${red}$(_get_video_title)...${nocolor}"
        sleep 2s
        youtube-dl -f "$code" "$url" > "$YTOP"
        sed -i '2d' "$QUEUE"
        clear

    done

    echo -e " ${green}Done\n${nocolor}"

    if [[ -n $(find . -iname "*.webm") ]]; then
        echo " ${green}Please be patient while ffmpeg is working...${nocolor}"
        find . -iname "*.webm" -exec \
        bash -c 'FILE="$1"; \
        ffmpeg -i "${FILE}" \
        -vn -ab 320k -ar 48000 \
        -y "${FILE%.webm}.mp3";' _ '{}' \; 2>"$FFOP"

        echo " ${green}Done${nocolor}"
        sleep 2s
        rm ./*.webm
        rm "$tmp_dir"/*.txt
        _get_incompleted
    else
        rm "$tmp_dir"/*.txt
        _get_incompleted
    fi

}

_get_video() {

    cd "$videos_dir"
    cp -f "$QUEUE" "$QUEUE"_origin

    _get_youtubeplaylist_urls

    for url in $(grep 'https' "$QUEUE"); do

        if (( $(grep "" -c "$QUEUE") < 3 )); then
            echo ""
            echo " ${green}There is" "$(_get_lines_queue)" "video file left to download.${nocolor}"
        else
            echo ""
            echo " ${green}There are" "$(_get_lines_queue)" "video files left to download.${nocolor}"
        fi

        youtube-dl -F "$url" | sed '/^sb/d'
        echo ""
        echo -e " ${green}Choose a format code. \n eg: 137+251 for merging, hls-1080p, 22 for single:${nocolor}"
        read -r code
        # We redirect the format code in a text file,
        # because 'grep' can't act within a variable ($code).
        echo "$code" > "$YTOP"
        sleep 0.5

        echo " ${green}Please be patient while downloading ${red}$(_get_video_title)...${nocolor}"
        sleep 2s

        if [[ $(grep -e '+' "$YTOP") ]]; then
            youtube-dl -f "$code" --merge-output-format mp4 "$url" > "$YTOP"
        else
            youtube-dl -f "$code" "$url" > "$YTOP"
        fi

        sed -i '2d' "$QUEUE"
        clear

    done

    echo -e " ${green}Done.\n${nocolor}"
    sleep 2s
    rm "$tmp_dir"/*.txt
    _get_incompleted

}

_get_mpv_title() {
    # mpv --idle --really-quiet --input-ipc-server=/tmp/mpvsocket
    while [[ -n $(pidof mpv) ]]; do
        echo '{ "command": ["get_property", "media-title"] }' \
        | socat - /tmp/mpvsocket | awk -F '"' '{print $4}' > "$METADATAS"
        echo " ${green}Now playing: " "${nocolor}$(tail -n 1 $METADATAS)"
        sleep 2s
        clear
    done
}
