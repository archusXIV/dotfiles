#!/bin/bash
## This is a part of main script: mpv-menu.

_download_completed() {
    echo " ${green}Downloads are completed, do you want to delete $list? [n/Y]: ${nocolor}"
    read -rsn 1 REPLY
    case "${REPLY}" in
        n|N) _menu
        ;;
        Y|y) rm "$list" && _menu
        ;;
        *  ) echo " ${red} Wrong option! Wait and try again...${nocolor}"
             sleep 3s
        ;;
    esac
}

_download_incompleted() {
    if [[ $(find "$playlists_dir" -name "*.part") ]]; then
        echo -e " ${red}Incomplete files:\n"
        find "$playlists_dir" -name "*.part" | sort -d | sed 's,.*/,,'
        read -rsn 1 -p ${green}' Edit your $list and try again later? [Y/n]: '${nocolor} edit
        case "${edit}" in
            Y|y) _edit_playlist ;;
            n|N) echo "" && _download_completed ;;
        esac
    elif [[ $(find "$videos_dir" -name "*.part") ]]; then
        echo -e " ${red}Incomplete files:\n"
        find "$videos_dir" -name "*.part" | sort -d | sed 's,.*/,,'
        read -rsn 1 -p ${green}' Edit your $list and try again later? [Y/n]: '${nocolor} edit
        case "${edit}" in
            Y|y) _edit_playlist ;;
            n|N) echo "" && _download_completed ;;
        esac
    else
        _download_completed
    fi
}

_download_audio() {
    # We're still in $playlists_dir
    clear
    
    for url in $(grep 'https' "$list"); do
        
        # let's get our file (web page) title.
        local printaudiotitle
        printaudiotitle=$(youtube-dl -j "$url" | jq '(.title)')
    
        if (( $(sed '/#EXTM3U/d' "$list" | wc -l) < 2 )); then
            echo ""
            echo " ${green}There is" "$(sed '/#EXTM3U/d' "$list" | wc -l)" "audio file left to download.${nocolor}"
        else
            echo ""
            echo " ${green}There are" "$(sed '/#EXTM3U/d' "$list" | wc -l)" "audio files left to download.${nocolor}"
        fi

        echo ""
        youtube-dl -F "$url" | grep -e 'audio only' | sed 's/audio only      //'
        echo ""
        echo " ${green}Choose a format code: ${nocolor}"
        read -r code
        
        echo " ${green}Please be patient while downloading ${red}$printaudiotitle...${nocolor}"
        youtube-dl -f "$code" "$url" > "$ytop"
        sed -i '2d' "$list"
        clear

    done

    mv --force "$list"_origin "$list"
    echo " ${green}Done${nocolor}"
    echo ""

    if [[ -n $(find . -iname "*.webm") ]]; then
        echo " ${green}Please be patient while ffmpeg is working...${nocolor}"
        find . -iname "*.webm" -exec \
        bash -c 'FILE="$1"; \
        ffmpeg -i "${FILE}" \
        -vn -ab 320k -ar 48000 \
        -y "${FILE%.webm}.mp3";' _ '{}' \; 2>"$ffop"

        echo " ${green}All done${nocolor}"
        sleep 2s
        rm ./*.webm
        rm "$tmp_dir"/*.txt
        rm "$list"_origin
        mv *.mp3 "$audios_dir"
        _download_incompleted
    else
        echo " ${green}Please check out for none mp3 files in $playlists_dir${nocolor}"
        sleep 5s
        rm "$tmp_dir"/*.txt
        _download_incompleted
    fi

}

_download_video() {
    # We're still in $playlists_dir
    clear
    
    for url in $(grep -e 'https' "$list"); do

        local printvideotiltle
        printvideotitle=$(youtube-dl -j "$url" | jq '(.title)')
    
        youtube-dl -F "$url"
        echo ""
        echo " ${green}Choose a format code: ${nocolor}"
        read -r code
        echo "$code" > "$ytop"
        sleep 0.5
        
        echo " ${green}Please be patient while downloading ${red}$printvideotitle...${nocolor}"

        if (( $(sed '/#EXTM3U/d' "$list" | wc -l) < 2 )); then
            echo ""
            echo " ${green}There is" "$(sed '/#EXTM3U/d' "$list" | wc -l)" "video file left to download.${nocolor}"
        else
            echo ""
            echo " ${green}There are" "$(sed '/#EXTM3U/d' "$list" | wc -l)" "video files left to download.${nocolor}"
        fi
        
        if [[ $(grep -e '+' "$ytop") ]]; then
            youtube-dl -f "$code" --merge-output-format mp4 "$url" > "$ytop"
        else
            youtube-dl -f "$code" "$url" > "$ytop"
        fi
        
        sed -i '2d' "$list"
        clear

    done

    mv --force "$list"_origin "$list"
    echo " ${green}Done${nocolor}"
    echo ""

    local webm
    webm="$(find "$playlists_dir" -name "*.webm" | sed 's,.*/,,')"

    if [[ -n $webm ]]; then
        echo -e " ${green}Please be patient while ffmpeg is working...\n${nocolor}"
        ffmpeg -i "$webm" "$webm".mp4 2> "$ffop"
        rm ./*.webm
        mv ./{*.mp4,*.mkv} "$videos_dir" > /dev/null 2>&1

        echo " ${green}All done${nocolor}"
        rm "$tmp_dir"/*.txt
        rm "$list"_origin
        sleep 2s
        _download_incompleted
    else
        mv ./{*.mp4,*.mkv} "$videos_dir" > /dev/null 2>&1
        echo " ${green}All done${nocolor}"
        sleep 2s
        rm "$tmp_dir"/*.txt
        _download_incompleted
    fi

}
