#!/bin/bash

##    Author: Barret E (2020-21) <archus@protonmail.com>
##    https://github.com/archusXIV/dotfiles
##    Dependencies: ffmpeg, youtube-dl, ranger, socat, mpv & mpvc (command line interface for mpv).
##    https://github.com/lwilletts/mpvc/blob/master/mpvc
##
##    Youtube-dl is for now kind of unmaintained so install and make a symlink with
##    https://github.com/yt-dlp/yt-dlp/releases
##
##    This script rips video urls from Youtube and so on.
##    In our case we use ".m3u" files to store urls in and then be able
##    to watch from the site itself or download videos or just the audio.
##    We can save, remove or edit playlists, mpv.conf.
##    It is recommanded to disable mpv cache for better results on direct streaming,
##    or find a better cache parameter.

## colors
nocolor=$'\e[0m';
red=$'\e[0;31m';
green=$'\e[0;32m';

## directories & files
main_dir="$HOME/Documents/mpv-menu"
playlists_dir="$main_dir/playlists"
audios_dir="$main_dir/audios"
videos_dir="$main_dir/videos"
tmp_dir="$main_dir/tmp"

queue="$playlists_dir/default.m3u"
metadatas="$tmp_dir/mpv.txt"
ytop="$tmp_dir/youtube-dl_output.txt"
ffop="$tmp_dir/ffmpeg_output.txt"

_check_dependencies() {

    ## Checking dependencies: softwares, directories and files.
    declare -a deps=( "ffmpeg" "mpv" "mpvc" "ranger" "socat" "youtube-dl" )

    for i in "${deps[@]}"; do
        [[ -z $(command -v "$i") ]] && {
            echo " ${red}$i isn 't installed, bye..."
            exit 127
        }
    done

    if [[ ! -d "$main_dir" ]]; then
        mkdir --parents {"$audios_dir","$playlists_dir","$tmp_dir","$videos_dir"}
    else
        [[ ! -d "$audios_dir" ]] && mkdir "$audios_dir"
        [[ ! -d "$playlists_dir" ]] && mkdir "$playlists_dir"
        [[ ! -d "$tmp_dir" ]] && mkdir "$tmp_dir"
        [[ ! -d "$videos_dir" ]] && mkdir "$videos_dir"
    fi

    [[ ! -f $queue ]] && {
        touch "$queue" 
        echo "#EXTM3U" > "$queue"
    }

    _check_queue

}

_menu() {

    clear
    while [[ -f $queue ]]; do
        clear
        echo ""
        echo -e "                                          ::mpv-menu options:: "
        echo -e "                      ┌─────────────────────────────────────────────────────────────┐"
        echo -e "                      │   1) Create a video playlist    6) Check default playlist   │"
        echo -e "                      │   2) Create an audio playlist   7) Clean default playlist   │"
        echo -e "                      │   3) Save/Remove playlist       8) Edit a playlist          │"
        echo -e "                      │   4) Load a playlist            9) Edit mpv.conf            │"
        echo -e "                      │   5) Load local dir/files       0) Exit                     │"
        echo -e "                      └─────────────────────────────────────────────────────────────┘"
        echo -e "                                             ${green}Select an item${nocolor}"
        echo ""
        read -r action
        case ${action} in
            1)  _copy_video
                echo ""
            ;;
            2)  _copy_audio
                echo ""
            ;;
            3)  _save_remove
                echo ""
            ;;
            4)  _load_playlist
                echo ""
            ;;
            5)  _load_local
                echo ""
            ;;
            6)  _check_url
                echo ""
            ;;
            7)  _delete_url
                echo ""
            ;;
            8)  _edit_playlist
                echo ""
            ;;
            9)  _edit_mpv-conf
                echo ""
            ;;
            0)  clear
                #[[ -z $(systemctl --user list-units | grep -e 'mpv-ipc') ]] \
                #    && systemctl --user start mpv-ipc.service
                # ffmpeg creates a ccache directory while converting/merging files.
                rm -rf "$HOME"/.ccache
                exit
            ;;
            *)  echo " ${red}Wrong option!"
                echo -e " Wait and try again...${nocolor}\n"
                #echo ""
                sleep 2s
                clear
            ;;
        esac
    done

}

_check_editor() {

    for item in $EDITOR $VISUAL; do
        if [[ -z ${item+x} ]]; then
            echo " ${red}Your $item environment variable is not set..."
            echo " ${green}Please consider doing so."
            echo " Example: ${red}export EDITOR='vim' ${nocolor}"
            sleep 7s
            _menu
        fi
    done

}

_check_queue() {

    ## This looks ugly but everything will fit nicely...
    if (( $(grep "" -c "$queue") > 1 )); then
        if (( $(grep "" -c "$queue") < 11 )); then
            echo -e "                            ┌──────────────────────────────────────────────┐"
            echo -e "                            │  ${red} There is" "$(sed '/#EXTM3U/d' "$queue" | wc -l)" "url(s) in default playlist.${nocolor}     │"
            echo -e "                            │ Consider checking the url(s) list ${green}(option 6) ${nocolor}|"
            echo -e "                            │ or delete them ${green}(option 7).${nocolor}                   |"
            echo -e "                            └──────────────────────────────────────────────┘"
            sleep 6s
            _menu
        else
            echo -e "                            ┌───────────────────────────────────────────────┐"
            echo -e "                            │  ${red} There is" "$(sed '/#EXTM3U/d' "$queue" | wc -l)" "url(s) in default playlist.${nocolor}     │"
            echo -e "                            │ Consider checking the url(s) list ${green}(option 6) ${nocolor} |"
            echo -e "                            │ or delete them ${green}(option 7).${nocolor}                    |"
            echo -e "                            └───────────────────────────────────────────────┘"
            sleep 6s
            _menu
        fi
    else
        _menu
    fi

}

_check_url() {

    if (( $(grep "" -c "$queue") > 1 )); then
        echo " ${green}Default playlist content:${nocolor}"
        while read -r urls; do
            echo " $urls"
        done < "$queue" | sed 's/#EXTM3U//'
        echo ""
        read -rsn 1 -p ${green}'delete url(s) [d], play url(s) [p], save url(s) as playlist [s] or back to menu [m]: '${nocolor} opt
        case ${opt} in
            d) _delete_url  ;;
            m) _menu        ;;
            p) _load_video  ;;
            s) _save_remove ;;
            *) _menu        ;;
        esac
    else
        echo " ${red}Default list is empty ${nocolor}"
        sleep 2s && _menu
    fi

}

_remove_crap() {

    # After some tests it appears that a single link copied from a youtube playlist
    # causes the download of the entire playlist.
    # So with the help of sed we cleanup the link to get the direct link to the desired video.
    # Note that this behavior does not appear during a simple viewing/listening.

    [[ -n $(grep -e '&list' "$queue") ]] && {
        echo " ${red}Cleaning entries...${nocolor}"
        sleep 2s
        sed -i 's/&.*//' "$queue"
    }

    # Let's remove possible duplicates.
    [[ -n $(uniq -d "$queue") ]] && {
        echo " ${red}Removing double entries...${nocolor}"
        sleep 2s
        sed -i -n \
        'G; s/\n/&&/; /^\([ -~]*\n\).*\n\1/d; s/\n//; h; P' \
        "$queue"
    }

    # Let's remove possible empty lines
    [[ $(sed -r '/^\s*$/d' "$queue") ]] && sed -i '/^$/d' "$queue"

}

_copy_audio() {

    while (( $(grep "" -c "$queue") > 0 )); do
        echo ""
        echo " Paste an url to fill the playlist:"
        read -r url
        echo "$url" >> "$queue"

        _remove_crap

        clear
        if (( $(sed '/#EXTM3U/d' "$queue" | wc -l) < 2 )); then
            echo ""
            echo " ${green}There is" "$(sed '/#EXTM3U/d' "$queue" | wc -l)" "url in the list${nocolor}."
        else
            echo ""
            echo " ${green}There are" "$(sed '/#EXTM3U/d' "$queue" | wc -l)" "urls in the list${nocolor}."
        fi
        echo ""
        echo -e "                                         ::audio options:: "
        echo -e "                     ┌────────────────────────────────────────────────────────────┐"
        echo -e "                     │     1) Add more audio links      4) Play current list      │"
        echo -e "                     │     2) Download current list     5) Check current list     │"
        echo -e "                     │     3) Save playlist as          6) Back to menu           │"
        echo -e "                     └────────────────────────────────────────────────────────────┘"
        echo -e "                                           ${green}Select an item${nocolor}"
        echo ""
        read -r options
        case ${options} in
            1) clear && continue
               echo ""
            ;;
            2) _get_audio
               echo ""
            ;;
            3) _save_remove
               echo ""
            ;;
            4) _load_audio
               echo ""
            ;;
            5) _check_url
               echo ""
            ;;
            6) _check_queue
               echo ""
            ;;
        esac
    done

}

_copy_video() {

    while (( $(grep "" -c "$queue") > 0 )); do
        echo ""
        echo " Paste an url to fill the playlist:"
        read -r url
        echo "$url" >> "$queue"

        _remove_crap

        clear
        if (( $(sed '/#EXTM3U/d' "$queue" | wc -l) < 2 )); then
            echo ""
            echo " ${green}There is" "$(sed '/#EXTM3U/d' "$queue" | wc -l)" "url in the list${nocolor}."
        else
            echo ""
            echo " ${green}There are" "$(sed '/#EXTM3U/d' "$queue" | wc -l)" "urls in the list${nocolor}."
        fi
        echo ""
        echo -e "                                         ::video options:: "
        echo -e "                     ┌────────────────────────────────────────────────────────────┐"
        echo -e "                     │     1) Add more video links      4) Play current list      │"
        echo -e "                     │     2) Download current list     5) Check current list     │"
        echo -e "                     │     3) Save playlist as          6) Back to menu           │"
        echo -e "                     └────────────────────────────────────────────────────────────┘"
        echo -e "                                           ${green}Select an item${nocolor}"
        echo ""
        read -r options
        case ${options} in
            1) clear && continue
               echo "" 
            ;;
            2) _get_video
               echo ""
            ;;
            3) _save_remove
               echo ""
            ;;
            4) _load_video
               echo ""
            ;;
            5) _check_url
               echo ""
            ;;
            6) _check_queue
               echo ""
            ;;
        esac
    done

}

_download_audio() {
    # We're still in $playlists_dir
    clear

    for url in $(grep 'https' "$list"); do

        if (( $(sed '/#EXTM3U/d' "$list" | wc -l) < 2 )); then
            echo ""
            echo " ${green}There is" "$(sed '/#EXTM3U/d' "$list" | wc -l)" "audio file left to download.${nocolor}"
        else
            echo ""
            echo " ${green}There are" "$(sed '/#EXTM3U/d' "$list" | wc -l)" "audio files left to download.${nocolor}"
        fi

        echo ""
        youtube-dl -F "$url" | grep -e 'audio only' | sed 's/audio only      //'
        echo ""
        echo " ${green}Choose a format code: ${nocolor}"
        read -r code
        
        # let's get our file (web page) title.
        local downloadaudiotitle
        downloadaudiotitle=$(youtube-dl -j "$url" | jq '(.webpage_url, .title)' | tac | sed -n '1p')
        
        echo " ${green}Please be patient while downloading ${red}$downloadaudiotitle...${nocolor}"
        youtube-dl -f "$code" "$url" > "$ytop"
        sed -i '2d' "$list"
        clear

    done

    mv --force "$list"_origin "$list"
    echo " ${green}Done${nocolor}"
    echo ""

    if [[ -n $(find . -iname "*.webm") ]]; then
        echo " ${green}Please be patient while ffmpeg is working...${nocolor}"
        find . -iname "*.webm" -exec \
        bash -c 'FILE="$1"; \
        ffmpeg -i "${FILE}" \
        -vn -ab 320k -ar 48000 \
        -y "${FILE%.webm}.mp3";' _ '{}' \; 2>"$ffop"

        echo " ${green}All done${nocolor}"
        sleep 2s
        rm ./*.webm
        rm "$ffop" "$ytop"
        rm "$list"_origin
        mv *.mp3 "$audios_dir"
        _menu
    else
        echo " ${green}Please check out for none mp3 files in $playlists_dir${nocolor}"
        sleep 5s
        rm "$ytop"
        echo "Downloads are completed, do you want to delete $list? [n/Y]: "
        read -rsn 1 REPLY
        case ${REPLY} in
            n|N) _menu
            ;;
            Y|y) rm "$list" && _menu
            ;;
            *  ) echo " ${red} Wrong option! Wait and try again...${nocolor}"
                 sleep 3s
            ;;
        esac
    fi

}

_download_video() {
    # We're still in $playlists_dir
    clear

    for url in $(grep -e 'https' "$list"); do

        youtube-dl -F "$url"
        echo ""
        echo " ${green}Choose a format code: ${nocolor}"
        read -r code
        echo "$code" > "$ytop"
        sleep 0.5
        local downloadvideotiltle
        downloadvideotitle=$(youtube-dl -j "$url" | jq '(.webpage_url, .title)' | tac | sed -n '1p')
        echo " ${green}Please be patient while downloading ${red}$downloadvideotitle...${nocolor}"

        if (( $(sed '/#EXTM3U/d' "$list" | wc -l) < 2 )); then
            echo ""
            echo " ${green}There is" "$(sed '/#EXTM3U/d' "$list" | wc -l)" "video file left to download.${nocolor}"
        else
            echo ""
            echo " ${green}There are" "$(sed '/#EXTM3U/d' "$list" | wc -l)" "video files left to download.${nocolor}"
        fi
        
        if [[ $(grep -e '+' "$ytop") ]]; then
            youtube-dl -f "$code" --merge-output-format mp4 "$url" > "$ytop"
        else
            youtube-dl -f "$code" "$url" > "$ytop"
        fi
        
        sed -i '2d' "$list"
        clear

    done

    mv --force "$list"_origin "$list"
    echo " ${green}Done${nocolor}"
    echo ""

    local webm
    webm="$(find "$playlists_dir" -name "*.webm" | sed 's,.*/,,')"

    if [[ -n $webm ]]; then
        echo -e " ${green}Please be patient while ffmpeg is working...\n${nocolor}"
        ffmpeg -i "$webm" "$webm".mp4 2> "$ffop"
        rm ./*.webm
        mv ./{*.mp4,*.mkv} "$videos_dir" > /dev/null 2>&1

        echo " ${green}All done${nocolor}"
        rm "$ffop" "$ytop"
        rm "$list"_origin
        sleep 2s
        _menu
    else
        mv ./{*.mp4,*.mkv} "$videos_dir" > /dev/null 2>&1
        echo " ${green}All done${nocolor}"
        sleep 2s
        rm "$ytop"
        echo "Downloads are completed, do you want to delete $list? [n/Y]: "
        read -r REPLY
        case "$REPLY" in
            n|N) _menu ;;
            Y|y) rm "$list" && _menu ;;
        esac
    fi

}

_edit_playlist() {

    _check_editor

    cd "$playlists_dir"
    PS3=' Choose a playlist to edit: '
    echo -en "\nAvailable playlists\n\n"
    select list in $(find . -name "*.m3u" | sort -d | sed 's,.*/,,'); do
        echo ""
        $VISUAL "$list"
        echo " ${green}$list saved${nocolor}"
        sleep 2s
        break
    done

}

_edit_mpv-conf() {

    _check_editor

    $VISUAL $XDG_CONFIG_HOME/mpv/mpv.conf
    echo " ${green}mpv.conf saved.${nocolor}"
    sleep 2s
    clear
    _menu

}

_get_audio() {

    cd "$audios_dir"

    for url in $(grep 'https' "$queue"); do

        if (( $(sed '/#EXTM3U/d' "$queue" | wc -l) < 2 )); then
            echo ""
            echo " ${green}There is" "$(sed '/#EXTM3U/d' "$queue" | wc -l)" "audio file left to download.${nocolor}"
        else
            echo ""
            echo " ${green}There are" "$(sed '/#EXTM3U/d' "$queue" | wc -l)" "audio files left to download.${nocolor}"
        fi

        youtube-dl -F "$url" | grep -e 'audio only' | sed 's/audio only      //'
        echo ""
        echo " ${green}Choose a format code: ${nocolor}"
        read -r code
        local getaudiotitle
        getaudiotitle=$(youtube-dl -j "$url" | jq '(.webpage_url, .title)' | tac | sed -n '1p')
        echo " ${green}Please be patient while downloading ${red}$getaudiotitle...${nocolor}"
        sleep 2s
        youtube-dl -f "$code" "$url" > "$ytop"
        sed -i '2d' "$queue"
        clear

    done

    echo -e " ${green}Done\n${nocolor}"

    if [[ -n $(find . -iname "*.webm") ]]; then
        echo " ${green}Please be patient while ffmpeg is working...${nocolor}"
        find . -iname "*.webm" -exec \
        bash -c 'FILE="$1"; \
        ffmpeg -i "${FILE}" \
        -vn -ab 320k -ar 48000 \
        -y "${FILE%.webm}.mp3";' _ '{}' \; 2>"$ffop"

        echo " ${green}Done${nocolor}"
        sleep 2s
        rm ./*.webm
        rm "$ffop" "$ytop"
        _menu
    else
        rm "$ytop"
        _menu
    fi

}

_get_video() {

    cd "$videos_dir"

    local webm
    webm="$(find . -name '*.webm' | sed 's,.*/,,')"

    for url in $(grep 'https' "$queue"); do

        youtube-dl -F "$url"
        echo ""
        echo " ${green}Choose a format code: ${nocolor}"
        read -r code
        echo "$code" > "$ytop"
        sleep 0.5
        local getvideotiltle
        getvideotitle=$(youtube-dl -j "$url" | jq '(.webpage_url, .title)' | tac | sed -n '1p')
        echo " ${green}Please be patient while downloading ${red}$getvideotitle...${nocolor}"
        sleep 2s
        
        if (( $(sed '/#EXTM3U/d' "$queue" | wc -l) < 2 )); then
            echo ""
            echo " ${green}There is" "$(sed '/#EXTM3U/d' "$queue" | wc -l)" "video file left to download.${nocolor}"
        else
            echo ""
            echo " ${green}There are" "$(sed '/#EXTM3U/d' "$queue" | wc -l)" "video files left to download.${nocolor}"
        fi

        if [[ $(grep -e '+' "$ytop") ]]; then
            youtube-dl -f "$code" --merge-output-format mp4 "$url" > "$ytop"
        else
            youtube-dl -f "$code" "$url" > "$ytop"
        fi
        
        sed -i '2d' "$queue"
        clear

    done

    echo -e " ${green}Done.\n${nocolor}"

    if [[ -n ${webm} ]]; then
        echo " ${green}Please be patient while ffmpeg is working...${nocolor}"
        ffmpeg -i "$webm" "$webm".mp4 2>$ffop
        echo " ${green}All done${nocolor}"
        sleep 2s
        rm ./*.webm
        rm "$ffop" "$ytop"
        _menu
    else
        rm "$ytop"
        _menu
    fi

}

_get_mpv_title() {
    # mpv --idle --really-quiet --input-ipc-server=/tmp/mpvsocket
    while [[ -n $(pidof mpv) ]]; do
        echo '{ "command": ["get_property", "media-title"] }' \
        | socat - /tmp/mpvsocket | awk -F '"' '{print $4}' > "$metadatas"
        echo " ${green}Now playing: " "${nocolor}$(tail -n 1 $metadatas)"
        sleep 2s
        clear
    done

}

_stop_mpvipc() {

    [[ $(systemctl --user list-units | awk '/mpv-ipc/{print $3}') == 'active' ]] \
        && systemctl --user stop mpv-ipc.service

}

_load_audio() {

    # _stop_mpvipc

    mpvc -a -Q "$queue"
   #_get_mpv_title

    rm "$metadatas"
    clear
    _menu

}

_load_video() {

    # _stop_mpvipc
    # picom &

    mpvc -a "$queue"
    #_get_mpv_title

    # killall -q picom
    rm "$metadatas"
    clear
    _menu

}

_load_playlist() {

    cd "$playlists_dir"
    rm "$tmp_dir"/titles.txt >/dev/null 2>&1
    PS3=""
    echo -e " ${green}Select a playlist to load (Press 'q' to quit mpv):\n${nocolor}"
    select list in $(find . -name "*.m3u" | sort -d | sed 's,.*/,,'); do
        
        if ! grep -q -e 'https' -e 'http' "$list"; then
            echo " ${red}$list is empty...${nocolor}"
            sleep 3s
            break
        fi
        
        echo ""
        echo -e " ${green}Getting videos availability...please wait.${nocolor}\n"
        
        while read -r line; do
            youtube-dl -j "$line" \
            | jq '(.webpage_url, .title)' \
            | tac | sed -n '1p' >> "$tmp_dir"/titles.txt
        done < <(cat "$list" | sed '/#EXTM3U/d')
        
        cat -n "$tmp_dir"/titles.txt
        echo ""
        
        read -rsn 1 -p ${green}' Just load [l] download audio [a] or download video [v] (Press '^C' to quit youtube-dl): '${nocolor} letter
        case "$letter" in
            a)  cp "$list" "$list"_origin
                _download_audio
            ;;
            l)  # _stop_mpvipc
                echo ""
                read -rsn 1 -p  ${green}' Load audio [a] or video [v] ?: '${nocolor} load
                case ${load} in
                    a)  mpvc -a -Q "$list"
                        #_get_mpv_title
                    ;;
                    v)  # picom &
                        mpvc -a "$list"
                        #_get_mpv_title # && killall -q picom
                    ;;
                    *)  echo " ${red} Wrong option! Wait and try again...${nocolor}"
                        sleep 3s
                    ;;
                esac

                rm "$metadatas"
                clear
                _menu
            ;;
            v)  cp "$list" "$list"_origin
                _download_video
            ;;
            *)  echo " ${red} Wrong option! Wait and try again...${nocolor}"
                sleep 3s
            ;;
        esac

    done

    clear
    _menu

}

_load_local() {
    local VIDEOS="$HOME/Documents/Videos/"

    read -rp 'What would you like to load, a directory [d] or file(s) [f] ?: ' answer

    case "$answer" in
        d)  PS3="Select a directory to queue in mpv: "
            select dir in $(find "$VIDEOS" -maxdepth 1 | sed 's,.*/,,'); do
                if [[ $(find "$VIDEOS"/"$dir" -type d -empty) ]]; then
                    echo " ${red}$dir is empty. Wait and try again...${nocolor}"
                    sleep 3s
                    break
                else
                    mpvc add "$VIDEOS"/"$dir"/* >/dev/null 2>&1
                    [[ -z $(pidof mpv) ]] && {
                        echo " ${red}$dir might be a broken link or points to an empty directory.${nocolor}"
                        sleep 5s
                        break
                    }
                    echo " ${green}$dir added to the mpv playlist.${nocolor}"
                    sleep 3s
                    break
                fi
            done
            _menu
        ;;
        f)  ranger "$VIDEOS"; _menu
        ;;
        *)  echo " ${red} Wrong option! Wait and try again...${nocolor}"
            sleep 3s
        ;;
    esac
}

_save_remove() {

    cd "$playlists_dir"

    read -rsn 1 -p 'Save [s] or Remove [r] a playlist?: ' opt
    echo ""
    case "$opt" in
        s)  echo -e " ${green}Available playlists:\n${nocolor}"
            find . -name "*.m3u" | sort -d | sed 's,.*/,,'
            echo ""
            echo -e " ${green}Save playlist as:\n${nocolor}"
            read -r list
            list="$list.m3u"
            if [[ $(find . -name "${list}") ]]; then
                echo " ${red}This playlist already exists!"
                echo " Overwrite $list? [y/N]:${nocolor}"
                read -r overwrite
                case ${overwrite} in
                    y|Y)  cp -f "$queue" "$list"
                        echo " ${green}$list saved ${nocolor}"
                        sleep 2s
                        _check_queue
                    ;;
                    N|n)  _check_queue
                    ;;
                    *)  _check_queue
                    ;;
                esac
            else
                cp "$queue" "$list"
                echo " ${green}$list saved ${nocolor}"
                sleep 2s
                _check_queue
            fi
        ;;
        r)  PS3=""
            echo -e " ${green}Which playlist do you want to remove? \n${nocolor}"
            select list in $(find . -name "*.m3u" | sort -d | sed 's,.*/,,'); do
                echo ""
                echo " ${red}Are you sure you want to remove $list? [y/N]:${nocolor}"
                read -r del
                case "$del" in
                    y|Y)  rm "$list"
                        echo " ${red}$list removed ${nocolor}"
                        sleep 2s
                        _menu
                    ;;
                    N|n)  _menu
                    ;;
                    *)  echo " ${red} Wrong option! Wait and try again...${nocolor}"
                        sleep 3s
                        _menu
                    ;;
                esac
            done
        ;;
        *)  echo " ${red} Wrong option! Wait and try again...${nocolor}"
            sleep 3s
            _menu
        ;;
    esac

}

_delete_url() {
    if [[ -z $(sed -n '2p' "$queue") ]]; then
        echo " ${green}Nothing to do here, main list is empty...${nocolor}"
        sleep 2s
        _menu
    else
        sed -i /https/d "$queue"
        echo " ${red}All urls removed ${nocolor}"
        sleep 2s
        _menu
    fi
}

_check_dependencies
