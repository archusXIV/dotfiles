#!/bin/bash

##    Author: Barret E (2020-21) <archus@protonmail.com>
##    https://github.com/archusXIV/dotfiles
##    Dependencies: ffmpeg, jq,  mpv & mpvc (command line interface for mpv), ranger, socat, youtube-dl.
##    https://github.com/lwilletts/mpvc/blob/master/mpvc
##
##    Youtube-dl is for now kind of unmaintained so install and make a symlink with
##    https://github.com/yt-dlp/yt-dlp/releases
##    ln -s /usr/bin/yt-dlp ~/.local/bin/youtube-dl (if ~/.local/bin is in your $PATH)
##
##    This script rips video urls from Youtube and so on.
##    In our case we use ".m3u" files to store urls in and then be able
##    to watch from the site itself or download videos or just the audio.
##    We can save, remove or edit playlists, mpv.conf.
##    It is recommanded to disable mpv cache for better results on direct streaming,
##    or find a better cache parameter.

## colors
nocolor=$'\e[0m';
red=$'\e[0;31m';
green=$'\e[0;32m';

## directories & files
main_dir="$HOME/Documents/mpv-menu"
playlists_dir="$main_dir/playlists"
audios_dir="$main_dir/audios"
videos_dir="$main_dir/videos"
tmp_dir="$main_dir/tmp"

QUEUE="$playlists_dir/default.m3u"
METADATAS="$tmp_dir/mpv.txt"
YTOP="$tmp_dir/youtube-dl_output.txt"
FFOP="$tmp_dir/ffmpeg_output.txt"
COMPLETE_INFO="$tmp_dir/view_urls_info.txt"
URLS_INFO="$tmp_dir/urls.txt"

_check_dependencies() {

    ## Checking dependencies: softwares, directories and files.
    declare -a deps=( "ffmpeg" "jq" "mpv" "mpvc" "ranger" "socat" "youtube-dl" )

    for i in "${deps[@]}"; do
        [[ -z $(command -v "$i") ]] && {
            echo " ${red}$i isn 't installed, bye..."
            exit 127
        }
    done

    if [[ ! -d $main_dir ]]; then
        mkdir --parents {"$audios_dir","$playlists_dir","$tmp_dir","$videos_dir"}
    else
        [[ ! -d $audios_dir ]] && mkdir "$audios_dir"
        [[ ! -d $playlists_dir ]] && mkdir "$playlists_dir"
        [[ ! -d $tmp_dir ]] && mkdir "$tmp_dir"
        [[ ! -d $videos_dir ]] && mkdir "$videos_dir"
    fi

    [[ ! -f $QUEUE ]] && {
        touch "$QUEUE"
        echo "#EXTM3U" > "$QUEUE"
    }

    _check_queue

}

_menu() {

    clear
    while [[ -e $QUEUE ]]; do
        clear
        echo ""
        echo -e "                                            ::mpv-menu options:: "
        echo -e "                        ┌─────────────────────────────────────────────────────────────┐"
        echo -e "                        │   1) Create a video playlist    6) View default playlist    │"
        echo -e "                        │   2) Create an audio playlist   7) Clear default playlist   │"
        echo -e "                        │   3) Save/Remove playlist       8) Edit a playlist          │"
        echo -e "                        │   4) Load a playlist            9) Edit mpv.conf            │"
        echo -e "                        │   5) Load local dir/files       0) Exit                     │"
        echo -e "                        └─────────────────────────────────────────────────────────────┘"
        echo -e "                                               ${green}Select an item${nocolor}"
        echo ""
        read -r action
        case "$action" in
            1)  _copy_video
                echo "" ;;
            2)  _copy_audio
                echo "" ;;
            3)  _save_remove
                echo "" ;;
            4)  _load_playlist
                echo "" ;;
            5)  _load_local
                echo "" ;;
            6)  _view_url_info
                echo "" ;;
            7)  _delete_url
                echo "" ;;
            8)  _edit_playlist
                echo "" ;;
            9)  _edit_mpv-conf
                echo "" ;;
            0)  clear
                #[[ -z $(systemctl --user list-units | grep -e 'mpv-ipc') ]] \
                #    && systemctl --user start mpv-ipc.service
                # ffmpeg creates a ccache directory while converting/merging files.
                # rm -rf "$HOME"/.ccache
                exit 0 ;;
            *)  echo -e " ${red}Wrong option!\n Wait and try again...${nocolor}"
                sleep 2s
                clear ;;
        esac
    done

}

_check_editor() {

    for item in $EDITOR $VISUAL; do
        if [[ -z ${item+x} ]]; then
            echo " ${red}Your $item environment variable is not set..."
            echo " ${green}Please consider doing so."
            echo " Example: ${red}export EDITOR='vim' ${nocolor}"
            sleep 7s
            _menu
        fi
    done

}

_check_queue() {

    ## This looks ugly but everything will fit nicely...
    if (( $(grep "" -c "$QUEUE") > 1 )); then
        if (( $(grep "" -c "$QUEUE") < 11 )); then
            echo -e "                              ┌──────────────────────────────────────────────┐"
            echo -e "                              │  ${red} There is" "$(_get_lines_queue)" "url(s) in default playlist.${nocolor}     │"
            echo -e "                              │ Consider checking the url(s) list ${green}(option 6) ${nocolor}|"
            echo -e "                              │ or delete them ${green}(option 7).${nocolor}                   |"
            echo -e "                              └──────────────────────────────────────────────┘"
            sleep 6s
            _menu
        else
            echo -e "                              ┌───────────────────────────────────────────────┐"
            echo -e "                              │  ${red} There is" "$(_get_lines_queue)" "url(s) in default playlist.${nocolor}     │"
            echo -e "                              │ Consider checking the url(s) list ${green}(option 6) ${nocolor} |"
            echo -e "                              │ or delete them ${green}(option 7).${nocolor}                    |"
            echo -e "                              └───────────────────────────────────────────────┘"
            sleep 6s
            _menu
        fi
    else
        _menu
    fi

}

_check_code() {
    # In case link is secured or no format code found.
    echo " ${green}Verifying media codes...${nocolor}"

    for lines in $(cat "$QUEUE" | sed '/#EXTM3U/d'); do
        # checking the last url we added.
        youtube-dl -F $(cat "$QUEUE" | sed -n '$ p') >/dev/null 2>&1

        if [[ $? == 1 ]]; then
            echo " ${red}No format code found! Try again.${nocolor}"
            sed -i '$ d' "$QUEUE"
            sleep 2s
            if (( $(grep "" -c "$QUEUE" ) < 2 )); then
                _menu
            else
                # _check_code function acts in _copy_audio/videeo loops...
                continue
            fi
        fi
        echo "$lines ${green}ok${nocolor}"
        sleep 1s
    done
}

_view_url_info() {

    if (( $(grep "" -c "$QUEUE") > 1 )); then
        echo " ${green}Getting titles from url(s), please wait...${nocolor}"

        while read -r urls; do
            youtube-dl -j "$urls" \
            | jq '(.title, .webpage_url)' >> "$COMPLETE_INFO"
        done < <(cat "$QUEUE" | sed '/#EXTM3U/d')

        cat -n "$COMPLETE_INFO"

        echo ""
        read -rsn 1 -p ${green}'delete url(s) [d], play url(s) [p], save url(s) as playlist [s] or back to menu [m]: '${nocolor} opt
        case "$opt" in
            d) rm "$COMPLETE_INFO" && _delete_url  ;;
            m) rm "$COMPLETE_INFO" && _menu        ;;
            p) clear && _load_video  ;;
            s) rm "$COMPLETE_INFO" && _save_remove ;;
            *) rm "$COMPLETE_INFO" &&  _menu       ;;
        esac
    else
        echo " ${red}Default list is empty ${nocolor}"
        sleep 2s && _menu
    fi

}

_remove_crap() {

    # After some tests it appears that a single link copied from a youtube playlist
    # causes the download of the entire playlist.
    # So with the help of sed we cleanup the link to get the direct link to the desired video.
    # Note that this behavior does not appear during a simple viewing/listening.

    [[ -n $(grep -e '&list' "$QUEUE") ]] && {
        echo " ${red}Cleaning entries...${nocolor}"
        sleep 2s
        sed -i 's/&.*//' "$QUEUE" "$URLS_INFO"
    }

    # Let's remove possible duplicates.
    [[ -n $(uniq -d "$QUEUE") ]] && {
        echo " ${red}Removing double entries...${nocolor}"
        sleep 2s
        sed -i -n \
        'G; s/\n/&&/; /^\([ -~]*\n\).*\n\1/d; s/\n//; h; P' \
        "$QUEUE" "$URLS_INFO"
    }

    # Let's remove possible empty lines
    [[ $(sed -r '/^\s*$/d' "$QUEUE") ]] && sed -i '/^$/d' "$QUEUE"

}

_copy_audio() {

    while (( $(grep "" -c "$QUEUE") > 0 )); do
        echo ""
        echo " Paste an url to fill the playlist:"
        read -r url
        echo "$url" | tee -a "$QUEUE" >> "$URLS_INFO"

        _get_youtubeplaylist_urls
        _remove_crap
        _check_code
        clear

        if (( $(grep "" -c "$QUEUE") < 2 )); then
            echo ""
            echo " ${green}There is" "$(_get_lines_queue)" "url in the list${nocolor}."
        else
            echo ""
            echo " ${green}There are" "$(_get_lines_queue)" "urls in the list${nocolor}."
        fi

        echo ""
        echo -e "                                           ::audio options:: "
        echo -e "                       ┌────────────────────────────────────────────────────────────┐"
        echo -e "                       │     1) Add more audio links      4) Play current list      │"
        echo -e "                       │     2) Download current list     5) View current list      │"
        echo -e "                       │     3) Save playlist as          6) Back to main menu      │"
        echo -e "                       └────────────────────────────────────────────────────────────┘"
        echo -e "                                             ${green}Select an item${nocolor}"
        echo ""
        read -r options
        case "$options" in
            1) clear && continue
               echo "" ;;
            2) _get_audio
               echo "" ;;
            3) _save_remove
               echo "" ;;
            4) _load_audio
               echo "" ;;
            5) _view_url
               echo "" ;;
            6) _check_queue
               echo "" ;;
        esac
    done

}

_copy_video() {

    while (( $(grep "" -c "$QUEUE") > 0 )); do
        echo ""
        echo " Paste an url to fill the playlist:"
        read -r url
        echo "$url" | tee -a "$QUEUE" >> "$URLS_INFO"

        _get_youtubeplaylist_urls
        _remove_crap
        _check_code
        clear

        if (( $(grep "" -c "$QUEUE") < 2 )); then
            echo ""
            echo " ${green}There is" "$(_get_lines_queue)" "url in the list${nocolor}."
        else
            echo ""
            echo " ${green}There are" "$(_get_lines_queue)" "urls in the list${nocolor}."
        fi

        echo ""
        echo -e "                                           ::video options:: "
        echo -e "                       ┌────────────────────────────────────────────────────────────┐"
        echo -e "                       │     1) Add more video links      4) Play current list      │"
        echo -e "                       │     2) Download current list     5) View current list      │"
        echo -e "                       │     3) Save playlist as          6) Back to main menu      │"
        echo -e "                       └────────────────────────────────────────────────────────────┘"
        echo -e "                                             ${green}Select an item${nocolor}"
        echo ""
        read -r options
        case "$options" in
            1) clear && continue
               echo "" ;;
            2) _get_video
               echo "" ;;
            3) _save_remove
               echo "" ;;
            4) _load_video
               echo "" ;;
            5) _view_url_info
               echo "" ;;
            6) _check_queue
               echo "" ;;
        esac
    done

}

_download_completed() {
    echo " ${green}Downloads are completed, do you want to delete $list? [n/Y]: ${nocolor}"
    read -rsn 1 REPLY
    case "$REPLY" in
        n|N)    mv --force "$list"_origin "$list" && _menu ;;
        Y|y)    rm "$list" "$list"_origin && _menu ;;
        *  )    echo " ${red} Wrong option! Wait and try again...${nocolor}"
                sleep 3s ;;
    esac
}

_download_incompleted() {

    if [[ $(find "$playlists_dir" -name "*.part") ]]; then
        echo -e " ${red}Incomplete files in $playlists_dir:\n"
        find "$playlists_dir" -name "*.part" | sort -d | sed 's,.*/,,'
        echo " ${green}Edit "$list"_origin and try again later? [Y/n]:${nocolor}"
        read -rsn 1 edit
        case "$edit" in
            Y|y) _edit_playlist ;;
            n|N) echo "" && _download_completed ;;
        esac
    else
        _download_completed
    fi

}

# let's get our file (web page) title.
_print_title() { youtube-dl -j "$url" | jq '(.title)'; }

_download_audio() {
    # We're still in $playlists_dir
    clear
    cp -f "$list" "$list"_origin

    for url in $(grep 'https' "$list"); do

        # We compare if the content of $list is less than 3 because:
        # 1) we have expression #EXTM3U at the top.
        # 2) the uniq url we've enter...if that's the case.
        if (( $(grep "" -c "$list") < 3 )); then
            echo ""
            echo " ${green}There is" "$(_get_lines_list)" "audio file left to download.${nocolor}"
        else
            echo ""
            echo " ${green}There are" "$(_get_lines_list)" "audio files left to download.${nocolor}"
        fi

        echo ""
        youtube-dl -F "$url" | grep -e 'audio only' | sed 's/audio only      //'
        echo ""
        echo " ${green}Choose a format code: ${nocolor}"
        read -r code

        echo " ${green}Downloading ${red}$(_print_title)...${nocolor}"
        youtube-dl -f "$code" "$url" > "$YTOP"
        sed -i '2d' "$list"
        clear

    done

    echo -e " ${green}Done${nocolor}\n"

    if [[ -n $(find . -iname "*.webm") ]]; then
        echo " ${green}Please be patient while ffmpeg is working...${nocolor}"
        find . -iname "*.webm" -exec \
        bash -c 'FILE="$1"; \
        ffmpeg -i "${FILE}" \
        -vn -ab 320k -ar 48000 \
        -y "${FILE%.webm}.mp3";' _ '{}' \; 2>"$FFOP"

        echo " ${green}All done${nocolor}"
        sleep 2s
        rm ./*.webm
        rm "$tmp_dir"/*.txt
        mv *.mp3 "$audios_dir"
        _download_incompleted
    else
        echo " ${green}Please check out for none mp3 files in $playlists_dir${nocolor}"
        sleep 5s
        rm "$tmp_dir"/*.txt
        _download_incompleted
    fi

}

_download_video() {
    # We're still in $playlists_dir
    clear
    cp -f "$list" "$list"_origin

    for url in $(grep -e 'https' "$list"); do

        if (( $(grep "" -c "$list") < 3 )); then
            echo ""
            echo " ${green}There is" "$(_get_lines_list)" "video file left to download.${nocolor}"
        else
            echo ""
            echo " ${green}There are" "$(_get_lines_list)" "video files left to download.${nocolor}"
        fi

        youtube-dl -F "$url" | sed '/^sb/d'
        echo ""
        echo -e " ${green}Choose a format code. \n eg: 137+251 for merging, hls-1080p, 22 for single:${nocolor}"
        read -r code
        echo "$code" > "$YTOP"
        sleep 0.5

        echo " ${green}Downloading ${red}$(_print_title)...${nocolor}"

        if [[ $(grep -e '+' "$YTOP") ]]; then
            youtube-dl -f "$code" --merge-output-format mp4 "$url" > "$YTOP"
        else
            youtube-dl -f "$code" "$url" > "$YTOP"
        fi

        sed -i '2d' "$list"
        clear

    done

    mv ./{*.mp4,*.mkv} "$videos_dir" > /dev/null 2>&1
    echo " ${green}All done${nocolor}"
    sleep 2s
    rm "$tmp_dir"/*.txt
    _download_incompleted

}

_edit_playlist() {

    _check_editor

    cd "$playlists_dir"
    PS3=${green}' Choose a playlist to edit: '${nocolor}
    echo -en "\nAvailable playlists\n\n"
    select list in $(find . -name "*.m3u" -o -name "*.m3u_origin" \
        | sort -d | sed 's,.*/,,'); do
        echo ""
        $VISUAL "$list"
        echo " ${green}$list saved${nocolor}"
        sleep 2s
        break
    done
    _menu
}

_edit_mpv-conf() {
    _check_editor
    $VISUAL "$XDG_CONFIG_HOME"/mpv/mpv.conf
    echo " ${green}mpv.conf saved.${nocolor}"
    sleep 2s
    clear
    _menu
}

_get_lines_queue() { sed '/#EXTM3U/d' "$QUEUE" | wc -l; }

_get_lines_list() { sed '/#EXTM3U/d' "$list" | wc -l; }

_get_youtubeplaylist_urls() {
    if [[ $(grep -e 'playlist?list=' "$QUEUE") ]]; then
        echo ""
        echo -e " ${green}Checking youtube playlist availability...please wait.${nocolor}\n"

        while read -r line; do
            youtube-dl -j "$line" \
            | jq '(.webpage_url)' \
            | cat | sed 's/"//g' >> "$URLS_INFO"
        done < <(cat "$QUEUE" | sed '/#EXTM3U/d')

        cat "$URLS_INFO" >> "$QUEUE"
        sed -i '/playlist/d' "$QUEUE" "$URLS_INFO"
    fi
}

_get_completed() {
    echo " ${green}Downloads are completed, do you want to keep main playlist? [n/Y]: ${nocolor}"
    read -rsn 1 REPLY
    case "$REPLY" in
        n|N)    rm "$QUEUE"_origin && _menu ;;
        Y|y)    mv -f "$QUEUE"_origin "$QUEUE" && _menu ;;
        *  )    echo " ${red} Wrong option! Wait and try again...${nocolor}"
                sleep 3s ;;
    esac
}

_get_incompleted() {

    _main_playlist_edition() {
        read -rsn 1 -p ${green}' Edit "$QUEUE"_origin and try again later? [Y/n]: '${nocolor} edit
        case "$edit" in
            Y|y) _edit_playlist ;;
            n|N) echo "" && _get_completed ;;
        esac
    }

    if [[ $(find "$audios_dir" -name "*.part") ]]; then
        echo -e " ${red}Incomplete files in $audios_dir:\n"
        find "$audios_dir" -name "*.part" | sort -d | sed 's,.*/,,'
        _main_playlist_edition
    elif [[ $(find "$videos_dir" -name "*.part") ]]; then
        echo -e " ${red}Incomplete files in $videos_dir:\n"
        find "$videos_dir" -name "*.part" | sort -d | sed 's,.*/,,'
        _main_playlist_edition
    else
        _get_completed
    fi
}

_get_audio() {

    cd "$audios_dir"
    cp -f "$QUEUE" "$QUEUE"_origin

    _get_youtubeplaylist_urls

    for url in $(grep 'https' "$QUEUE"); do

        if (( $(grep "" -c "$QUEUE") < 3 )); then
            echo ""
            echo " ${green}There is" "$(_get_lines_queue)" "audio file left to download.${nocolor}"
        else
            echo ""
            echo " ${green}There are" "$(_get_lines_queue)" "audio files left to download.${nocolor}"
        fi

        youtube-dl -F "$url" | grep -e 'audio only' | sed 's/audio only      //'
        echo ""
        echo " ${green}Choose a format code: ${nocolor}"
        read -r code

        echo " ${green}Please be patient while downloading ${red}$(_print_title)...${nocolor}"
        sleep 2s
        youtube-dl -f "$code" "$url" > "$YTOP"
        sed -i '2d' "$QUEUE"
        clear

    done

    echo -e " ${green}Done\n${nocolor}"

    if [[ -n $(find . -iname "*.webm") ]]; then
        echo " ${green}Please be patient while ffmpeg is working...${nocolor}"
        find . -iname "*.webm" -exec \
        bash -c 'FILE="$1"; \
        ffmpeg -i "${FILE}" \
        -vn -ab 320k -ar 48000 \
        -y "${FILE%.webm}.mp3";' _ '{}' \; 2>"$FFOP"

        echo " ${green}Done${nocolor}"
        sleep 2s
        rm ./*.webm
        rm "$tmp_dir"/*.txt
        _get_incompleted
    else
        rm "$tmp_dir"/*.txt
        _get_incompleted
    fi

}

_get_video() {

    cd "$videos_dir"
    cp -f "$QUEUE" "$QUEUE"_origin

    _get_youtubeplaylist_urls

    for url in $(grep 'https' "$QUEUE"); do

        if (( $(grep "" -c "$QUEUE") < 3 )); then
            echo ""
            echo " ${green}There is" "$(_get_lines_queue)" "video file left to download.${nocolor}"
        else
            echo ""
            echo " ${green}There are" "$(_get_lines_queue)" "video files left to download.${nocolor}"
        fi

        youtube-dl -F "$url" | sed '/^sb/d'
        echo ""
        echo -e " ${green}Choose a format code. \n eg: 137+251 for merging, hls-1080p, 22 for single:${nocolor}"
        read -r code
        # We redirect the format code in a text file,
        # because 'grep' can't act within a variable ($code).
        echo "$code" > "$YTOP"
        sleep 0.5

        echo " ${green}Please be patient while downloading ${red}$(_print_title)...${nocolor}"
        sleep 2s

        if [[ $(grep -e '+' "$YTOP") ]]; then
            youtube-dl -f "$code" --merge-output-format mp4 "$url" > "$YTOP"
        else
            youtube-dl -f "$code" "$url" > "$YTOP"
        fi

        sed -i '2d' "$QUEUE"
        clear

    done

    echo -e " ${green}Done.\n${nocolor}"
    sleep 2s
    rm "$tmp_dir"/*.txt
    _get_incompleted

}

_get_mpv_title() {
    # mpv --idle --really-quiet --input-ipc-server=/tmp/mpvsocket
    while [[ -n $(pidof mpv) ]]; do
        echo '{ "command": ["get_property", "media-title"] }' \
        | socat - /tmp/mpvsocket | awk -F '"' '{print $4}' > "$METADATAS"
        echo " ${green}Now playing: " "${nocolor}$(tail -n 1 $METADATAS)"
        sleep 2s
        clear
    done
}

_stop_mpvipc() {
    [[ $(systemctl --user list-units | awk '/mpv-ipc/{print $3}') == 'active' ]] \
        && systemctl --user stop mpv-ipc.service
}

_load_audio() {
    # _stop_mpvipc
    mpvc -a -Q "$QUEUE"
    #_get_mpv_title
    #rm "$METADATAS"
    rm "$tmp_dir"/*.txt
    clear
    _menu
}

_load_video() {
    # _stop_mpvipc
    echo ""
    if [[ -f "$URLS_INFO" ]]; then
        mapfile -t < <(cat "$URLS_INFO")
        sed -i '/https/d;s/"//g' "$COMPLETE_INFO"
    else
        grep -e 'https' "$COMPLETE_INFO" \
        | sed 's/"//g' > "$URLS_INFO"
        sed -i '/https/d;s/"//g' "$COMPLETE_INFO"
        mapfile -t < <(cat "$URLS_INFO")
    fi

    for i in "${MAPFILE[@]}"; do
        cat -n "$COMPLETE_INFO"
        echo ""
        echo " ${red}Press 'q' in mpv to play next video.${nocolor}"
        mpv --ytdl-format=137+251 "$i" >/dev/null 2>&1 \
        || mpv --ytdl-format=299+251 "$i" >/dev/null 2>&1 \
        || mpv --ytdl-format=22 "$i" >/dev/null 2>&1 \
        || mpvc -a "$QUEUE"
        sed -i '1d' "$COMPLETE_INFO"
        clear
    done

    rm "$tmp_dir"/*.txt
    #_get_mpv_title
    #rm "$METADATAS"
    _check_queue

}

_load_playlist() {

    cd "$playlists_dir"

    PS3=""
    echo -e " ${green}Select a playlist to load (Press 'q' to quit mpv):\n${nocolor}"
    select list in $(find . -name "*.m3u" | sort -d | sed 's,.*/,,'); do

        if ! grep -q -e 'https' -e 'http' "$list"; then
            echo " ${red}$list is empty...${nocolor}"
            sleep 3s
            break
        fi

        # $list may also contain a {playlist url}, so let's extract videos from,
        # remove {playlist url} and grab videos' titles.(in the second while loop).
        if [[ $(grep -e 'playlist?list=' "$list") ]]; then
            echo ""
            echo -e " ${green}Checking youtube playlist availability...please wait.${nocolor}\n"
            rm "$URLS_INFO" >/dev/null 2>&1

            while read -r line; do
                youtube-dl -j "$line" \
                | jq '(.webpage_url)' \
                | cat | sed 's/"//g' >> "$URLS_INFO"
            done < <(cat "$list" | sed '/#EXTM3U/d')

            cat "$URLS_INFO" >> "$list"
            # Cleaning $list...
            sed -i '/playlist/d' "$list"
            sed -i -n 'G; s/\n/&&/; /^\([ -~]*\n\).*\n\1/d; s/\n//; h; P' "$list"
        fi

        echo -e " ${green}Getting videos titles...please wait.${nocolor}\n"

        while read -r line; do
            youtube-dl -j "$line" \
            | jq '(.title)' >> "$COMPLETE_INFO"
        done < <(cat "$list" | sed '/#EXTM3U/d')

        cat -n "$COMPLETE_INFO"
        echo ""

        echo -e " ${green}Just load [l] download audio [a] or download video [v] \n (Press '^C' to quit youtube-dl):${nocolor} "
        read -rsn 1 letter
        case "$letter" in
            a)  _download_audio ;;
            l)  # _stop_mpvipc
                echo ""
                read -rsn 1 -p  ${green}' Load audio only [a] or video [v] ?: '${nocolor} load
                clear
                case "$load" in
                    a)  mpvc -a -Q "$list" ;;
                    v)  while read -r url; do
                            cat -n "$COMPLETE_INFO"
                            echo ""
                            echo -e " ${red}Press 'q' to play next video.${nocolor}\n"
                            mpv --ytdl-format=137+251 "$url" >/dev/null 2>&1 \
                            || mpv --ytdl-format=299+251 "$url" >/dev/null 2>&1 \
                            || mpv --ytdl-format=22 "$url" >/dev/null 2>&1 \
                            mpvc -a "$list"
                            sed -i '1d' "$COMPLETE_INFO"
                            clear
                        done < <(cat "$list" | sed '/#EXTM3U/d') ;;
                    *)  echo " ${red} Wrong option! Wait and try again...${nocolor}"
                        sleep 3s ;;
                esac

                rm "$tmp_dir"/*.txt >/dev/null 2>&1
                clear
                _menu ;;
            v)  _download_video ;;
            *)  echo " ${red} Wrong option! Wait and try again...${nocolor}"
                sleep 3s ;;
        esac

    done

    clear
    _menu

}

_load_local() {
    local VIDEOS="$HOME/Documents/Videos/"

    echo -e " ${green}What would you like to load, a directory [d] or file(s) [f] ?: ${nocolor}\n"
    read -rsn 1 answer

    case "$answer" in
        d)  PS3=" Select a directory to QUEUE in mpv: "
            select dir in $(find "$VIDEOS" -maxdepth 1 | sed 's,.*/,,'); do
                if [[ $(find "$VIDEOS"/"$dir" -type d -empty) ]]; then
                    echo " ${red}$dir is empty. Wait and try again...${nocolor}"
                    sleep 3s
                    break
                else
                    mpvc add "$VIDEOS"/"$dir"/* >/dev/null 2>&1
                    [[ -z $(pidof mpv) ]] && {
                        echo " ${red}$dir might be a broken link or points to an empty directory.${nocolor}"
                        sleep 5s
                        break
                    }
                    echo " ${green}$dir added to the mpv playlist.${nocolor}"
                    sleep 3s
                    break
                fi
            done
            _menu ;;
        f)  ranger "$VIDEOS"; _menu ;;
        *)  echo " ${red} Wrong option! Wait and try again...${nocolor}"
            sleep 3s ;;
    esac
}

_save_remove() {

    cd "$playlists_dir"
    clear
    read -rsn 1 -p 'Save [s] or Remove [r] a playlist?: ' opt
    echo ""
    case "$opt" in
        s)  echo -e " ${green}Available playlists:\n${nocolor}"
            find . -name "*.m3u" -o -name "*.m3u_origin" | sort -d | sed 's,.*/,,'
            echo ""
            echo -e " ${green}Save playlist as:\n${nocolor}"
            read -r list
            list="$list.m3u"
            if [[ $(find . -name "${list}") ]]; then
                echo -e " ${red}This playlist already exists!\n Overwrite $list? [y/N]:${nocolor}"
                read -r overwrite
                case "$overwrite" in
                    y|Y)    cp -f "$QUEUE" "$list"
                            echo " ${green}$list saved ${nocolor}"
                            sleep 3s
                            _check_queue ;;
                    N|n)    _check_queue ;;
                    *  )    _check_queue ;;
                esac
            else
                cp "$QUEUE" "$list"
                echo " ${green}$list saved ${nocolor}"
                sleep 2s
                _check_queue
            fi ;;
        r)  PS3=""
            echo -e " ${green}Which playlist do you want to remove? \n${nocolor}"
            select list in $(find . -name "*.m3u" -o -name "*.m3u_origin" | sort -d | sed 's,.*/,,'); do
                echo ""
                echo " ${red}Are you sure you want to remove $list? [y/N]:${nocolor}"
                read -r del
                case "$del" in
                    y|Y)    rm "$list"
                            echo " ${red}$list removed ${nocolor}"
                            sleep 3s
                            _menu ;;
                    N|n)    _menu ;;
                    *  )    echo " ${red} Wrong option! Wait and try again...${nocolor}"
                            sleep 3s
                            _menu ;;
                esac
            done ;;
        *)  echo " ${red} Wrong option! Wait and try again...${nocolor}"
            sleep 3s
            _menu ;;
    esac

}

_delete_url() {
    if (( $(grep "" -c "$QUEUE") < 2 )); then
        echo " ${green}Nothing to do here, main list is empty...${nocolor}"
        sleep 3s
        _menu
    else
        echo ""
        sed -i '/https/d' "$QUEUE"
        rm "$tmp_dir"/*.txt
        echo " ${red}All urls removed ${nocolor}"
        sleep 3s
        _menu
    fi
}

_check_dependencies "${@}"
