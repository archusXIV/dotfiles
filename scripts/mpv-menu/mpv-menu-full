#!/bin/bash

##    Author: Barret E (2020-21) <archus@protonmail.com>
##    https://github.com/archusXIV/dotfiles
##    Dependencies: ffmpeg, jq,  mpv, ranger, youtube-dl.
##
##    Youtube-dl is for now kind of unmaintained so install and make a symlink with
##    https://github.com/yt-dlp/yt-dlp/releases
##    ln -s /usr/bin/yt-dlp ~/.local/bin/youtube-dl (if ~/.local/bin is in your $PATH)
##
##    This script rips video urls from Youtube and so on.
##    In our case we use ".m3u" files to store urls in and then be able
##    to watch from the site itself or download videos or just the audio.
##    We can save, remove or edit playlists, mpv.conf.
##    It is recommanded to disable mpv cache for better results on direct streaming,
##    or find a better cache parameter.

## prompts & messages colors
nocolor=$'\e[0m';
red=$'\e[0;31m';
green=$'\e[0;32m';

## directories & files
main_dir="$HOME/Documents/mpv-menu"
playlists_dir="$main_dir/playlists"
audios_dir="$main_dir/audios"
videos_dir="$main_dir/videos"
tmp_dir="$main_dir/tmp"
QUEUE="$playlists_dir/default.m3u"

# This function is called multiple times across this program,
# but let's ensure temporary files are removed before we exit out.
_CleanTmpDir() { rm -f "$tmp_dir"/* >/dev/null 2>&1; }

trap "_CleanTmpDir; exit" SIGTERM EXIT

_CheckDependencies() {

    ## Checking dependencies: softwares, directories and files.
    declare -a deps=( "ffmpeg" "jq" "mpv" "ranger" "youtube-dl" )

    for item in "${deps[@]}"; do
        [[ -z $(command -v "$item") ]] && {
            echo " ${red}$i isn 't installed, bye..."
            exit 127
        }
    done

    if [[ ! -d $main_dir ]]; then
        mkdir --parents {"$audios_dir","$playlists_dir","$tmp_dir","$videos_dir"}
    else
        [[ ! -d $audios_dir ]] && mkdir "$audios_dir"
        [[ ! -d $playlists_dir ]] && mkdir "$playlists_dir"
        [[ ! -d $tmp_dir ]] && mkdir "$tmp_dir"
        [[ ! -d $videos_dir ]] && mkdir "$videos_dir"
    fi

    [[ ! -f $QUEUE ]] && echo "#EXTM3U" > "$QUEUE"

    _CheckQueue

}

_Menu() {

    clear
    while [[ -e $QUEUE ]]; do
        clear
        echo ""
        echo -e "                                                ${red}::MPV-MENU OPTIONS::${nocolor} "
        echo -e "                            ┌─────────────────────────────────────────────────────────────┐"
        echo -e "                            │   1) Create a video playlist    6) View default playlist    │"
        echo -e "                            │   2) Create an audio playlist   7) Clear default playlist   │"
        echo -e "                            │   3) Save/Remove playlist       8) Edit a playlist          │"
        echo -e "                            │   4) Load a playlist            9) Edit mpv.conf/Usage      │"
        echo -e "                            │   5) Load local dir/files       0) Exit                     │"
        echo -e "                            └─────────────────────────────────────────────────────────────┘"
        echo -e "                                                   ${green}Select an item${nocolor}"
        echo ""
        read -rsn 1 action
        case "$action" in
            1)  _CopyVideo
                echo "" ;;
            2)  _CopyAudio
                echo "" ;;
            3)  _SaveRemove
                echo "" ;;
            4)  _LoadPlaylist
                echo "" ;;
            5)  _LoadLocal
                echo "" ;;
            6)  _ViewUrlInfo
                echo "" ;;
            7)  _DeleteUrl
                echo "" ;;
            8)  _EditPlaylist
                echo "" ;;
            9)  _EditMpvConf
                echo "" ;;
            0)  exit 0 ;;
            *)  echo -e " ${red}Wrong option!\n Wait and try again...${nocolor}"
                sleep 2s
                clear ;;
        esac
    done

}

_CheckEditor() {

    for item in $EDITOR $VISUAL; do
        if [[ -z ${item+x} ]]; then
            echo " ${red}Your $item environment variable is not set..."
            echo " ${green}Please consider doing so."
            echo " Example: ${red}export EDITOR='vim' ${nocolor}"
            sleep 7s
            _Menu
        fi
    done

}

_CheckQueue() {
    ## This looks ugly but everything will fit nicely...
    if (( $(grep '^https' -c "$QUEUE") > 0 )); then
        echo -e "                                    ┌──────────────────────────────────────────────┐"
        echo -e "                                    │ ${red}Default playlist contains one or more url(s) ${nocolor}│"
        echo -e "                                    │ Consider checking the url(s) list ${green}(option 6).${nocolor}|"
        echo -e "                                    │ Or delete them ${green}(option 7).${nocolor}                   |"
        echo -e "                                    └──────────────────────────────────────────────┘"
        sleep 4s
        _Menu
    else
        _Menu
    fi

}

_CheckCode() {
    
    case "$1" in
        -q) # In case link is secured or no format code found.
            echo " ${green}Verifying media codes from default list...${nocolor}"
            
            mapfile -t mediacode < <(grep '^https' "$QUEUE")
            
            for lines in "${mediacode[@]}"; do
                # checking the last url we added.
                youtube-dl -F $(sed -n '$ p' "$QUEUE") >/dev/null 2>&1
        
                if [[ $? -eq 1 ]]; then
                    echo -e " ${red}No format code found!\n $lines removed${nocolor}"
                    sed -i '$ d' "$QUEUE"
                    sleep 2s
                    if (( $(grep '^https' -c "$QUEUE" ) == 0 )); then
                        _Menu
                    else
                        # _CheckCode function acts in _CopyAudio/videeo loops...
                        continue
                    fi
                fi
                echo "$lines ${green}ok${nocolor}"
                sleep 1s
            done ;;
        -l) # Same as above, but for the chosen already existing playlist.
            echo " ${green}Verifying media codes from $list...${nocolor}"
        
            mapfile -t mediacode < <(grep '^https' "$list")
            
            for lines in "${mediacode[@]}"; do
                
                youtube-dl -F $(sed -n '$ p' "$list") >"$YTOP"
        
                if [[ $? -eq 1 ]]; then
                    echo -e " ${red}No format code found!\n $lines removed${nocolor}"
                    sleep 2s
                    sed -i '$ d' "$list"
                    if (( $(grep '^https' -c "$list" ) == 0 )); then
                        _Menu
                    else
                        continue
                    fi
                fi
                echo "$lines ${green}ok${nocolor}"
                sleep 1s
            done ;;
    esac

}

YTOP="$tmp_dir/youtube-dl_output.txt"
COMPLETE_INFO="$tmp_dir/view_urls_info.txt"
URLS_INFO="$tmp_dir/urls.txt"
HIGH="$tmp_dir/quality_hight.m3u"
MEDIUM="$tmp_dir/quality_medium.m3u"
LOW="$tmp_dir/quality_low.m3u"
ELSE="$tmp_dir/else.m3u"

_GetQualityCodes() {
    # we want to play the best quality first...
    case "$1" in
        # -q for default.m3u, -l for (play)list
        -q  )   mapfile -t qualitycode < <(cat "$QUEUE" | sed '/#EXTM3U/d')
        
                for line in "${qualitycode[@]}"; {
                    youtube-dl -F $line > "$YTOP"
                    if grep -q '^137' "$YTOP"; then
                        echo $line >> "$HIGH"
                    elif grep -q '^22' "$YTOP"; then
                        echo $line >> "$MEDIUM"
                    elif grep -q '^135' "$YTOP"; then
                        echo $line >> "$LOW"
                    else
                        echo $line >> "$ELSE"
                    fi
                }
                
                sed -i -n \
                'G; s/\n/&&/; /^\([ -~]*\n\).*\n\1/d; s/\n//; h; P' \
                "$HIGH" "$MEDIUM" "$LOW" >/dev/null 2>&1
        ;;
        -l  )   mapfile -t qualitycode < <(cat "$list" | sed '/#EXTM3U/d')
        
                for line in "${qualitycode[@]}"; {
                    youtube-dl -F $line > "$YTOP"
                    if grep -q '^137' "$YTOP"; then
                        echo $line >> "$HIGH"
                    elif grep -q '^22' "$YTOP"; then
                        echo $line >> "$MEDIUM"
                    elif grep -q '^135' "$YTOP"; then
                        echo $line >> "$LOW"
                    else
                        echo $line >> "$ELSE"
                    fi
                }
                
                sed -i -n \
                'G; s/\n/&&/; /^\([ -~]*\n\).*\n\1/d; s/\n//; h; P' \
                "$HIGH" "$MEDIUM" "$LOW" >/dev/null 2>&1
        ;;
    esac
    
}

_ViewUrlInfo() {

    [[ -f $COMPLETE_INFO ]] && rm "$COMPLETE_INFO"

    if (( $(grep "" -c "$QUEUE") > 1 )); then
        echo " ${green}Getting url(s) infos, please wait...${nocolor}"

        mapfile -t urlinfo < <(cat "$QUEUE" | sed '/#EXTM3U/d')
        
        for urls in "${urlinfo[@]}"; {
            youtube-dl -j $urls \
            | jq '(.title, .webpage_url)' >> "$COMPLETE_INFO"
        }

        cat -n "$COMPLETE_INFO" | sed 's/"//g'
        cat "$QUEUE" | sed '/#EXTM3U/d' > "$URLS_INFO"
        _GetQualityCodes -q &
        sed -i 's/"//g; /^https/d' "$COMPLETE_INFO"

        echo ""
        read -rsn 1 -p ${green}' [D]elete, [P]lay, [S]ave as a playlist or [B]ack to menu: '${nocolor} opt
        case "$opt" in
            d)  rm "$COMPLETE_INFO" && _DeleteUrl  ;;
            b)  rm "$COMPLETE_INFO" && {
                clear
                _CheckQueue
            } ;;
            p)  echo ""
                _CheckCode -q && _LoadVideo       ;;
            s)  rm "$COMPLETE_INFO" && _SaveRemove ;;
            *)  _Menu                               ;;
        esac
    else
        echo " ${red}Default list is empty.${nocolor}"
        sleep 2s && _Menu
    fi

}

_RemoveCrap() {
    # After some tests it appears that a single link copied from a youtube playlist
    # causes the download of the entire playlist.
    # So with the help of sed we cleanup the link to get the direct link to the desired video.
    # Note that this behavior does not appear during a simple viewing/listening.

    [[ -n $(grep -e '&list' "$QUEUE") ]] && {
        echo " ${red}Cleaning entries...${nocolor}"
        sleep 2s
        sed -i 's/&.*//' "$QUEUE" "$URLS_INFO"
        
    }

    # Let's remove possible duplicates using regex.
    [[ -n $(uniq -d "$QUEUE") ]] && {
        echo " ${red}Removing double entries...${nocolor}"
        sleep 2s
        sed -i -n \
        'G; s/\n/&&/; /^\([ -~]*\n\).*\n\1/d; s/\n//; h; P' \
        "$QUEUE" "$URLS_INFO"
    }

    # Let's remove possible empty lines.
    sed -i '/^\s*$/d' "$QUEUE" "$URLS_INFO"

}

_CopyAudio() {

    while (( $(grep "" -c "$QUEUE") > 0 )); do
        echo ""
        echo " Paste an url to fill the audio playlist:"
        read -r url
        echo "$url" | tee -a "$QUEUE" >> "$URLS_INFO"

        _GetYoutubePlaylistUrls
        _RemoveCrap
        clear

        if (( $(grep "" -c "$QUEUE") < 3 )); then
            echo ""
            echo " ${green}There is $(_GetLinesQueue) url in the list${nocolor}."
        else
            echo ""
            echo " ${green}There are $(_GetLinesQueue) urls in the list${nocolor}."
        fi

        echo ""
        echo -e "                                                 ::audio options:: "
        echo -e "                             ┌────────────────────────────────────────────────────────────┐"
        echo -e "                             │     1) Add more audio links      4) Play current list      │"
        echo -e "                             │     2) Download current list     5) View current list      │"
        echo -e "                             │     3) Save playlist as          6) Back to main menu      │"
        echo -e "                             └────────────────────────────────────────────────────────────┘"
        echo -e "                                                   ${green}Select an item${nocolor}"
        echo ""
        read -rsn 1 options
        case "$options" in
            1) clear && continue
               echo "" ;;
            2) _GetAudio
               echo "" ;;
            3) _SaveRemove
               echo "" ;;
            4) _CheckCode -q && _LoadAudio
               echo "" ;;
            5) _ViewUrlInfo
               echo "" ;;
            6) _CheckQueue
               echo "" ;;
        esac
    done

}

_CopyVideo() {

    while (( $(grep "" -c "$QUEUE") > 0 )); do
        echo ""
        echo " Paste an url to fill the video playlist:"
        read -r url
        echo "$url" | tee -a "$QUEUE" >> "$URLS_INFO"

        _GetYoutubePlaylistUrls
        _RemoveCrap
        clear

        if (( $(grep "" -c "$QUEUE") < 3 )); then
            echo ""
            echo " ${green}There is $(_GetLinesQueue) url in the list${nocolor}."
        else
            echo ""
            echo " ${green}There are $(_GetLinesQueue) urls in the list${nocolor}."
        fi

        echo ""
        echo -e "                                                 ::video options:: "
        echo -e "                             ┌────────────────────────────────────────────────────────────┐"
        echo -e "                             │     1) Add more video links      4) Play current list      │"
        echo -e "                             │     2) Download current list     5) View current list      │"
        echo -e "                             │     3) Save playlist as          6) Back to main menu      │"
        echo -e "                             └────────────────────────────────────────────────────────────┘"
        echo -e "                                                   ${green}Select an item${nocolor}"
        echo ""
        read -rsn 1 options
        case "$options" in
            1)  clear && continue
                echo "" ;;
            2)  _GetVideo
                echo "" ;;
            3)  _SaveRemove
                echo "" ;;
            4)  _GetQualityCodes -q &
                _CheckCode -q && _LoadVideo
                echo "" ;;
            5)  _ViewUrlInfo
                echo "" ;;
            6)  _CheckQueue
                echo "" ;;
        esac
    done

}

_DownloadCompleted() {

    echo " ${green}Downloads are completed, do you want to delete $list? [N/y]: ${nocolor}"
    # Here we don't need any variable to set.
    # Let's use the bash default one.
    read -rsn 1
    case "$REPLY" in
        N|n)    mv --force "$list"_origin "$list" && _Menu ;;
        y|Y)    if [[ -f "$QUEUE"_origin ]]; then
                    rm -f "$QUEUE"_origin
                    _CheckQueue
                else
                    rm "$list" "$list"_origin
                    _CheckQueue
                fi ;;
        *  )    echo " ${red} Wrong option! Wait and try again...${nocolor}"
                sleep 3s ;;
    esac
    
}

_DownloadIncompleted() {

    if [[ $(find "$playlists_dir" -name "*.part") ]]; then
        echo -e " ${red}Incomplete files in $playlists_dir:\n"
        find "$playlists_dir" -name "*.part" | sort -d | sed 's,.*/,,'
        echo " ${green}Edit "$list"_origin and try again later? [Y/n]:${nocolor}"
        read -rsn 1 edit
        case "$edit" in
            Y|y) _EditPlaylist ;;
            n|N) echo "" && _DownloadCompleted ;;
        esac
    else
        _DownloadCompleted
    fi

}

# let's get our file (web page) title.
_GetMediaTitle() { youtube-dl -j "$url" | jq '(.title)'; }

_GetLinesList() { grep '^https' -c "$list"; }

FFOP="$tmp_dir/ffmpeg_output.txt"

_DownloadAudio() {
    # ...We're still in $playlists_dir
    clear
    cp -f "$list" "$list"_origin
    _CheckCode -l

    for url in $(grep '^https' "$list"); do

        # We compare if the content of $list is less than 3 because:
        # 1) we have expression #EXTM3U at the top.
        # 2) the uniq url we've enter...if that's the case.
        if (( $(grep "" -c "$list") < 3 )); then
            echo ""
            echo " ${green}There is $(_GetLinesList) audio file left to download.${nocolor}"
        else
            echo ""
            echo " ${green}There are $(_GetLinesList) audio files left to download.${nocolor}"
        fi

        echo ""
        youtube-dl -F "$url" | sed -n '/audio only/p'
        echo ""
        echo " ${green}Choose a format code: ${nocolor}"
        read -r code
        clear
        echo " ${green}Downloading ${red}$(_GetMediaTitle)...${nocolor}"
        youtube-dl -f "$code" --progress "$url"
        sed -i '2d' "$list"
        clear

    done

    echo -e " ${green}Done${nocolor}\n"

    if [[ -n $(find . -iname "*.webm") ]]; then
        
        echo " ${green}Please be patient while ffmpeg is working...${nocolor}"
        find . -iname "*.webm" -exec \
        bash -c 'FILE="$1"; \
        ffmpeg -i "${FILE}" \
        -vn -ab 320k -ar 48000 \
        -y "${FILE%.webm}.mp3";' _ '{}' \; 2>"$FFOP"

        echo " ${green}All done${nocolor}"
        sleep 2s
        rm ./*.webm
        _CleanTmpDir
        mv ./*.mp3 "$audios_dir"
        _DownloadIncompleted
        
    elif [[ -n $(find . -iname "*.*") ]]; then
        echo " ${green}Please check out for none mp3 files in $playlists_dir${nocolor}"
        sleep 5s
        _CleanTmpDir
        _DownloadIncompleted
    fi

}

_DownloadVideo() {
    # We're still in $playlists_dir
    clear
    cp -f "$list" "$list"_origin
    _CheckCode -l

    for url in $(grep -e 'https' "$list"); do

        if (( $(grep "" -c "$list") < 3 )); then
            echo ""
            echo " ${green}There is $(_GetLinesList) video file left to download.${nocolor}"
        else
            echo ""
            echo " ${green}There are $(_GetLinesList) video files left to download.${nocolor}"
        fi

        youtube-dl -F "$url" | sed '/^sb/d'
        echo ""
        echo -e " ${green}Choose a format code. \n eg: 137+251 for merging, hls-1080p, 22 for single:${nocolor}"
        read -r code #&& echo "$code" > "$YTOP"
        sleep 0.5
        clear
        
        if [[ "$code" =~ '+' ]]; then
        # if [[ $(grep -e '+' "$YTOP") ]]; then
            echo " ${green}Please be patient while downloading and merging formats for:"
            echo " ${red}$(_GetMediaTitle).${nocolor}"
            youtube-dl -f "$code" --merge-output-format mp4 --progress "$url"
        else
            echo " ${green}Please be patient while downloading:"
            echo " ${red}$(_GetMediaTitle).${nocolor}"
            youtube-dl -f "$code" --progress "$url"
        fi

        sed -i '2d' "$list"
        clear

    done

    mv ./{*.mp4,*.mkv} "$videos_dir" > /dev/null 2>&1
    echo " ${green}All done${nocolor}"
    sleep 2s
    _CleanTmpDir
    _DownloadIncompleted

}

_EditPlaylist() {

    _CheckEditor
    cd "$playlists_dir"

    PS3=${green}' Choose a playlist to edit: '${nocolor}

    select list in $(find . -name "*.m3u" -o -name "*.m3u_origin" \
        | sort -d | sed 's,.*/,,'); do
        echo ""
        $VISUAL "$list" || $EDITOR "$list"
        echo " ${green}$list saved${nocolor}"
        sleep 2s
        break
    done
    _Menu
    
}

_EditMpvConf() {
    
    _CheckEditor
    $VISUAL "$XDG_CONFIG_HOME"/mpv/mpv.conf \
    || $EDITOR "$XDG_CONFIG_HOME"/mpv/mpv.conf
    echo " ${green}mpv.conf saved.${nocolor}"
    sleep 2s
    clear
    _Menu
    
}

_GetLinesQueue() { grep '^https' -c "$QUEUE"; }

_GetYoutubePlaylistUrls() {
    
    if grep -qe 'playlist?list=' "$QUEUE"; then
        echo ""
        echo -e " ${green}Checking youtube playlist availability...please wait.${nocolor}\n"

        mapfile -t youtubeplaylist < <(cat "$QUEUE" | sed '/#EXTM3U/d')
        
        for line in "${youtubeplaylist[@]}"; {
            youtube-dl -j $line \
            | jq '(.webpage_url)' \
            | cat | sed 's/"//g' >> "$URLS_INFO"
        }

        cat "$URLS_INFO" >> "$QUEUE"
        sed -i '/playlist/d' "$QUEUE" "$URLS_INFO"
    fi
    
}

_GetCompleted() {
    
    echo " ${green}Downloads are completed, do you want to keep main playlist? [N/y]: ${nocolor}"
    read -rsn 1
    case "$REPLY" in
        N|n)    rm "$QUEUE"_origin && _Menu ;;
        *  )    mv -f "$QUEUE"_origin "$QUEUE" && _CheckQueue ;;
    esac
    
}

_GetIncompleted() {
    
    _MainPlaylistEdition() {
        read -rsn 1 -p ${green}' Edit "$QUEUE"_origin and try again later? [Y/n]: '${nocolor} edit
        case "$edit" in
            Y|y) _EditPlaylist ;;
            n|N) echo "" && _GetCompleted ;;
        esac
    }

    if [[ $(find "$audios_dir" -name "*.part") ]]; then
        echo -e " ${red}Incomplete files in $audios_dir:\n"
        find "$audios_dir" -name "*.part" | sort -d | sed 's,.*/,,'
        _MainPlaylistEdition
    elif [[ $(find "$videos_dir" -name "*.part") ]]; then
        echo -e " ${red}Incomplete files in $videos_dir:\n"
        find "$videos_dir" -name "*.part" | sort -d | sed 's,.*/,,'
        _MainPlaylistEdition
    else
        _GetCompleted
    fi
    
}

_GetAudio() {

    cd "$audios_dir"
    cp -f "$QUEUE" "$QUEUE"_origin

    _CheckCode -q

    for url in $(grep '^https' "$QUEUE"); do

        if (( $(grep "" -c "$QUEUE") < 3 )); then
            echo ""
            echo " ${green}There is $(_GetLinesQueue) audio file left to download.${nocolor}"
        else
            echo ""
            echo " ${green}There are $(_GetLinesQueue) audio files left to download.${nocolor}"
        fi

        youtube-dl -F "$url" | sed -n '/audio only/p'
        echo ""
        echo " ${green}Choose a format code: ${nocolor}"
        read -r code
        clear
        echo -e " ${green}Please be patient while downloading \n ${red}$(_GetMediaTitle)...${nocolor}"
        sleep 2s
        youtube-dl -f "$code" --progress "$url"
        sed -i '2d' "$QUEUE"
        clear

    done

    echo -e " ${green}Done\n${nocolor}"

    if [[ -n $(find . -iname "*.webm") ]]; then
        
        echo " ${green}Please be patient while ffmpeg is working...${nocolor}"
        find . -iname "*.webm" -exec \
        bash -c 'FILE="$1"; \
        ffmpeg -i "${FILE}" \
        -vn -ab 320k -ar 48000 \
        -y "${FILE%.webm}.mp3";' _ '{}' \; 2>"$FFOP"

        echo " ${green}Done${nocolor}"
        sleep 2s
        rm ./*.webm
        _CleanTmpDir
        _GetIncompleted
    
    else
        _CleanTmpDir
        _GetIncompleted
    fi

}

_GetVideo() {

    cd "$videos_dir"
    cp -f "$QUEUE" "$QUEUE"_origin

    _CheckCode -q

    for url in $(grep '^https' "$QUEUE"); do

        if (( $(grep "" -c "$QUEUE") < 3 )); then
            echo ""
            echo " ${green}There is $(_GetLinesQueue) video file left to download.${nocolor}"
        else
            echo ""
            echo " ${green}There are $(_GetLinesQueue) video files left to download.${nocolor}"
        fi

        youtube-dl -F "$url" | sed '/^sb/d'
        echo ""
        echo -e " ${green}Choose a format code. \n eg: 137+251 for merging, hls-1080p, 22 for single:${nocolor}"
        # We redirect the format code in a text file,
        # because 'grep' can't act within a variable ($code).
        read -r code
        sleep 0.5
        clear
        
        if [[ "$code" =~ '+' ]]; then
            echo " ${green}Please be patient while downloading and merging formats for:"
            echo " ${red}$(_GetMediaTitle).${nocolor}"
            youtube-dl -f "$code" --merge-output-format mp4 --progress "$url"
        else
            echo " ${green}Please be patient while downloading:"
            echo " ${red}$(_GetMediaTitle).${nocolor}"
            youtube-dl -f "$code" --progress "$url"
        fi

        sed -i '2d' "$QUEUE"
        clear

    done

    echo -e " ${green}Done.\n${nocolor}"
    sleep 2s
    _GetIncompleted

}

_LoadAudio() {
    mpv --no-video "$QUEUE"
    _CleanTmpDir
    _Menu
}

_LoadVideo() {

    clear
    echo ""
    
    [[ -f $HIGH ]] && mpv --ytdl-format=137+251 "$HIGH"
    [[ -f $MEDIUM ]] && mpv --ytdl-format=22 "$MEDIUM"
    [[ -f $LOW ]] && mpv "$LOW" || [[ -f $ELSE ]] && mpv "$ELSE"

    _CleanTmpDir
    _CheckQueue

}

_LoadPlaylist() {

    cd "$playlists_dir"

    PS3=""
    echo -e " ${green}Select a playlist to load (Press 'q' to quit mpv):\n${nocolor}"
    select list in $(find . -name "*.m3u" | sort -d | sed 's,.*/,,'); do

        if ! grep -q -e '^https' "$list"; then
            echo " ${red}$list is empty...${nocolor}"
            sleep 3s
            break
        fi

        # $list may also contain a {playlist url}, so let's extract videos from,
        # remove {playlist url} and grab videos' titles.(in the second while loop).
        if [[ $(grep -e 'playlist?list=' "$list") ]]; then
            echo ""
            echo -e " ${green}Checking youtube playlist availability...please wait.${nocolor}\n"
            [[ -f $URLS_INFO ]] && rm "$URLS_INFO"

            mapfile -t listinfo < <(cat "$list" | sed '/#EXTM3U/d')
            
            for line in "${listinfo[@]}"; {
                youtube-dl -j $line \
                | jq '(.webpage_url)' \
                | cat | sed 's/"//g' >> "$URLS_INFO"
            }

            cat "$URLS_INFO" >> "$list"

            # Cleaning $list...
            sed -i '/playlist/d' "$list"
            sed -i -n 'G; s/\n/&&/; /^\([ -~]*\n\).*\n\1/d; s/\n//; h; P' "$list"
            _CheckCode -l
        else
            cat "$list" | sed '/#EXTM3U/d' > "$URLS_INFO"
        fi

        echo -e " ${green}Getting videos titles...please wait.${nocolor}\n"
        
        [[ -f $COMPLETE_INFO ]] && rm "$COMPLETE_INFO"

        mapfile -t videotitle < <(cat "$list" | sed '/#EXTM3U/d')
        
        for line in "${videotitle[@]}"; {
            youtube-dl -j $line \
            | jq '(.title)' >> "$COMPLETE_INFO"
        }
        
        [[ -n $(uniq -d "$COMPLETE_INFO") ]] && {
            echo " ${red}Removing double entries...${nocolor}"
            sleep 2s
            sed -i -n \
            'G; s/\n/&&/; /^\([ -~]*\n\).*\n\1/d; s/\n//; h; P' \
            "$COMPLETE_INFO"
        }

        cat -n "$COMPLETE_INFO"

        echo ""
        echo -e " ${green}Just load [l] download audio [a] or download video [v] \n (Press '^C' to quit youtube-dl):${nocolor} "
        read -rsn 1 letter
        
        case "$letter" in
            a)  _DownloadAudio ;;
            l)  echo ""
                read -rsn 1 -p  ${green}' Load audio only [a] or video [v] ?: '${nocolor} load
                clear
                case "$load" in
                    a)  _CheckCode -l && mpv --no-video "$list" ;;
                    v)  _GetQualityCodes -l &
                        _CheckCode -l && _LoadVideo ;;
                    *)  echo " ${red} Wrong option! Wait and try again...${nocolor}"
                        sleep 3s ;;
                esac

                _CleanTmpDir
                clear
                _Menu ;;
            v)  _DownloadVideo ;;
            *)  echo " ${red} Wrong option! Wait and try again...${nocolor}"
                sleep 3s ;;
        esac

    done

    clear
    _Menu

}

_LoadLocal() {

    local AUDIOS="$HOME/Documents/Music/" VIDEOS="$HOME/Documents/Videos/"
    
    read -rsn 1 -p ${green}' Do you want to load [a]udio or [v]ideo ?: '${nocolor} choice 
    case "$choice" in
        a)  echo ""
            echo -e " ${green}What would you like to load, a directory [d] or file(s) [f] ?: ${nocolor}\n"
            read -rsn 1 audio
    
            case "$audio" in
                d)  PS3=" Select a directory to queue in mpv: "
                    select dir in $(find "$AUDIOS" -maxdepth 1 | sed 's,.*/,,'); do
                        if [[ $(find "$AUDIOS"/"$dir" -type d -empty) ]]; then
                            echo " ${red}$dir is empty. Wait and try again...${nocolor}"
                            sleep 2s
                            break
                        else
                            # checking for content in linked directories.
                            if [[ -z $(command ls "$AUDIOS"/"$dir") ]]; then
                                echo " ${red}This symlink points to an empty directory!"
                                echo " Wait and try again...${nocolor}"
                                sleep 3s
                                break
                            fi
                            echo ""
                            mpv "$AUDIOS"/"$dir"/*
                            break
                        fi
                    done
                    _Menu ;;
                f)  ranger "$AUDIOS"; _Menu ;;
                *)  echo " ${red} Wrong option! Wait and try again...${nocolor}"
                sleep 3s ;;
            esac
            ;;
        v)  echo ""
            echo -e " ${green}What would you like to load, a directory [d] or file(s) [f] ?: ${nocolor}\n"
            read -rsn 1 video
            case "$video" in
                d)  PS3=" Select a directory to queue in mpv: "
                    select dir in $(find "$VIDEOS" -maxdepth 1 | sed 's,.*/,,'); do
                        if [[ $(find "$VIDEOS"/"$dir" -type d -empty) ]]; then
                            echo " ${red}$dir is empty. Wait and try again...${nocolor}"
                            sleep 2s
                            break
                        else
                            if [[ -z $(command ls "$VIDEOS"/"$dir") ]]; then
                                echo " ${red}This symlink points to an empty directory!"
                                echo " Wait and try again...${nocolor}"
                                sleep 3s
                                break
                            fi
                            echo ""
                            mpv "$VIDEOS"/"$dir"/*
                            break
                        fi
                    done
                    _Menu ;;
                f)  ranger "$VIDEOS"; _Menu ;;
                *)  echo " ${red} Wrong option! Wait and try again...${nocolor}"
                sleep 3s ;;
            esac
        ;;
    esac

}

_SaveRemove() {

    cd "$playlists_dir"
    clear
    read -rsn 1 -p 'Save [s] or Remove [r] a playlist?: ' opt
    echo ""

    case "$opt" in
        s)  echo -e " ${green}Available playlists:\n${nocolor}"
            find . -name "*.m3u" -o -name "*.m3u_origin" | sort -d | sed 's,.*/,,'
            echo ""
            echo -e " ${green}Save playlist as:\n${nocolor}"
            read -r list
            
            list="$list.m3u"
            if [[ $(find . -name "${list}") ]]; then
                echo -e " ${red}This playlist already exists!\n Overwrite $list? [y/N]:${nocolor}"
                read -r overwrite
                
                case "$overwrite" in
                    y|Y)    cp -f "$QUEUE" "$list"
                            echo " ${green}$list saved ${nocolor}"
                            sleep 3s
                            _CheckQueue ;;
                    N|n)    _CheckQueue ;;
                    *  )    _CheckQueue ;;
                esac
                
            else
                cp "$QUEUE" "$list"
                echo " ${green}$list saved ${nocolor}"
                sleep 2s
                _CheckQueue
            fi ;;
        r)  PS3=""
            echo -e " ${green}Which playlist do you want to remove? \n${nocolor}"
            
            select list in $(find . -name "*.m3u" -o -name "*.m3u_origin" | sort -d | sed 's,.*/,,'); do
                echo ""
                echo " ${red}Are you sure you want to remove $list? [y/N]:${nocolor}"
                read -r del
                
                case "$del" in
                    y|Y)    rm "$list"
                            echo " ${red}$list removed ${nocolor}"
                            sleep 3s
                            _Menu ;;
                    N|n)    _Menu ;;
                    *  )    echo " ${red} Wrong option! Wait and try again...${nocolor}"
                            sleep 3s
                            _Menu ;;
                esac
                
            done ;;
            
        *)  echo " ${red} Wrong option! Wait and try again...${nocolor}"
            sleep 3s
            _Menu ;;
    esac

}

_DeleteUrl() {
    
    if (( $(grep "" -c "$QUEUE") < 2 )); then
        echo " ${green}There is nothing to do, main list is empty...${nocolor}"
        sleep 3s
        _Menu
    else
        echo ""
        sed -i '/https/d' "$QUEUE"
        _CleanTmpDir
        echo " ${red}All urls removed.${nocolor}"
        sleep 3s
        _Menu
    fi
}

# avoids running multiple instances
mpvmenu=$(basename $0)
pids=($(pidof -x $mpvmenu))

[[ ${#pids[@]} -gt 1 ]] && exit

_CheckDependencies "${@}"

