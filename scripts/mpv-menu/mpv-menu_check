#!/bin/bash
## This is a part of main script: mpv-menu.

_remove_crap() {

    # After some tests it appears that a single link copied from a youtube playlist
    # causes the download of the entire playlist.
    # So with the help of sed we cleanup the link to get the direct link to the desired video.
    # Note that this behavior does not appear during a simple viewing/listening.

    [[ -n $(grep -e '&list' "$queue") ]] && {
        echo " ${red}Cleaning entries...${nocolor}"
        sleep 2s
        sed -i 's/&.*//' "$queue"
    }

    # Let's remove possible duplicates.
    [[ -n $(uniq -d "$queue") ]] && {
        echo " ${red}Removing double entries...${nocolor}"
        sleep 2s
        sed -i -n \
        'G; s/\n/&&/; /^\([ -~]*\n\).*\n\1/d; s/\n//; h; P' \
        "$queue"
    }

    # Let's remove possible empty lines
    [[ $(sed -r '/^\s*$/d' "$queue") ]] && sed -i '/^$/d' "$queue"

}

_check_queue() {

    _remove_crap
    ## This looks ugly but everything will fit nicely...
    if (( $(grep "" -c "$queue") > 1 )); then
        if (( $(grep "" -c "$queue") < 11 )); then
            echo -e "                            ┌──────────────────────────────────────────────┐"
            echo -e "                            │  ${red} There is" "$(sed '/#EXTM3U/d' "$queue" | wc -l)" "url(s) in default playlist.${nocolor}     │"
            echo -e "                            │ Consider checking the url(s) list ${green}(option 6) ${nocolor}|"
            echo -e "                            │ or delete them ${green}(option 7).${nocolor}                   |"
            echo -e "                            └──────────────────────────────────────────────┘"
            sleep 6s
            _menu
        else
            echo -e "                            ┌───────────────────────────────────────────────┐"
            echo -e "                            │  ${red} There is" "$(sed '/#EXTM3U/d' "$queue" | wc -l)" "url(s) in default playlist.${nocolor}     │"
            echo -e "                            │ Consider checking the url(s) list ${green}(option 6) ${nocolor} |"
            echo -e "                            │ or delete them ${green}(option 7).${nocolor}                    |"
            echo -e "                            └───────────────────────────────────────────────┘"
            sleep 6s
            _menu
        fi
    else
        _menu
    fi

}

_check_dependencies() {

    ## Checking dependencies: softwares, directories and files.
    declare -a deps=( "ffmpeg" "mpv" "mpvc" "ranger" "socat" "youtube-dl" )

    for i in "${deps[@]}"; do
        [[ -z $(command -v "$i") ]] \
            && echo " ${red}$i isn 't installed, bye..." \
            && exit 165
    done

    if [[ ! -d "$main_dir" ]]; then
        mkdir --parents {"$audios_dir","$playlists_dir","$tmp_dir","$videos_dir"}
    else
        [[ ! -d "$audios_dir" ]] && mkdir "$audios_dir"
        [[ ! -d "$playlists_dir" ]] && mkdir "$playlists_dir"
        [[ ! -d "$tmp_dir" ]] && mkdir "$tmp_dir"
        [[ ! -d "$videos_dir" ]] && mkdir "$videos_dir"
    fi

    [[ ! -f $queue ]] && touch "$queue" && echo "#EXTM3U" > "$queue"

    _check_queue

}

_check_editor() {

    for item in $EDITOR $VISUAL; do
        if [[ -z ${item+x} ]]; then
            echo " ${red}Your $item environment variable is not set..."
            echo " ${green}Please consider doing so."
            echo " Example: ${red}export EDITOR='vim' ${nocolor}"
            sleep 7s
            _menu
        fi
    done

}

_check_url() {

    if (( $(grep "" -c "$queue") > 1 )); then
        echo " ${green}Default playlist content:${nocolor}"
        while read -r urls; do
            echo " $urls"
        done < "$queue" | sed 's/#EXTM3U//'
        echo ""
        read -rsn 1 -p ${green}'delete url(s) [d], play url(s) [p], save url(s) as playlist [s] or back to menu [m]: '${nocolor} opt
        case $opt in
            d) _delete_url  ;;
            m) _menu        ;;
            p) _load_video  ;;
            s) _save_remove ;;
            *) _menu        ;;
        esac
    else
        echo " ${red}Default list is empty ${nocolor}"
        sleep 2s && _menu
    fi

}
