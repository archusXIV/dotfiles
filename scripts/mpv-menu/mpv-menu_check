#!/bin/bash
## This is a part of main script: mpv-menu.

_check_dependencies() {

    ## Checking dependencies: softwares, directories and files.
    declare -a deps=( "ffmpeg" "jq" "mpv" "mpvc" "ranger" "socat" "youtube-dl" )

    for i in "${deps[@]}"; do
        [[ -z $(command -v "$i") ]] && {
            echo " ${red}$i isn 't installed, bye..."
            exit 127
        }
    done

    if [[ ! -d $main_dir ]]; then
        mkdir --parents {"$audios_dir","$playlists_dir","$tmp_dir","$videos_dir"}
    else
        [[ ! -d $audios_dir ]] && mkdir "$audios_dir"
        [[ ! -d $playlists_dir ]] && mkdir "$playlists_dir"
        [[ ! -d $tmp_dir ]] && mkdir "$tmp_dir"
        [[ ! -d $videos_dir ]] && mkdir "$videos_dir"
    fi

    [[ ! -f $QUEUE ]] && {
        touch "$QUEUE"
        echo "#EXTM3U" > "$QUEUE"
    }

    _check_queue

}

_check_editor() {

    for item in $EDITOR $VISUAL; do
        if [[ -z ${item+x} ]]; then
            echo " ${red}Your $item environment variable is not set..."
            echo " ${green}Please consider doing so."
            echo " Example: ${red}export EDITOR='vim' ${nocolor}"
            sleep 7s
            _menu
        fi
    done

}

_check_queue() {

    ## This looks ugly but everything will fit nicely...
    if (( $(grep "" -c "$QUEUE") > 1 )); then
        echo -e "                              ┌──────────────────────────────────────────────┐"
        echo -e "                              │      ${red}Default playlist contains $(_get_lines_queue) url(s).${nocolor}     │"
        echo -e "                              │ Consider checking the url(s) list ${green}(option 6).${nocolor}|"
        echo -e "                              │ Or delete them ${green}(option 7).${nocolor}                   |"
        echo -e "                              └──────────────────────────────────────────────┘"
        sleep 5s
        _menu
    else
        _menu
    fi

}

_check_code_queue() {
    # In case link is secured or no format code found.
    echo " ${green}Verifying media codes from default list...${nocolor}"

    for lines in $(cat "$QUEUE" | sed '/#EXTM3U/d'); do
        # checking the last url we added.
        youtube-dl -F "$(cat "$QUEUE" | sed -n '$ p')" >/dev/null 2>&1

        if [[ $? -eq 1 ]]; then
            echo " ${red}No format code found! Try again.${nocolor}"
            sed -i '$ d' "$QUEUE"
            sleep 2s
            if (( $(grep "" -c "$QUEUE" ) < 2 )); then
                _menu
            else
                # _check_code function acts in _copy_audio/_videeo loops...
                continue
            fi
        fi
        echo "$lines ${green}ok${nocolor}"
        sleep 1s
    done
}

_check_code_load() {
    # Same as above, but for the chosen already existing playlist.
    echo " ${green}Verifying media codes from $list...${nocolor}"

    for lines in $(cat "$list" | sed '/#EXTM3U/d'); do
        
        youtube-dl -F "$(cat "$list" | sed -n '$ p')" >/dev/null 2>&1

        if [[ $? -eq 1 ]]; then
            sed -i '$ d' "$list"
            echo -e " ${red}No format code found!\n ${green}Edit $list? [Y/n]: ${nocolor}"
            read -rs answer
            case "$answer" in
                Y|y|yes)    _edit_playlist ;;
                n|N|no )    if (( $(grep "" -c "$list" ) < 2 )); then
                                _menu
                            else
                                continue
                            fi ;;
                *      )    echo " ${red}Wrong option...try again.${nocolor}"
                            sleep 2s
                            _menu ;;
            esac
        fi
        echo "$lines ${green}ok${nocolor}"
        sleep 1s
    done
}

_view_url_info() {

    [[ -f $COMPLETE_INFO ]] && rm "$COMPLETE_INFO"

    if (( $(grep "" -c "$QUEUE") > 1 )); then
        echo " ${green}Getting url(s) infos, please wait...${nocolor}"

        while read -r urls; do
            youtube-dl -j "$urls" \
            | jq '(.title, .webpage_url)' >> "$COMPLETE_INFO"
        done < <(cat "$QUEUE" | sed '/#EXTM3U/d')

        cat -n "$COMPLETE_INFO"
        cat "$QUEUE" | sed '/#EXTM3U/d' > "$URLS_INFO"
        sed -i 's/"//g; /^https/d' "$COMPLETE_INFO"

        echo ""
        read -rsn 1 -p ${green}' delete url(s) [d], play url(s) [p], save url(s) as playlist [s] or back to menu [m]: '${nocolor} opt
        case "$opt" in
            d) rm "$COMPLETE_INFO" && _delete_url          ;;
            m) _menu                                       ;;
            p) echo ""
               _check_code_queue
               _load_video                                 ;;
            s) rm "$COMPLETE_INFO" && _save_remove         ;;
            *) _menu                                       ;;
        esac
    else
        echo " ${red}Default list is empty.${nocolor}"
        sleep 2s && _menu
    fi

}
