#!/bin/sh
#
# fyr - 2019 (c) MIT | ~/bin/sh mpvc
# control mpv remotely using JSON ipc
# https://mpv.io/manual/master/#json-ipc

SOCKET=${MPVC_SOCKET:-/tmp/mpvsocket}
MPVOPTIONS="--no-audio-display"

source ~/.local/bin/mpvc_functions

main() {
    validateDeps

    # grab mpv options first if any
    for arg in "$@"; do
        [ "$MPVFLAG" = "true" ] && {
            MPVOPTIONS="$MPVOPTIONS $arg"
        } || {
            [ "$arg" = "--" ] && MPVFLAG=true
        }
    done

    # grab piped input for input if it exists
    if [ -p /dev/stdin ]; then
        QUIETFLAG="true"

        while read -r line; do
            [ -f "$line" ] && appendTrack "${line}"
        done
    fi

    case "$1" in
        add|-a|--append)
            shiftcount=0
            QUIETFLAG="true"

            for arg in "$@"; do
                [ -f "$arg" ] && {
                    appendTrack "$arg"
                    shiftcount=$((shiftcount + 1))
                }
            done

            shift "$((shiftcount + 1))"
            ;;
    esac

    case "$1" in
        add|-a|--append|playnext|-A|--playnext)
            ;;
        *)
            validateSocket
            ;;
    esac

    # mpc compatibility layer
    case "$1" in
        play|start|resume)
            case "$2" in
                0)
                    setTrackAbsolute 1
                    ;;
                $)
                    setTrackAbsolute "$(getPropertyString playlist-count)"
                    ;;
                *)
                    intCheck "$2" && setTrackAbsolute "$2"
                    ;;
            esac

            alwaysPlay
            printFinalOutput
            ;;
        vol|volume)
            firstChar=$(printf '%s\n' "$2" | cut -c 1)
            case "$firstChar" in
                "+")
                    volume=$(printf '%s\n' "$2" | cut -d+ -f2)
                    setVolumeRelative "$volume"
                    ;;
                "-")
                    volume=$(printf '%s\n' "$2" | cut -d- -f2)
                    setVolumeRelative "-${volume}"
                    ;;
                *)
                    [ -n "$2" ] && {
                        setVolumeAbsolute "$2"
                    } || {
                        printf '%s\n' "Specify volume in/decrease amount or absolute amount."
                        return 1
                    }
                    ;;
            esac

            printFinalOutput
            ;;
        repeat)
            case "$2" in
                "on")  toggleLoopPlaylist inf ;;
                "off") toggleLoopPlaylist no  ;;
                *)     toggleLoopPlaylist     ;;
            esac

            printFinalOutput
            ;;
        single)
            case "$2" in
                "on")  toggleLoopFile yes ;;
                "off") toggleLoopFile no  ;;
                *)     toggleLoopFile     ;;
            esac

            printFinalOutput
            ;;
        metadata) getFilenameMetadata "$2" ;;
        pause)    alwaysPause         ; printFinalOutput ;;
        next)     setTrackRelative 1  ; printFinalOutput ;;
        prev)     setTrackRelative -1 ; printFinalOutput ;;
        move)     moveTrack "$2" "$3" ; printFinalOutput ;;
        mute)     toggleMute true     ; printFinalOutput ;;
        unmute)   toggleMute false    ; printFinalOutput ;;
        pretty)   printPrettyOutput ;;
        # find) do fuzzy search
        # idleloop) observe_property
        # consume) to implement # add on|off toggle
        # random) MPV doesn't have this control option!
        # create an issue or implement puesdo-random tracks
    esac

    # GNU-style options
    for arg in "$@"; do
        [ "$SEEKFLAG"     = "true" ] && setTimeRelative "$arg";   SEEKFLAG=false
        [ "$TIMEFLAG"     = "true" ] && setTimeAbsolute "$arg";   TIMEFLAG=false
        [ "$VOLFLAG"      = "true" ] && setVolumeRelative "$arg"; VOLFLAG=false
        [ "$VOLUMEFLAG"   = "true" ] && setVolumeAbsolute "$arg"; VOLUMEFLAG=false
        [ "$SPEEDFLAG"    = "true" ] && setSpeedRelative "$arg";  SPEEDFLAG=false
        [ "$SPEEDVALFLAG" = "true" ] && setSpeedAbsolute "$arg";  SPEEDVALFLAG=false
        [ "$TRACKFLAG"    = "true" ] && setTrackRelative "$arg";  TRACKFLAG=false
        [ "$TRACKVALFLAG" = "true" ] && setTrackAbsolute "$arg";  TRACKVALFLAG=false
        [ "$REMOVEFLAG"   = "true" ] && removeTrack "$arg";       REMOVEFLAG=false
        [ "$SAVEFLAG"     = "true" ] && savePlaylist "$arg";      SAVEFLAG=false
        [ "$PLAYNEXT"     = "true" ] && playNext "$arg";          PLAYNEXT=false

        case "$arg" in
            -t|--seek|seek)                  SEEKFLAG=true                  ;;
            -T|--time)                       TIMEFLAG=true                  ;;
            -v|--vol)                        VOLFLAG=true                   ;;
            -V|--volume)                     VOLUMEFLAG=true                ;;
            -x|--speed|speed)                SPEEDFLAG=true                 ;;
            -X|--speedval)                   SPEEDVALFLAG=true              ;;
            -j|--track)                      TRACKFLAG=true                 ;;
            -J|--tracknum)                   TRACKVALFLAG=true              ;;
            -r|--remove|rm|remove|del)       REMOVEFLAG=true                ;;
            --save|save)                     SAVEFLAG=true                  ;;
            -s|--stop|stop)                  alwaysPause; setTimeAbsolute 0 ;;
            -P|--play|play)                  alwaysPlay                     ;;
            -A|--playnext|playnext)          PLAYNEXT=true                  ;;
            -p|--toggle|toggle)              togglePause                    ;;
            -m|--mute)                       toggleMute                     ;;
            mute)                            toggleMute true                ;;
            unmute)                          toggleMute false               ;;
            -i|--playlist|playlist)          getPlaylist; exit              ;;
            -I|--fullplaylist|fullplaylist)  getFullPlaylist; exit          ;;
            -L|--loop|loop)                  toggleLoopPlaylist             ;;
            -l|--loopfile|loopfile)          toggleLoopFile                 ;;
            -z|--shuffle|shuffle)            shufflePlaylist                ;;
            -c|--crop|crop)                  cropPlaylist                   ;;
            -C|--clear|clear)                clearPlaylist                  ;;
            -k|--kill|kill)                  killSocket                     ;;
            --version|version)               getVersion                     ;;
            -f|--format)                     continue                       ;;
            -a|--append)                     continue                       ;;
            -S|--socket)                     continue                       ;;
            -[1-9][0-9][0-9][0-9][0-9][0-9]) continue                       ;;
            --|---|----)                     continue                       ;;
            -?)                              usage 1                        ;;
        esac
    done

    # produce format strings last
    [ "$QUIETFLAG" != "true" ] && {
        [ -n "$FORMATSTRING" ] && formatPrint
        printFinalOutput
    }
}

# more global argument parsing
for arg in "$@"; do
    [ "$SOCKETFLAG" = "true" ] && SOCKET=$arg && SOCKETFLAG=false
    [ "$FORMATFLAG" = "true" ] && FORMATSTRING=$arg && FORMATFLAG=false

    case $arg in
        --version)        getVersion                        ;;
        -q|--quiet)       QUIETFLAG=true                    ;;
        -I|--image)       IMAGEFLAG=true                    ;;
        -S|--socket)      SOCKETFLAG=true                   ;;
        -f|--format)      FORMATFLAG=true                   ;;
        -Q|--vid=no)      MPVOPTIONS="$MPVOPTIONS --vid=no" ;;
        -K|--killall)     killAllMpv                        ;;
        --list-options)   usage 0                           ;;
        -h|--help|h|help) usage 0                           ;;
    esac
done

[ "$QUIETFLAG" = "true" ] && {
    main "$@" >/dev/null 2>&1
} || {
    main "$@"
}
